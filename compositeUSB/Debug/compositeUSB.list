
compositeUSB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008270  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08008380  08008380  00018380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008454  08008454  00020218  2**0
                  CONTENTS
  4 .ARM          00000000  08008454  08008454  00020218  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008454  08008454  00020218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008454  08008454  00018454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008458  08008458  00018458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  0800845c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002110  20000218  08008674  00020218  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002328  08008674  00022328  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022562  00000000  00000000  00020241  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000046f0  00000000  00000000  000427a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001798  00000000  00000000  00046e98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001590  00000000  00000000  00048630  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00006a0d  00000000  00000000  00049bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015d80  00000000  00000000  000505cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007ecf4  00000000  00000000  0006634d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e5041  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060d8  00000000  00000000  000e50bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000218 	.word	0x20000218
 800012c:	00000000 	.word	0x00000000
 8000130:	08008368 	.word	0x08008368

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000021c 	.word	0x2000021c
 800014c:	08008368 	.word	0x08008368

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b086      	sub	sp, #24
 8000154:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000156:	f000 fa23 	bl	80005a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800015a:	f000 f849 	bl	80001f0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  /* Сброс USB */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800015e:	4b1f      	ldr	r3, [pc, #124]	; (80001dc <main+0x8c>)
 8000160:	699b      	ldr	r3, [r3, #24]
 8000162:	4a1e      	ldr	r2, [pc, #120]	; (80001dc <main+0x8c>)
 8000164:	f043 0304 	orr.w	r3, r3, #4
 8000168:	6193      	str	r3, [r2, #24]
 800016a:	4b1c      	ldr	r3, [pc, #112]	; (80001dc <main+0x8c>)
 800016c:	699b      	ldr	r3, [r3, #24]
 800016e:	f003 0304 	and.w	r3, r3, #4
 8000172:	607b      	str	r3, [r7, #4]
 8000174:	687b      	ldr	r3, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000176:	f107 0308 	add.w	r3, r7, #8
 800017a:	2200      	movs	r2, #0
 800017c:	601a      	str	r2, [r3, #0]
 800017e:	605a      	str	r2, [r3, #4]
 8000180:	609a      	str	r2, [r3, #8]
 8000182:	60da      	str	r2, [r3, #12]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000184:	2200      	movs	r2, #0
 8000186:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800018a:	4815      	ldr	r0, [pc, #84]	; (80001e0 <main+0x90>)
 800018c:	f000 fc96 	bl	8000abc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000190:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000194:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000196:	2301      	movs	r3, #1
 8000198:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800019a:	2300      	movs	r3, #0
 800019c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800019e:	2302      	movs	r3, #2
 80001a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001a2:	f107 0308 	add.w	r3, r7, #8
 80001a6:	4619      	mov	r1, r3
 80001a8:	480d      	ldr	r0, [pc, #52]	; (80001e0 <main+0x90>)
 80001aa:	f000 fb2d 	bl	8000808 <HAL_GPIO_Init>
  HAL_Delay(100);
 80001ae:	2064      	movs	r0, #100	; 0x64
 80001b0:	f000 fa28 	bl	8000604 <HAL_Delay>
  HAL_Init();
 80001b4:	f000 f9f4 	bl	80005a0 <HAL_Init>
  SystemClock_Config();
 80001b8:	f000 f81a 	bl	80001f0 <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001bc:	f000 f874 	bl	80002a8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001c0:	f005 f838 	bl	8005234 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80001c4:	4a07      	ldr	r2, [pc, #28]	; (80001e4 <main+0x94>)
 80001c6:	2100      	movs	r1, #0
 80001c8:	4807      	ldr	r0, [pc, #28]	; (80001e8 <main+0x98>)
 80001ca:	f005 f899 	bl	8005300 <osThreadNew>
 80001ce:	4602      	mov	r2, r0
 80001d0:	4b06      	ldr	r3, [pc, #24]	; (80001ec <main+0x9c>)
 80001d2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80001d4:	f005 f860 	bl	8005298 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001d8:	e7fe      	b.n	80001d8 <main+0x88>
 80001da:	bf00      	nop
 80001dc:	40021000 	.word	0x40021000
 80001e0:	40010800 	.word	0x40010800
 80001e4:	08008418 	.word	0x08008418
 80001e8:	08000341 	.word	0x08000341
 80001ec:	20001b40 	.word	0x20001b40

080001f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b094      	sub	sp, #80	; 0x50
 80001f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001fa:	2228      	movs	r2, #40	; 0x28
 80001fc:	2100      	movs	r1, #0
 80001fe:	4618      	mov	r0, r3
 8000200:	f008 f8a9 	bl	8008356 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000204:	f107 0314 	add.w	r3, r7, #20
 8000208:	2200      	movs	r2, #0
 800020a:	601a      	str	r2, [r3, #0]
 800020c:	605a      	str	r2, [r3, #4]
 800020e:	609a      	str	r2, [r3, #8]
 8000210:	60da      	str	r2, [r3, #12]
 8000212:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000214:	1d3b      	adds	r3, r7, #4
 8000216:	2200      	movs	r2, #0
 8000218:	601a      	str	r2, [r3, #0]
 800021a:	605a      	str	r2, [r3, #4]
 800021c:	609a      	str	r2, [r3, #8]
 800021e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000220:	2301      	movs	r3, #1
 8000222:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000224:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000228:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800022a:	2300      	movs	r3, #0
 800022c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800022e:	2301      	movs	r3, #1
 8000230:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000232:	2302      	movs	r3, #2
 8000234:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000236:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800023a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800023c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000240:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000242:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000246:	4618      	mov	r0, r3
 8000248:	f001 fb1e 	bl	8001888 <HAL_RCC_OscConfig>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d001      	beq.n	8000256 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000252:	f000 f891 	bl	8000378 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000256:	230f      	movs	r3, #15
 8000258:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800025a:	2302      	movs	r3, #2
 800025c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800025e:	2300      	movs	r3, #0
 8000260:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000262:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000266:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000268:	2300      	movs	r3, #0
 800026a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800026c:	f107 0314 	add.w	r3, r7, #20
 8000270:	2101      	movs	r1, #1
 8000272:	4618      	mov	r0, r3
 8000274:	f001 fd88 	bl	8001d88 <HAL_RCC_ClockConfig>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d001      	beq.n	8000282 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800027e:	f000 f87b 	bl	8000378 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000282:	2310      	movs	r3, #16
 8000284:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000286:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800028a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800028c:	1d3b      	adds	r3, r7, #4
 800028e:	4618      	mov	r0, r3
 8000290:	f001 ff32 	bl	80020f8 <HAL_RCCEx_PeriphCLKConfig>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800029a:	f000 f86d 	bl	8000378 <Error_Handler>
  }
}
 800029e:	bf00      	nop
 80002a0:	3750      	adds	r7, #80	; 0x50
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
	...

080002a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b088      	sub	sp, #32
 80002ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ae:	f107 0310 	add.w	r3, r7, #16
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	605a      	str	r2, [r3, #4]
 80002b8:	609a      	str	r2, [r3, #8]
 80002ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002bc:	4b1e      	ldr	r3, [pc, #120]	; (8000338 <MX_GPIO_Init+0x90>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	4a1d      	ldr	r2, [pc, #116]	; (8000338 <MX_GPIO_Init+0x90>)
 80002c2:	f043 0310 	orr.w	r3, r3, #16
 80002c6:	6193      	str	r3, [r2, #24]
 80002c8:	4b1b      	ldr	r3, [pc, #108]	; (8000338 <MX_GPIO_Init+0x90>)
 80002ca:	699b      	ldr	r3, [r3, #24]
 80002cc:	f003 0310 	and.w	r3, r3, #16
 80002d0:	60fb      	str	r3, [r7, #12]
 80002d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002d4:	4b18      	ldr	r3, [pc, #96]	; (8000338 <MX_GPIO_Init+0x90>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	4a17      	ldr	r2, [pc, #92]	; (8000338 <MX_GPIO_Init+0x90>)
 80002da:	f043 0320 	orr.w	r3, r3, #32
 80002de:	6193      	str	r3, [r2, #24]
 80002e0:	4b15      	ldr	r3, [pc, #84]	; (8000338 <MX_GPIO_Init+0x90>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	f003 0320 	and.w	r3, r3, #32
 80002e8:	60bb      	str	r3, [r7, #8]
 80002ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ec:	4b12      	ldr	r3, [pc, #72]	; (8000338 <MX_GPIO_Init+0x90>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	4a11      	ldr	r2, [pc, #68]	; (8000338 <MX_GPIO_Init+0x90>)
 80002f2:	f043 0304 	orr.w	r3, r3, #4
 80002f6:	6193      	str	r3, [r2, #24]
 80002f8:	4b0f      	ldr	r3, [pc, #60]	; (8000338 <MX_GPIO_Init+0x90>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	f003 0304 	and.w	r3, r3, #4
 8000300:	607b      	str	r3, [r7, #4]
 8000302:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000304:	2200      	movs	r2, #0
 8000306:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800030a:	480c      	ldr	r0, [pc, #48]	; (800033c <MX_GPIO_Init+0x94>)
 800030c:	f000 fbd6 	bl	8000abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000310:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000314:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000316:	2301      	movs	r3, #1
 8000318:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800031a:	2300      	movs	r3, #0
 800031c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800031e:	2302      	movs	r3, #2
 8000320:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000322:	f107 0310 	add.w	r3, r7, #16
 8000326:	4619      	mov	r1, r3
 8000328:	4804      	ldr	r0, [pc, #16]	; (800033c <MX_GPIO_Init+0x94>)
 800032a:	f000 fa6d 	bl	8000808 <HAL_GPIO_Init>

}
 800032e:	bf00      	nop
 8000330:	3720      	adds	r7, #32
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	40021000 	.word	0x40021000
 800033c:	40011000 	.word	0x40011000

08000340 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000348:	f007 fc08 	bl	8007b5c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800034c:	2001      	movs	r0, #1
 800034e:	f005 f881 	bl	8005454 <osDelay>
 8000352:	e7fb      	b.n	800034c <StartDefaultTask+0xc>

08000354 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a04      	ldr	r2, [pc, #16]	; (8000374 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000362:	4293      	cmp	r3, r2
 8000364:	d101      	bne.n	800036a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000366:	f000 f931 	bl	80005cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800036a:	bf00      	nop
 800036c:	3708      	adds	r7, #8
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	40012c00 	.word	0x40012c00

08000378 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800037c:	bf00      	nop
 800037e:	46bd      	mov	sp, r7
 8000380:	bc80      	pop	{r7}
 8000382:	4770      	bx	lr

08000384 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000384:	b480      	push	{r7}
 8000386:	b085      	sub	sp, #20
 8000388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800038a:	4b15      	ldr	r3, [pc, #84]	; (80003e0 <HAL_MspInit+0x5c>)
 800038c:	699b      	ldr	r3, [r3, #24]
 800038e:	4a14      	ldr	r2, [pc, #80]	; (80003e0 <HAL_MspInit+0x5c>)
 8000390:	f043 0301 	orr.w	r3, r3, #1
 8000394:	6193      	str	r3, [r2, #24]
 8000396:	4b12      	ldr	r3, [pc, #72]	; (80003e0 <HAL_MspInit+0x5c>)
 8000398:	699b      	ldr	r3, [r3, #24]
 800039a:	f003 0301 	and.w	r3, r3, #1
 800039e:	60bb      	str	r3, [r7, #8]
 80003a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003a2:	4b0f      	ldr	r3, [pc, #60]	; (80003e0 <HAL_MspInit+0x5c>)
 80003a4:	69db      	ldr	r3, [r3, #28]
 80003a6:	4a0e      	ldr	r2, [pc, #56]	; (80003e0 <HAL_MspInit+0x5c>)
 80003a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003ac:	61d3      	str	r3, [r2, #28]
 80003ae:	4b0c      	ldr	r3, [pc, #48]	; (80003e0 <HAL_MspInit+0x5c>)
 80003b0:	69db      	ldr	r3, [r3, #28]
 80003b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003b6:	607b      	str	r3, [r7, #4]
 80003b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003ba:	4b0a      	ldr	r3, [pc, #40]	; (80003e4 <HAL_MspInit+0x60>)
 80003bc:	685b      	ldr	r3, [r3, #4]
 80003be:	60fb      	str	r3, [r7, #12]
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003c6:	60fb      	str	r3, [r7, #12]
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003ce:	60fb      	str	r3, [r7, #12]
 80003d0:	4a04      	ldr	r2, [pc, #16]	; (80003e4 <HAL_MspInit+0x60>)
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003d6:	bf00      	nop
 80003d8:	3714      	adds	r7, #20
 80003da:	46bd      	mov	sp, r7
 80003dc:	bc80      	pop	{r7}
 80003de:	4770      	bx	lr
 80003e0:	40021000 	.word	0x40021000
 80003e4:	40010000 	.word	0x40010000

080003e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b08c      	sub	sp, #48	; 0x30
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80003f0:	2300      	movs	r3, #0
 80003f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80003f4:	2300      	movs	r3, #0
 80003f6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 80003f8:	2200      	movs	r2, #0
 80003fa:	6879      	ldr	r1, [r7, #4]
 80003fc:	2019      	movs	r0, #25
 80003fe:	f000 f9d8 	bl	80007b2 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000402:	2019      	movs	r0, #25
 8000404:	f000 f9f1 	bl	80007ea <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000408:	4b1e      	ldr	r3, [pc, #120]	; (8000484 <HAL_InitTick+0x9c>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	4a1d      	ldr	r2, [pc, #116]	; (8000484 <HAL_InitTick+0x9c>)
 800040e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000412:	6193      	str	r3, [r2, #24]
 8000414:	4b1b      	ldr	r3, [pc, #108]	; (8000484 <HAL_InitTick+0x9c>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800041c:	60fb      	str	r3, [r7, #12]
 800041e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000420:	f107 0210 	add.w	r2, r7, #16
 8000424:	f107 0314 	add.w	r3, r7, #20
 8000428:	4611      	mov	r1, r2
 800042a:	4618      	mov	r0, r3
 800042c:	f001 fe16 	bl	800205c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000430:	f001 fe00 	bl	8002034 <HAL_RCC_GetPCLK2Freq>
 8000434:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000438:	4a13      	ldr	r2, [pc, #76]	; (8000488 <HAL_InitTick+0xa0>)
 800043a:	fba2 2303 	umull	r2, r3, r2, r3
 800043e:	0c9b      	lsrs	r3, r3, #18
 8000440:	3b01      	subs	r3, #1
 8000442:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000444:	4b11      	ldr	r3, [pc, #68]	; (800048c <HAL_InitTick+0xa4>)
 8000446:	4a12      	ldr	r2, [pc, #72]	; (8000490 <HAL_InitTick+0xa8>)
 8000448:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800044a:	4b10      	ldr	r3, [pc, #64]	; (800048c <HAL_InitTick+0xa4>)
 800044c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000450:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000452:	4a0e      	ldr	r2, [pc, #56]	; (800048c <HAL_InitTick+0xa4>)
 8000454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000456:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000458:	4b0c      	ldr	r3, [pc, #48]	; (800048c <HAL_InitTick+0xa4>)
 800045a:	2200      	movs	r2, #0
 800045c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800045e:	4b0b      	ldr	r3, [pc, #44]	; (800048c <HAL_InitTick+0xa4>)
 8000460:	2200      	movs	r2, #0
 8000462:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000464:	4809      	ldr	r0, [pc, #36]	; (800048c <HAL_InitTick+0xa4>)
 8000466:	f001 fefd 	bl	8002264 <HAL_TIM_Base_Init>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d104      	bne.n	800047a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000470:	4806      	ldr	r0, [pc, #24]	; (800048c <HAL_InitTick+0xa4>)
 8000472:	f001 ff2b 	bl	80022cc <HAL_TIM_Base_Start_IT>
 8000476:	4603      	mov	r3, r0
 8000478:	e000      	b.n	800047c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800047a:	2301      	movs	r3, #1
}
 800047c:	4618      	mov	r0, r3
 800047e:	3730      	adds	r7, #48	; 0x30
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	40021000 	.word	0x40021000
 8000488:	431bde83 	.word	0x431bde83
 800048c:	20001b44 	.word	0x20001b44
 8000490:	40012c00 	.word	0x40012c00

08000494 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000498:	bf00      	nop
 800049a:	46bd      	mov	sp, r7
 800049c:	bc80      	pop	{r7}
 800049e:	4770      	bx	lr

080004a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004a4:	e7fe      	b.n	80004a4 <HardFault_Handler+0x4>

080004a6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004a6:	b480      	push	{r7}
 80004a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004aa:	e7fe      	b.n	80004aa <MemManage_Handler+0x4>

080004ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004b0:	e7fe      	b.n	80004b0 <BusFault_Handler+0x4>

080004b2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004b2:	b480      	push	{r7}
 80004b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004b6:	e7fe      	b.n	80004b6 <UsageFault_Handler+0x4>

080004b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004bc:	bf00      	nop
 80004be:	46bd      	mov	sp, r7
 80004c0:	bc80      	pop	{r7}
 80004c2:	4770      	bx	lr

080004c4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80004c8:	4802      	ldr	r0, [pc, #8]	; (80004d4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80004ca:	f000 fc16 	bl	8000cfa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80004ce:	bf00      	nop
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	200020bc 	.word	0x200020bc

080004d8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80004dc:	4802      	ldr	r0, [pc, #8]	; (80004e8 <TIM1_UP_IRQHandler+0x10>)
 80004de:	f001 ff18 	bl	8002312 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80004e2:	bf00      	nop
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	20001b44 	.word	0x20001b44

080004ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80004f0:	4b15      	ldr	r3, [pc, #84]	; (8000548 <SystemInit+0x5c>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a14      	ldr	r2, [pc, #80]	; (8000548 <SystemInit+0x5c>)
 80004f6:	f043 0301 	orr.w	r3, r3, #1
 80004fa:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80004fc:	4b12      	ldr	r3, [pc, #72]	; (8000548 <SystemInit+0x5c>)
 80004fe:	685a      	ldr	r2, [r3, #4]
 8000500:	4911      	ldr	r1, [pc, #68]	; (8000548 <SystemInit+0x5c>)
 8000502:	4b12      	ldr	r3, [pc, #72]	; (800054c <SystemInit+0x60>)
 8000504:	4013      	ands	r3, r2
 8000506:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000508:	4b0f      	ldr	r3, [pc, #60]	; (8000548 <SystemInit+0x5c>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a0e      	ldr	r2, [pc, #56]	; (8000548 <SystemInit+0x5c>)
 800050e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000516:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000518:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <SystemInit+0x5c>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a0a      	ldr	r2, [pc, #40]	; (8000548 <SystemInit+0x5c>)
 800051e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000522:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000524:	4b08      	ldr	r3, [pc, #32]	; (8000548 <SystemInit+0x5c>)
 8000526:	685b      	ldr	r3, [r3, #4]
 8000528:	4a07      	ldr	r2, [pc, #28]	; (8000548 <SystemInit+0x5c>)
 800052a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800052e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000530:	4b05      	ldr	r3, [pc, #20]	; (8000548 <SystemInit+0x5c>)
 8000532:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000536:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000538:	4b05      	ldr	r3, [pc, #20]	; (8000550 <SystemInit+0x64>)
 800053a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800053e:	609a      	str	r2, [r3, #8]
#endif 
}
 8000540:	bf00      	nop
 8000542:	46bd      	mov	sp, r7
 8000544:	bc80      	pop	{r7}
 8000546:	4770      	bx	lr
 8000548:	40021000 	.word	0x40021000
 800054c:	f8ff0000 	.word	0xf8ff0000
 8000550:	e000ed00 	.word	0xe000ed00

08000554 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000554:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000556:	e003      	b.n	8000560 <LoopCopyDataInit>

08000558 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000558:	4b0b      	ldr	r3, [pc, #44]	; (8000588 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800055a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800055c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800055e:	3104      	adds	r1, #4

08000560 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000560:	480a      	ldr	r0, [pc, #40]	; (800058c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000562:	4b0b      	ldr	r3, [pc, #44]	; (8000590 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000564:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000566:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000568:	d3f6      	bcc.n	8000558 <CopyDataInit>
  ldr r2, =_sbss
 800056a:	4a0a      	ldr	r2, [pc, #40]	; (8000594 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800056c:	e002      	b.n	8000574 <LoopFillZerobss>

0800056e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800056e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000570:	f842 3b04 	str.w	r3, [r2], #4

08000574 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000574:	4b08      	ldr	r3, [pc, #32]	; (8000598 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000576:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000578:	d3f9      	bcc.n	800056e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800057a:	f7ff ffb7 	bl	80004ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800057e:	f007 febb 	bl	80082f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000582:	f7ff fde5 	bl	8000150 <main>
  bx lr
 8000586:	4770      	bx	lr
  ldr r3, =_sidata
 8000588:	0800845c 	.word	0x0800845c
  ldr r0, =_sdata
 800058c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000590:	20000218 	.word	0x20000218
  ldr r2, =_sbss
 8000594:	20000218 	.word	0x20000218
  ldr r3, = _ebss
 8000598:	20002328 	.word	0x20002328

0800059c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800059c:	e7fe      	b.n	800059c <ADC1_2_IRQHandler>
	...

080005a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005a4:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <HAL_Init+0x28>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a07      	ldr	r2, [pc, #28]	; (80005c8 <HAL_Init+0x28>)
 80005aa:	f043 0310 	orr.w	r3, r3, #16
 80005ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b0:	2003      	movs	r0, #3
 80005b2:	f000 f8f3 	bl	800079c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005b6:	2000      	movs	r0, #0
 80005b8:	f7ff ff16 	bl	80003e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005bc:	f7ff fee2 	bl	8000384 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005c0:	2300      	movs	r3, #0
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40022000 	.word	0x40022000

080005cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005d0:	4b05      	ldr	r3, [pc, #20]	; (80005e8 <HAL_IncTick+0x1c>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	461a      	mov	r2, r3
 80005d6:	4b05      	ldr	r3, [pc, #20]	; (80005ec <HAL_IncTick+0x20>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4413      	add	r3, r2
 80005dc:	4a03      	ldr	r2, [pc, #12]	; (80005ec <HAL_IncTick+0x20>)
 80005de:	6013      	str	r3, [r2, #0]
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr
 80005e8:	20000008 	.word	0x20000008
 80005ec:	20001b84 	.word	0x20001b84

080005f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  return uwTick;
 80005f4:	4b02      	ldr	r3, [pc, #8]	; (8000600 <HAL_GetTick+0x10>)
 80005f6:	681b      	ldr	r3, [r3, #0]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr
 8000600:	20001b84 	.word	0x20001b84

08000604 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800060c:	f7ff fff0 	bl	80005f0 <HAL_GetTick>
 8000610:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800061c:	d005      	beq.n	800062a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800061e:	4b09      	ldr	r3, [pc, #36]	; (8000644 <HAL_Delay+0x40>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	461a      	mov	r2, r3
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	4413      	add	r3, r2
 8000628:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800062a:	bf00      	nop
 800062c:	f7ff ffe0 	bl	80005f0 <HAL_GetTick>
 8000630:	4602      	mov	r2, r0
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	1ad3      	subs	r3, r2, r3
 8000636:	68fa      	ldr	r2, [r7, #12]
 8000638:	429a      	cmp	r2, r3
 800063a:	d8f7      	bhi.n	800062c <HAL_Delay+0x28>
  {
  }
}
 800063c:	bf00      	nop
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000008 	.word	0x20000008

08000648 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000648:	b480      	push	{r7}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	f003 0307 	and.w	r3, r3, #7
 8000656:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000658:	4b0c      	ldr	r3, [pc, #48]	; (800068c <__NVIC_SetPriorityGrouping+0x44>)
 800065a:	68db      	ldr	r3, [r3, #12]
 800065c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800065e:	68ba      	ldr	r2, [r7, #8]
 8000660:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000664:	4013      	ands	r3, r2
 8000666:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000670:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000674:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000678:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800067a:	4a04      	ldr	r2, [pc, #16]	; (800068c <__NVIC_SetPriorityGrouping+0x44>)
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	60d3      	str	r3, [r2, #12]
}
 8000680:	bf00      	nop
 8000682:	3714      	adds	r7, #20
 8000684:	46bd      	mov	sp, r7
 8000686:	bc80      	pop	{r7}
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	e000ed00 	.word	0xe000ed00

08000690 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000694:	4b04      	ldr	r3, [pc, #16]	; (80006a8 <__NVIC_GetPriorityGrouping+0x18>)
 8000696:	68db      	ldr	r3, [r3, #12]
 8000698:	0a1b      	lsrs	r3, r3, #8
 800069a:	f003 0307 	and.w	r3, r3, #7
}
 800069e:	4618      	mov	r0, r3
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bc80      	pop	{r7}
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	db0b      	blt.n	80006d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	f003 021f 	and.w	r2, r3, #31
 80006c4:	4906      	ldr	r1, [pc, #24]	; (80006e0 <__NVIC_EnableIRQ+0x34>)
 80006c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ca:	095b      	lsrs	r3, r3, #5
 80006cc:	2001      	movs	r0, #1
 80006ce:	fa00 f202 	lsl.w	r2, r0, r2
 80006d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006d6:	bf00      	nop
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	bc80      	pop	{r7}
 80006de:	4770      	bx	lr
 80006e0:	e000e100 	.word	0xe000e100

080006e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	6039      	str	r1, [r7, #0]
 80006ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	db0a      	blt.n	800070e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	b2da      	uxtb	r2, r3
 80006fc:	490c      	ldr	r1, [pc, #48]	; (8000730 <__NVIC_SetPriority+0x4c>)
 80006fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000702:	0112      	lsls	r2, r2, #4
 8000704:	b2d2      	uxtb	r2, r2
 8000706:	440b      	add	r3, r1
 8000708:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800070c:	e00a      	b.n	8000724 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	b2da      	uxtb	r2, r3
 8000712:	4908      	ldr	r1, [pc, #32]	; (8000734 <__NVIC_SetPriority+0x50>)
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	f003 030f 	and.w	r3, r3, #15
 800071a:	3b04      	subs	r3, #4
 800071c:	0112      	lsls	r2, r2, #4
 800071e:	b2d2      	uxtb	r2, r2
 8000720:	440b      	add	r3, r1
 8000722:	761a      	strb	r2, [r3, #24]
}
 8000724:	bf00      	nop
 8000726:	370c      	adds	r7, #12
 8000728:	46bd      	mov	sp, r7
 800072a:	bc80      	pop	{r7}
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	e000e100 	.word	0xe000e100
 8000734:	e000ed00 	.word	0xe000ed00

08000738 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000738:	b480      	push	{r7}
 800073a:	b089      	sub	sp, #36	; 0x24
 800073c:	af00      	add	r7, sp, #0
 800073e:	60f8      	str	r0, [r7, #12]
 8000740:	60b9      	str	r1, [r7, #8]
 8000742:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	f003 0307 	and.w	r3, r3, #7
 800074a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800074c:	69fb      	ldr	r3, [r7, #28]
 800074e:	f1c3 0307 	rsb	r3, r3, #7
 8000752:	2b04      	cmp	r3, #4
 8000754:	bf28      	it	cs
 8000756:	2304      	movcs	r3, #4
 8000758:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800075a:	69fb      	ldr	r3, [r7, #28]
 800075c:	3304      	adds	r3, #4
 800075e:	2b06      	cmp	r3, #6
 8000760:	d902      	bls.n	8000768 <NVIC_EncodePriority+0x30>
 8000762:	69fb      	ldr	r3, [r7, #28]
 8000764:	3b03      	subs	r3, #3
 8000766:	e000      	b.n	800076a <NVIC_EncodePriority+0x32>
 8000768:	2300      	movs	r3, #0
 800076a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800076c:	f04f 32ff 	mov.w	r2, #4294967295
 8000770:	69bb      	ldr	r3, [r7, #24]
 8000772:	fa02 f303 	lsl.w	r3, r2, r3
 8000776:	43da      	mvns	r2, r3
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	401a      	ands	r2, r3
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000780:	f04f 31ff 	mov.w	r1, #4294967295
 8000784:	697b      	ldr	r3, [r7, #20]
 8000786:	fa01 f303 	lsl.w	r3, r1, r3
 800078a:	43d9      	mvns	r1, r3
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000790:	4313      	orrs	r3, r2
         );
}
 8000792:	4618      	mov	r0, r3
 8000794:	3724      	adds	r7, #36	; 0x24
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr

0800079c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f7ff ff4f 	bl	8000648 <__NVIC_SetPriorityGrouping>
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b086      	sub	sp, #24
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	4603      	mov	r3, r0
 80007ba:	60b9      	str	r1, [r7, #8]
 80007bc:	607a      	str	r2, [r7, #4]
 80007be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007c4:	f7ff ff64 	bl	8000690 <__NVIC_GetPriorityGrouping>
 80007c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	68b9      	ldr	r1, [r7, #8]
 80007ce:	6978      	ldr	r0, [r7, #20]
 80007d0:	f7ff ffb2 	bl	8000738 <NVIC_EncodePriority>
 80007d4:	4602      	mov	r2, r0
 80007d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007da:	4611      	mov	r1, r2
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff ff81 	bl	80006e4 <__NVIC_SetPriority>
}
 80007e2:	bf00      	nop
 80007e4:	3718      	adds	r7, #24
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b082      	sub	sp, #8
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	4603      	mov	r3, r0
 80007f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff ff57 	bl	80006ac <__NVIC_EnableIRQ>
}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
	...

08000808 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000808:	b480      	push	{r7}
 800080a:	b08b      	sub	sp, #44	; 0x2c
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000812:	2300      	movs	r3, #0
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000816:	2300      	movs	r3, #0
 8000818:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800081a:	e127      	b.n	8000a6c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800081c:	2201      	movs	r2, #1
 800081e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000820:	fa02 f303 	lsl.w	r3, r2, r3
 8000824:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	69fa      	ldr	r2, [r7, #28]
 800082c:	4013      	ands	r3, r2
 800082e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000830:	69ba      	ldr	r2, [r7, #24]
 8000832:	69fb      	ldr	r3, [r7, #28]
 8000834:	429a      	cmp	r2, r3
 8000836:	f040 8116 	bne.w	8000a66 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	2b12      	cmp	r3, #18
 8000840:	d034      	beq.n	80008ac <HAL_GPIO_Init+0xa4>
 8000842:	2b12      	cmp	r3, #18
 8000844:	d80d      	bhi.n	8000862 <HAL_GPIO_Init+0x5a>
 8000846:	2b02      	cmp	r3, #2
 8000848:	d02b      	beq.n	80008a2 <HAL_GPIO_Init+0x9a>
 800084a:	2b02      	cmp	r3, #2
 800084c:	d804      	bhi.n	8000858 <HAL_GPIO_Init+0x50>
 800084e:	2b00      	cmp	r3, #0
 8000850:	d031      	beq.n	80008b6 <HAL_GPIO_Init+0xae>
 8000852:	2b01      	cmp	r3, #1
 8000854:	d01c      	beq.n	8000890 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000856:	e048      	b.n	80008ea <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000858:	2b03      	cmp	r3, #3
 800085a:	d043      	beq.n	80008e4 <HAL_GPIO_Init+0xdc>
 800085c:	2b11      	cmp	r3, #17
 800085e:	d01b      	beq.n	8000898 <HAL_GPIO_Init+0x90>
          break;
 8000860:	e043      	b.n	80008ea <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000862:	4a89      	ldr	r2, [pc, #548]	; (8000a88 <HAL_GPIO_Init+0x280>)
 8000864:	4293      	cmp	r3, r2
 8000866:	d026      	beq.n	80008b6 <HAL_GPIO_Init+0xae>
 8000868:	4a87      	ldr	r2, [pc, #540]	; (8000a88 <HAL_GPIO_Init+0x280>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d806      	bhi.n	800087c <HAL_GPIO_Init+0x74>
 800086e:	4a87      	ldr	r2, [pc, #540]	; (8000a8c <HAL_GPIO_Init+0x284>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d020      	beq.n	80008b6 <HAL_GPIO_Init+0xae>
 8000874:	4a86      	ldr	r2, [pc, #536]	; (8000a90 <HAL_GPIO_Init+0x288>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d01d      	beq.n	80008b6 <HAL_GPIO_Init+0xae>
          break;
 800087a:	e036      	b.n	80008ea <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800087c:	4a85      	ldr	r2, [pc, #532]	; (8000a94 <HAL_GPIO_Init+0x28c>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d019      	beq.n	80008b6 <HAL_GPIO_Init+0xae>
 8000882:	4a85      	ldr	r2, [pc, #532]	; (8000a98 <HAL_GPIO_Init+0x290>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d016      	beq.n	80008b6 <HAL_GPIO_Init+0xae>
 8000888:	4a84      	ldr	r2, [pc, #528]	; (8000a9c <HAL_GPIO_Init+0x294>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d013      	beq.n	80008b6 <HAL_GPIO_Init+0xae>
          break;
 800088e:	e02c      	b.n	80008ea <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	68db      	ldr	r3, [r3, #12]
 8000894:	623b      	str	r3, [r7, #32]
          break;
 8000896:	e028      	b.n	80008ea <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	68db      	ldr	r3, [r3, #12]
 800089c:	3304      	adds	r3, #4
 800089e:	623b      	str	r3, [r7, #32]
          break;
 80008a0:	e023      	b.n	80008ea <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	68db      	ldr	r3, [r3, #12]
 80008a6:	3308      	adds	r3, #8
 80008a8:	623b      	str	r3, [r7, #32]
          break;
 80008aa:	e01e      	b.n	80008ea <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	68db      	ldr	r3, [r3, #12]
 80008b0:	330c      	adds	r3, #12
 80008b2:	623b      	str	r3, [r7, #32]
          break;
 80008b4:	e019      	b.n	80008ea <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	689b      	ldr	r3, [r3, #8]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d102      	bne.n	80008c4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80008be:	2304      	movs	r3, #4
 80008c0:	623b      	str	r3, [r7, #32]
          break;
 80008c2:	e012      	b.n	80008ea <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	689b      	ldr	r3, [r3, #8]
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d105      	bne.n	80008d8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008cc:	2308      	movs	r3, #8
 80008ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	69fa      	ldr	r2, [r7, #28]
 80008d4:	611a      	str	r2, [r3, #16]
          break;
 80008d6:	e008      	b.n	80008ea <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008d8:	2308      	movs	r3, #8
 80008da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	69fa      	ldr	r2, [r7, #28]
 80008e0:	615a      	str	r2, [r3, #20]
          break;
 80008e2:	e002      	b.n	80008ea <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80008e4:	2300      	movs	r3, #0
 80008e6:	623b      	str	r3, [r7, #32]
          break;
 80008e8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80008ea:	69bb      	ldr	r3, [r7, #24]
 80008ec:	2bff      	cmp	r3, #255	; 0xff
 80008ee:	d801      	bhi.n	80008f4 <HAL_GPIO_Init+0xec>
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	e001      	b.n	80008f8 <HAL_GPIO_Init+0xf0>
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	3304      	adds	r3, #4
 80008f8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80008fa:	69bb      	ldr	r3, [r7, #24]
 80008fc:	2bff      	cmp	r3, #255	; 0xff
 80008fe:	d802      	bhi.n	8000906 <HAL_GPIO_Init+0xfe>
 8000900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000902:	009b      	lsls	r3, r3, #2
 8000904:	e002      	b.n	800090c <HAL_GPIO_Init+0x104>
 8000906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000908:	3b08      	subs	r3, #8
 800090a:	009b      	lsls	r3, r3, #2
 800090c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	210f      	movs	r1, #15
 8000914:	693b      	ldr	r3, [r7, #16]
 8000916:	fa01 f303 	lsl.w	r3, r1, r3
 800091a:	43db      	mvns	r3, r3
 800091c:	401a      	ands	r2, r3
 800091e:	6a39      	ldr	r1, [r7, #32]
 8000920:	693b      	ldr	r3, [r7, #16]
 8000922:	fa01 f303 	lsl.w	r3, r1, r3
 8000926:	431a      	orrs	r2, r3
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000934:	2b00      	cmp	r3, #0
 8000936:	f000 8096 	beq.w	8000a66 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800093a:	4b59      	ldr	r3, [pc, #356]	; (8000aa0 <HAL_GPIO_Init+0x298>)
 800093c:	699b      	ldr	r3, [r3, #24]
 800093e:	4a58      	ldr	r2, [pc, #352]	; (8000aa0 <HAL_GPIO_Init+0x298>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6193      	str	r3, [r2, #24]
 8000946:	4b56      	ldr	r3, [pc, #344]	; (8000aa0 <HAL_GPIO_Init+0x298>)
 8000948:	699b      	ldr	r3, [r3, #24]
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000952:	4a54      	ldr	r2, [pc, #336]	; (8000aa4 <HAL_GPIO_Init+0x29c>)
 8000954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000956:	089b      	lsrs	r3, r3, #2
 8000958:	3302      	adds	r3, #2
 800095a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800095e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000962:	f003 0303 	and.w	r3, r3, #3
 8000966:	009b      	lsls	r3, r3, #2
 8000968:	220f      	movs	r2, #15
 800096a:	fa02 f303 	lsl.w	r3, r2, r3
 800096e:	43db      	mvns	r3, r3
 8000970:	68fa      	ldr	r2, [r7, #12]
 8000972:	4013      	ands	r3, r2
 8000974:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4a4b      	ldr	r2, [pc, #300]	; (8000aa8 <HAL_GPIO_Init+0x2a0>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d013      	beq.n	80009a6 <HAL_GPIO_Init+0x19e>
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4a4a      	ldr	r2, [pc, #296]	; (8000aac <HAL_GPIO_Init+0x2a4>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d00d      	beq.n	80009a2 <HAL_GPIO_Init+0x19a>
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4a49      	ldr	r2, [pc, #292]	; (8000ab0 <HAL_GPIO_Init+0x2a8>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d007      	beq.n	800099e <HAL_GPIO_Init+0x196>
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4a48      	ldr	r2, [pc, #288]	; (8000ab4 <HAL_GPIO_Init+0x2ac>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d101      	bne.n	800099a <HAL_GPIO_Init+0x192>
 8000996:	2303      	movs	r3, #3
 8000998:	e006      	b.n	80009a8 <HAL_GPIO_Init+0x1a0>
 800099a:	2304      	movs	r3, #4
 800099c:	e004      	b.n	80009a8 <HAL_GPIO_Init+0x1a0>
 800099e:	2302      	movs	r3, #2
 80009a0:	e002      	b.n	80009a8 <HAL_GPIO_Init+0x1a0>
 80009a2:	2301      	movs	r3, #1
 80009a4:	e000      	b.n	80009a8 <HAL_GPIO_Init+0x1a0>
 80009a6:	2300      	movs	r3, #0
 80009a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009aa:	f002 0203 	and.w	r2, r2, #3
 80009ae:	0092      	lsls	r2, r2, #2
 80009b0:	4093      	lsls	r3, r2
 80009b2:	68fa      	ldr	r2, [r7, #12]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80009b8:	493a      	ldr	r1, [pc, #232]	; (8000aa4 <HAL_GPIO_Init+0x29c>)
 80009ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009bc:	089b      	lsrs	r3, r3, #2
 80009be:	3302      	adds	r3, #2
 80009c0:	68fa      	ldr	r2, [r7, #12]
 80009c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d006      	beq.n	80009e0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80009d2:	4b39      	ldr	r3, [pc, #228]	; (8000ab8 <HAL_GPIO_Init+0x2b0>)
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	4938      	ldr	r1, [pc, #224]	; (8000ab8 <HAL_GPIO_Init+0x2b0>)
 80009d8:	69bb      	ldr	r3, [r7, #24]
 80009da:	4313      	orrs	r3, r2
 80009dc:	600b      	str	r3, [r1, #0]
 80009de:	e006      	b.n	80009ee <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80009e0:	4b35      	ldr	r3, [pc, #212]	; (8000ab8 <HAL_GPIO_Init+0x2b0>)
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	69bb      	ldr	r3, [r7, #24]
 80009e6:	43db      	mvns	r3, r3
 80009e8:	4933      	ldr	r1, [pc, #204]	; (8000ab8 <HAL_GPIO_Init+0x2b0>)
 80009ea:	4013      	ands	r3, r2
 80009ec:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d006      	beq.n	8000a08 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80009fa:	4b2f      	ldr	r3, [pc, #188]	; (8000ab8 <HAL_GPIO_Init+0x2b0>)
 80009fc:	685a      	ldr	r2, [r3, #4]
 80009fe:	492e      	ldr	r1, [pc, #184]	; (8000ab8 <HAL_GPIO_Init+0x2b0>)
 8000a00:	69bb      	ldr	r3, [r7, #24]
 8000a02:	4313      	orrs	r3, r2
 8000a04:	604b      	str	r3, [r1, #4]
 8000a06:	e006      	b.n	8000a16 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a08:	4b2b      	ldr	r3, [pc, #172]	; (8000ab8 <HAL_GPIO_Init+0x2b0>)
 8000a0a:	685a      	ldr	r2, [r3, #4]
 8000a0c:	69bb      	ldr	r3, [r7, #24]
 8000a0e:	43db      	mvns	r3, r3
 8000a10:	4929      	ldr	r1, [pc, #164]	; (8000ab8 <HAL_GPIO_Init+0x2b0>)
 8000a12:	4013      	ands	r3, r2
 8000a14:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d006      	beq.n	8000a30 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a22:	4b25      	ldr	r3, [pc, #148]	; (8000ab8 <HAL_GPIO_Init+0x2b0>)
 8000a24:	689a      	ldr	r2, [r3, #8]
 8000a26:	4924      	ldr	r1, [pc, #144]	; (8000ab8 <HAL_GPIO_Init+0x2b0>)
 8000a28:	69bb      	ldr	r3, [r7, #24]
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	608b      	str	r3, [r1, #8]
 8000a2e:	e006      	b.n	8000a3e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a30:	4b21      	ldr	r3, [pc, #132]	; (8000ab8 <HAL_GPIO_Init+0x2b0>)
 8000a32:	689a      	ldr	r2, [r3, #8]
 8000a34:	69bb      	ldr	r3, [r7, #24]
 8000a36:	43db      	mvns	r3, r3
 8000a38:	491f      	ldr	r1, [pc, #124]	; (8000ab8 <HAL_GPIO_Init+0x2b0>)
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d006      	beq.n	8000a58 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a4a:	4b1b      	ldr	r3, [pc, #108]	; (8000ab8 <HAL_GPIO_Init+0x2b0>)
 8000a4c:	68da      	ldr	r2, [r3, #12]
 8000a4e:	491a      	ldr	r1, [pc, #104]	; (8000ab8 <HAL_GPIO_Init+0x2b0>)
 8000a50:	69bb      	ldr	r3, [r7, #24]
 8000a52:	4313      	orrs	r3, r2
 8000a54:	60cb      	str	r3, [r1, #12]
 8000a56:	e006      	b.n	8000a66 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a58:	4b17      	ldr	r3, [pc, #92]	; (8000ab8 <HAL_GPIO_Init+0x2b0>)
 8000a5a:	68da      	ldr	r2, [r3, #12]
 8000a5c:	69bb      	ldr	r3, [r7, #24]
 8000a5e:	43db      	mvns	r3, r3
 8000a60:	4915      	ldr	r1, [pc, #84]	; (8000ab8 <HAL_GPIO_Init+0x2b0>)
 8000a62:	4013      	ands	r3, r2
 8000a64:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a68:	3301      	adds	r3, #1
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a72:	fa22 f303 	lsr.w	r3, r2, r3
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	f47f aed0 	bne.w	800081c <HAL_GPIO_Init+0x14>
  }
}
 8000a7c:	bf00      	nop
 8000a7e:	372c      	adds	r7, #44	; 0x2c
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bc80      	pop	{r7}
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	10210000 	.word	0x10210000
 8000a8c:	10110000 	.word	0x10110000
 8000a90:	10120000 	.word	0x10120000
 8000a94:	10310000 	.word	0x10310000
 8000a98:	10320000 	.word	0x10320000
 8000a9c:	10220000 	.word	0x10220000
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	40010000 	.word	0x40010000
 8000aa8:	40010800 	.word	0x40010800
 8000aac:	40010c00 	.word	0x40010c00
 8000ab0:	40011000 	.word	0x40011000
 8000ab4:	40011400 	.word	0x40011400
 8000ab8:	40010400 	.word	0x40010400

08000abc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	460b      	mov	r3, r1
 8000ac6:	807b      	strh	r3, [r7, #2]
 8000ac8:	4613      	mov	r3, r2
 8000aca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000acc:	787b      	ldrb	r3, [r7, #1]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d003      	beq.n	8000ada <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ad2:	887a      	ldrh	r2, [r7, #2]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ad8:	e003      	b.n	8000ae2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ada:	887b      	ldrh	r3, [r7, #2]
 8000adc:	041a      	lsls	r2, r3, #16
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	611a      	str	r2, [r3, #16]
}
 8000ae2:	bf00      	nop
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr

08000aec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aee:	b08b      	sub	sp, #44	; 0x2c
 8000af0:	af06      	add	r7, sp, #24
 8000af2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d101      	bne.n	8000afe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
 8000afc:	e0d3      	b.n	8000ca6 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d106      	bne.n	8000b18 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	f007 f97c 	bl	8007e10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2203      	movs	r2, #3
 8000b1c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4618      	mov	r0, r3
 8000b26:	f001 fdbc 	bl	80026a2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	603b      	str	r3, [r7, #0]
 8000b30:	687e      	ldr	r6, [r7, #4]
 8000b32:	466d      	mov	r5, sp
 8000b34:	f106 0410 	add.w	r4, r6, #16
 8000b38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b3c:	6823      	ldr	r3, [r4, #0]
 8000b3e:	602b      	str	r3, [r5, #0]
 8000b40:	1d33      	adds	r3, r6, #4
 8000b42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b44:	6838      	ldr	r0, [r7, #0]
 8000b46:	f001 fd85 	bl	8002654 <USB_CoreInit>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d005      	beq.n	8000b5c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2202      	movs	r2, #2
 8000b54:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	e0a4      	b.n	8000ca6 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2100      	movs	r1, #0
 8000b62:	4618      	mov	r0, r3
 8000b64:	f001 fdb9 	bl	80026da <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b68:	2300      	movs	r3, #0
 8000b6a:	73fb      	strb	r3, [r7, #15]
 8000b6c:	e035      	b.n	8000bda <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000b6e:	7bfb      	ldrb	r3, [r7, #15]
 8000b70:	687a      	ldr	r2, [r7, #4]
 8000b72:	015b      	lsls	r3, r3, #5
 8000b74:	4413      	add	r3, r2
 8000b76:	3329      	adds	r3, #41	; 0x29
 8000b78:	2201      	movs	r2, #1
 8000b7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000b7c:	7bfb      	ldrb	r3, [r7, #15]
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	015b      	lsls	r3, r3, #5
 8000b82:	4413      	add	r3, r2
 8000b84:	3328      	adds	r3, #40	; 0x28
 8000b86:	7bfa      	ldrb	r2, [r7, #15]
 8000b88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000b8a:	7bfb      	ldrb	r3, [r7, #15]
 8000b8c:	7bfa      	ldrb	r2, [r7, #15]
 8000b8e:	b291      	uxth	r1, r2
 8000b90:	687a      	ldr	r2, [r7, #4]
 8000b92:	015b      	lsls	r3, r3, #5
 8000b94:	4413      	add	r3, r2
 8000b96:	3336      	adds	r3, #54	; 0x36
 8000b98:	460a      	mov	r2, r1
 8000b9a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000b9c:	7bfb      	ldrb	r3, [r7, #15]
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	015b      	lsls	r3, r3, #5
 8000ba2:	4413      	add	r3, r2
 8000ba4:	332b      	adds	r3, #43	; 0x2b
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000baa:	7bfb      	ldrb	r3, [r7, #15]
 8000bac:	687a      	ldr	r2, [r7, #4]
 8000bae:	015b      	lsls	r3, r3, #5
 8000bb0:	4413      	add	r3, r2
 8000bb2:	3338      	adds	r3, #56	; 0x38
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]
 8000bba:	687a      	ldr	r2, [r7, #4]
 8000bbc:	015b      	lsls	r3, r3, #5
 8000bbe:	4413      	add	r3, r2
 8000bc0:	333c      	adds	r3, #60	; 0x3c
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000bc6:	7bfb      	ldrb	r3, [r7, #15]
 8000bc8:	687a      	ldr	r2, [r7, #4]
 8000bca:	3302      	adds	r3, #2
 8000bcc:	015b      	lsls	r3, r3, #5
 8000bce:	4413      	add	r3, r2
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000bd4:	7bfb      	ldrb	r3, [r7, #15]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	73fb      	strb	r3, [r7, #15]
 8000bda:	7bfa      	ldrb	r2, [r7, #15]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d3c4      	bcc.n	8000b6e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000be4:	2300      	movs	r3, #0
 8000be6:	73fb      	strb	r3, [r7, #15]
 8000be8:	e031      	b.n	8000c4e <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000bea:	7bfb      	ldrb	r3, [r7, #15]
 8000bec:	687a      	ldr	r2, [r7, #4]
 8000bee:	015b      	lsls	r3, r3, #5
 8000bf0:	4413      	add	r3, r2
 8000bf2:	f203 1329 	addw	r3, r3, #297	; 0x129
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000bfa:	7bfb      	ldrb	r3, [r7, #15]
 8000bfc:	687a      	ldr	r2, [r7, #4]
 8000bfe:	015b      	lsls	r3, r3, #5
 8000c00:	4413      	add	r3, r2
 8000c02:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000c06:	7bfa      	ldrb	r2, [r7, #15]
 8000c08:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000c0a:	7bfb      	ldrb	r3, [r7, #15]
 8000c0c:	687a      	ldr	r2, [r7, #4]
 8000c0e:	015b      	lsls	r3, r3, #5
 8000c10:	4413      	add	r3, r2
 8000c12:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8000c16:	2200      	movs	r2, #0
 8000c18:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000c1a:	7bfb      	ldrb	r3, [r7, #15]
 8000c1c:	687a      	ldr	r2, [r7, #4]
 8000c1e:	015b      	lsls	r3, r3, #5
 8000c20:	4413      	add	r3, r2
 8000c22:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000c2a:	7bfb      	ldrb	r3, [r7, #15]
 8000c2c:	687a      	ldr	r2, [r7, #4]
 8000c2e:	015b      	lsls	r3, r3, #5
 8000c30:	4413      	add	r3, r2
 8000c32:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000c3a:	7bfb      	ldrb	r3, [r7, #15]
 8000c3c:	687a      	ldr	r2, [r7, #4]
 8000c3e:	330a      	adds	r3, #10
 8000c40:	015b      	lsls	r3, r3, #5
 8000c42:	4413      	add	r3, r2
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c48:	7bfb      	ldrb	r3, [r7, #15]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	73fb      	strb	r3, [r7, #15]
 8000c4e:	7bfa      	ldrb	r2, [r7, #15]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d3c8      	bcc.n	8000bea <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	603b      	str	r3, [r7, #0]
 8000c5e:	687e      	ldr	r6, [r7, #4]
 8000c60:	466d      	mov	r5, sp
 8000c62:	f106 0410 	add.w	r4, r6, #16
 8000c66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c6a:	6823      	ldr	r3, [r4, #0]
 8000c6c:	602b      	str	r3, [r5, #0]
 8000c6e:	1d33      	adds	r3, r6, #4
 8000c70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c72:	6838      	ldr	r0, [r7, #0]
 8000c74:	f001 fd3d 	bl	80026f2 <USB_DevInit>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d005      	beq.n	8000c8a <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2202      	movs	r2, #2
 8000c82:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	e00d      	b.n	8000ca6 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2201      	movs	r2, #1
 8000c96:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f002 fd7b 	bl	800379a <USB_DevDisconnect>

  return HAL_OK;
 8000ca4:	2300      	movs	r3, #0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3714      	adds	r7, #20
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000cae <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b082      	sub	sp, #8
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d101      	bne.n	8000cc4 <HAL_PCD_Start+0x16>
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	e016      	b.n	8000cf2 <HAL_PCD_Start+0x44>
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000ccc:	2101      	movs	r1, #1
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f007 fada 	bl	8008288 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f002 fd54 	bl	8003786 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f001 fcc6 	bl	8002674 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2200      	movs	r2, #0
 8000cec:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b082      	sub	sp, #8
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4618      	mov	r0, r3
 8000d08:	f002 fd51 	bl	80037ae <USB_ReadInterrupts>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000d16:	d102      	bne.n	8000d1e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000d18:	6878      	ldr	r0, [r7, #4]
 8000d1a:	f000 fadf 	bl	80012dc <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f002 fd43 	bl	80037ae <USB_ReadInterrupts>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d32:	d112      	bne.n	8000d5a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000d3c:	b29a      	uxth	r2, r3
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d46:	b292      	uxth	r2, r2
 8000d48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f007 f8d4 	bl	8007efa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000d52:	2100      	movs	r1, #0
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f000 f8de 	bl	8000f16 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f002 fd25 	bl	80037ae <USB_ReadInterrupts>
 8000d64:	4603      	mov	r3, r0
 8000d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000d6e:	d10b      	bne.n	8000d88 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000d78:	b29a      	uxth	r2, r3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000d82:	b292      	uxth	r2, r2
 8000d84:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f002 fd0e 	bl	80037ae <USB_ReadInterrupts>
 8000d92:	4603      	mov	r3, r0
 8000d94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d9c:	d10b      	bne.n	8000db6 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000db0:	b292      	uxth	r2, r2
 8000db2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f002 fcf7 	bl	80037ae <USB_ReadInterrupts>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000dca:	d126      	bne.n	8000e1a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000dd4:	b29a      	uxth	r2, r3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f022 0204 	bic.w	r2, r2, #4
 8000dde:	b292      	uxth	r2, r2
 8000de0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000dec:	b29a      	uxth	r2, r3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f022 0208 	bic.w	r2, r2, #8
 8000df6:	b292      	uxth	r2, r2
 8000df8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f007 f8b5 	bl	8007f6c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e0a:	b29a      	uxth	r2, r3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000e14:	b292      	uxth	r2, r2
 8000e16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f002 fcc5 	bl	80037ae <USB_ReadInterrupts>
 8000e24:	4603      	mov	r3, r0
 8000e26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000e2e:	d13d      	bne.n	8000eac <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000e38:	b29a      	uxth	r2, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f042 0208 	orr.w	r2, r2, #8
 8000e42:	b292      	uxth	r2, r2
 8000e44:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e50:	b29a      	uxth	r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e5a:	b292      	uxth	r2, r2
 8000e5c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000e68:	b29a      	uxth	r2, r3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f042 0204 	orr.w	r2, r2, #4
 8000e72:	b292      	uxth	r2, r2
 8000e74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f002 fc96 	bl	80037ae <USB_ReadInterrupts>
 8000e82:	4603      	mov	r3, r0
 8000e84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e8c:	d10b      	bne.n	8000ea6 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e96:	b29a      	uxth	r2, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000ea0:	b292      	uxth	r2, r2
 8000ea2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f007 f846 	bl	8007f38 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f002 fc7c 	bl	80037ae <USB_ReadInterrupts>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ebc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ec0:	d10e      	bne.n	8000ee0 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000eca:	b29a      	uxth	r2, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000ed4:	b292      	uxth	r2, r2
 8000ed6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f006 ffff 	bl	8007ede <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f002 fc62 	bl	80037ae <USB_ReadInterrupts>
 8000eea:	4603      	mov	r3, r0
 8000eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ef0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ef4:	d10b      	bne.n	8000f0e <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000efe:	b29a      	uxth	r2, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f08:	b292      	uxth	r2, r2
 8000f0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
 8000f1e:	460b      	mov	r3, r1
 8000f20:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d101      	bne.n	8000f30 <HAL_PCD_SetAddress+0x1a>
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	e013      	b.n	8000f58 <HAL_PCD_SetAddress+0x42>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2201      	movs	r2, #1
 8000f34:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	78fa      	ldrb	r2, [r7, #3]
 8000f3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	78fa      	ldrb	r2, [r7, #3]
 8000f46:	4611      	mov	r1, r2
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f002 fc09 	bl	8003760 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2200      	movs	r2, #0
 8000f52:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8000f56:	2300      	movs	r3, #0
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	4608      	mov	r0, r1
 8000f6a:	4611      	mov	r1, r2
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4603      	mov	r3, r0
 8000f70:	70fb      	strb	r3, [r7, #3]
 8000f72:	460b      	mov	r3, r1
 8000f74:	803b      	strh	r3, [r7, #0]
 8000f76:	4613      	mov	r3, r2
 8000f78:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000f7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	da0b      	bge.n	8000f9e <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000f86:	78fb      	ldrb	r3, [r7, #3]
 8000f88:	f003 0307 	and.w	r3, r3, #7
 8000f8c:	015b      	lsls	r3, r3, #5
 8000f8e:	3328      	adds	r3, #40	; 0x28
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	4413      	add	r3, r2
 8000f94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	2201      	movs	r2, #1
 8000f9a:	705a      	strb	r2, [r3, #1]
 8000f9c:	e00b      	b.n	8000fb6 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000f9e:	78fb      	ldrb	r3, [r7, #3]
 8000fa0:	f003 0307 	and.w	r3, r3, #7
 8000fa4:	015b      	lsls	r3, r3, #5
 8000fa6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	4413      	add	r3, r2
 8000fae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000fb6:	78fb      	ldrb	r3, [r7, #3]
 8000fb8:	f003 0307 	and.w	r3, r3, #7
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000fc2:	883a      	ldrh	r2, [r7, #0]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	78ba      	ldrb	r2, [r7, #2]
 8000fcc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	785b      	ldrb	r3, [r3, #1]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d004      	beq.n	8000fe0 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	b29a      	uxth	r2, r3
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000fe0:	78bb      	ldrb	r3, [r7, #2]
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d102      	bne.n	8000fec <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d101      	bne.n	8000ffa <HAL_PCD_EP_Open+0x9a>
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	e00e      	b.n	8001018 <HAL_PCD_EP_Open+0xb8>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	68f9      	ldr	r1, [r7, #12]
 8001008:	4618      	mov	r0, r3
 800100a:	f001 fb97 	bl	800273c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2200      	movs	r2, #0
 8001012:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8001016:	7afb      	ldrb	r3, [r7, #11]
}
 8001018:	4618      	mov	r0, r3
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	460b      	mov	r3, r1
 800102a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800102c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001030:	2b00      	cmp	r3, #0
 8001032:	da0b      	bge.n	800104c <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001034:	78fb      	ldrb	r3, [r7, #3]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	015b      	lsls	r3, r3, #5
 800103c:	3328      	adds	r3, #40	; 0x28
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	4413      	add	r3, r2
 8001042:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2201      	movs	r2, #1
 8001048:	705a      	strb	r2, [r3, #1]
 800104a:	e00b      	b.n	8001064 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800104c:	78fb      	ldrb	r3, [r7, #3]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	015b      	lsls	r3, r3, #5
 8001054:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	4413      	add	r3, r2
 800105c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	2200      	movs	r2, #0
 8001062:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001064:	78fb      	ldrb	r3, [r7, #3]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	b2da      	uxtb	r2, r3
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001076:	2b01      	cmp	r3, #1
 8001078:	d101      	bne.n	800107e <HAL_PCD_EP_Close+0x5e>
 800107a:	2302      	movs	r3, #2
 800107c:	e00e      	b.n	800109c <HAL_PCD_EP_Close+0x7c>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2201      	movs	r2, #1
 8001082:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	68f9      	ldr	r1, [r7, #12]
 800108c:	4618      	mov	r0, r3
 800108e:	f001 fe43 	bl	8002d18 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800109a:	2300      	movs	r3, #0
}
 800109c:	4618      	mov	r0, r3
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	607a      	str	r2, [r7, #4]
 80010ae:	603b      	str	r3, [r7, #0]
 80010b0:	460b      	mov	r3, r1
 80010b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80010b4:	7afb      	ldrb	r3, [r7, #11]
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	015b      	lsls	r3, r3, #5
 80010bc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80010c0:	68fa      	ldr	r2, [r7, #12]
 80010c2:	4413      	add	r3, r2
 80010c4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	683a      	ldr	r2, [r7, #0]
 80010d0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	2200      	movs	r2, #0
 80010d6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	2200      	movs	r2, #0
 80010dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80010de:	7afb      	ldrb	r3, [r7, #11]
 80010e0:	f003 0307 	and.w	r3, r3, #7
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80010ea:	7afb      	ldrb	r3, [r7, #11]
 80010ec:	f003 0307 	and.w	r3, r3, #7
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d106      	bne.n	8001102 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	6979      	ldr	r1, [r7, #20]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f001 ffa2 	bl	8003044 <USB_EPStartXfer>
 8001100:	e005      	b.n	800110e <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	6979      	ldr	r1, [r7, #20]
 8001108:	4618      	mov	r0, r3
 800110a:	f001 ff9b 	bl	8003044 <USB_EPStartXfer>
  }

  return HAL_OK;
 800110e:	2300      	movs	r3, #0
}
 8001110:	4618      	mov	r0, r3
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	607a      	str	r2, [r7, #4]
 8001122:	603b      	str	r3, [r7, #0]
 8001124:	460b      	mov	r3, r1
 8001126:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001128:	7afb      	ldrb	r3, [r7, #11]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	015b      	lsls	r3, r3, #5
 8001130:	3328      	adds	r3, #40	; 0x28
 8001132:	68fa      	ldr	r2, [r7, #12]
 8001134:	4413      	add	r3, r2
 8001136:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	683a      	ldr	r2, [r7, #0]
 8001142:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	2200      	movs	r2, #0
 8001148:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	2201      	movs	r2, #1
 800114e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001150:	7afb      	ldrb	r3, [r7, #11]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	b2da      	uxtb	r2, r3
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800115c:	7afb      	ldrb	r3, [r7, #11]
 800115e:	f003 0307 	and.w	r3, r3, #7
 8001162:	2b00      	cmp	r3, #0
 8001164:	d106      	bne.n	8001174 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	6979      	ldr	r1, [r7, #20]
 800116c:	4618      	mov	r0, r3
 800116e:	f001 ff69 	bl	8003044 <USB_EPStartXfer>
 8001172:	e005      	b.n	8001180 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	6979      	ldr	r1, [r7, #20]
 800117a:	4618      	mov	r0, r3
 800117c:	f001 ff62 	bl	8003044 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3718      	adds	r7, #24
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b084      	sub	sp, #16
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
 8001192:	460b      	mov	r3, r1
 8001194:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001196:	78fb      	ldrb	r3, [r7, #3]
 8001198:	f003 0207 	and.w	r2, r3, #7
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d901      	bls.n	80011a8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e046      	b.n	8001236 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80011a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	da0b      	bge.n	80011c8 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80011b0:	78fb      	ldrb	r3, [r7, #3]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	015b      	lsls	r3, r3, #5
 80011b8:	3328      	adds	r3, #40	; 0x28
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	4413      	add	r3, r2
 80011be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	2201      	movs	r2, #1
 80011c4:	705a      	strb	r2, [r3, #1]
 80011c6:	e009      	b.n	80011dc <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80011c8:	78fb      	ldrb	r3, [r7, #3]
 80011ca:	015b      	lsls	r3, r3, #5
 80011cc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	4413      	add	r3, r2
 80011d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	2200      	movs	r2, #0
 80011da:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	2201      	movs	r2, #1
 80011e0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80011e2:	78fb      	ldrb	r3, [r7, #3]
 80011e4:	f003 0307 	and.w	r3, r3, #7
 80011e8:	b2da      	uxtb	r2, r3
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d101      	bne.n	80011fc <HAL_PCD_EP_SetStall+0x72>
 80011f8:	2302      	movs	r3, #2
 80011fa:	e01c      	b.n	8001236 <HAL_PCD_EP_SetStall+0xac>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2201      	movs	r2, #1
 8001200:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	68f9      	ldr	r1, [r7, #12]
 800120a:	4618      	mov	r0, r3
 800120c:	f002 f9d2 	bl	80035b4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001210:	78fb      	ldrb	r3, [r7, #3]
 8001212:	f003 0307 	and.w	r3, r3, #7
 8001216:	2b00      	cmp	r3, #0
 8001218:	d108      	bne.n	800122c <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8001224:	4619      	mov	r1, r3
 8001226:	4610      	mov	r0, r2
 8001228:	f002 fad0 	bl	80037cc <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b084      	sub	sp, #16
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
 8001246:	460b      	mov	r3, r1
 8001248:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800124a:	78fb      	ldrb	r3, [r7, #3]
 800124c:	f003 020f 	and.w	r2, r3, #15
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	429a      	cmp	r2, r3
 8001256:	d901      	bls.n	800125c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e03a      	b.n	80012d2 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800125c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001260:	2b00      	cmp	r3, #0
 8001262:	da0b      	bge.n	800127c <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001264:	78fb      	ldrb	r3, [r7, #3]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	015b      	lsls	r3, r3, #5
 800126c:	3328      	adds	r3, #40	; 0x28
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	4413      	add	r3, r2
 8001272:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2201      	movs	r2, #1
 8001278:	705a      	strb	r2, [r3, #1]
 800127a:	e00b      	b.n	8001294 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800127c:	78fb      	ldrb	r3, [r7, #3]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	015b      	lsls	r3, r3, #5
 8001284:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	4413      	add	r3, r2
 800128c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	2200      	movs	r2, #0
 8001292:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	2200      	movs	r2, #0
 8001298:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800129a:	78fb      	ldrb	r3, [r7, #3]
 800129c:	f003 0307 	and.w	r3, r3, #7
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d101      	bne.n	80012b4 <HAL_PCD_EP_ClrStall+0x76>
 80012b0:	2302      	movs	r3, #2
 80012b2:	e00e      	b.n	80012d2 <HAL_PCD_EP_ClrStall+0x94>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2201      	movs	r2, #1
 80012b8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	68f9      	ldr	r1, [r7, #12]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f002 f9b8 	bl	8003638 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2200      	movs	r2, #0
 80012cc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
	...

080012dc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80012dc:	b590      	push	{r4, r7, lr}
 80012de:	b089      	sub	sp, #36	; 0x24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80012e4:	e282      	b.n	80017ec <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012ee:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80012f0:	8afb      	ldrh	r3, [r7, #22]
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	f003 030f 	and.w	r3, r3, #15
 80012f8:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 80012fa:	7d7b      	ldrb	r3, [r7, #21]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	f040 8142 	bne.w	8001586 <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001302:	8afb      	ldrh	r3, [r7, #22]
 8001304:	f003 0310 	and.w	r3, r3, #16
 8001308:	2b00      	cmp	r3, #0
 800130a:	d151      	bne.n	80013b0 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	881b      	ldrh	r3, [r3, #0]
 8001312:	b29b      	uxth	r3, r3
 8001314:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001318:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800131c:	b29c      	uxth	r4, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001326:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800132a:	b29b      	uxth	r3, r3
 800132c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	3328      	adds	r3, #40	; 0x28
 8001332:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800133c:	b29b      	uxth	r3, r3
 800133e:	461a      	mov	r2, r3
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	4413      	add	r3, r2
 8001348:	3302      	adds	r3, #2
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	6812      	ldr	r2, [r2, #0]
 8001350:	4413      	add	r3, r2
 8001352:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001356:	881b      	ldrh	r3, [r3, #0]
 8001358:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	695a      	ldr	r2, [r3, #20]
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	69db      	ldr	r3, [r3, #28]
 8001368:	441a      	add	r2, r3
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800136e:	2100      	movs	r1, #0
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f006 fd9d 	bl	8007eb0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	f000 8234 	beq.w	80017ec <PCD_EP_ISR_Handler+0x510>
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	2b00      	cmp	r3, #0
 800138a:	f040 822f 	bne.w	80017ec <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001394:	b2db      	uxtb	r3, r3
 8001396:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800139a:	b2da      	uxtb	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	b292      	uxth	r2, r2
 80013a2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2200      	movs	r2, #0
 80013aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80013ae:	e21d      	b.n	80017ec <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80013b6:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	881b      	ldrh	r3, [r3, #0]
 80013be:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80013c0:	8a7b      	ldrh	r3, [r7, #18]
 80013c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d033      	beq.n	8001432 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	461a      	mov	r2, r3
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	4413      	add	r3, r2
 80013de:	3306      	adds	r3, #6
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	6812      	ldr	r2, [r2, #0]
 80013e6:	4413      	add	r3, r2
 80013e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80013ec:	881b      	ldrh	r3, [r3, #0]
 80013ee:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6818      	ldr	r0, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001408:	b29b      	uxth	r3, r3
 800140a:	f002 fa2e 	bl	800386a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	881b      	ldrh	r3, [r3, #0]
 8001414:	b29a      	uxth	r2, r3
 8001416:	f640 738f 	movw	r3, #3983	; 0xf8f
 800141a:	4013      	ands	r3, r2
 800141c:	b29c      	uxth	r4, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001426:	b292      	uxth	r2, r2
 8001428:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f006 fd16 	bl	8007e5c <HAL_PCD_SetupStageCallback>
 8001430:	e1dc      	b.n	80017ec <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001432:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001436:	2b00      	cmp	r3, #0
 8001438:	f280 81d8 	bge.w	80017ec <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	881b      	ldrh	r3, [r3, #0]
 8001442:	b29a      	uxth	r2, r3
 8001444:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001448:	4013      	ands	r3, r2
 800144a:	b29c      	uxth	r4, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001454:	b292      	uxth	r2, r2
 8001456:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001460:	b29b      	uxth	r3, r3
 8001462:	461a      	mov	r2, r3
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	00db      	lsls	r3, r3, #3
 800146a:	4413      	add	r3, r2
 800146c:	3306      	adds	r3, #6
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	6812      	ldr	r2, [r2, #0]
 8001474:	4413      	add	r3, r2
 8001476:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800147a:	881b      	ldrh	r3, [r3, #0]
 800147c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	69db      	ldr	r3, [r3, #28]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d019      	beq.n	80014c0 <PCD_EP_ISR_Handler+0x1e4>
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	695b      	ldr	r3, [r3, #20]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d015      	beq.n	80014c0 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6818      	ldr	r0, [r3, #0]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	6959      	ldr	r1, [r3, #20]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	f002 f9e0 	bl	800386a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	695a      	ldr	r2, [r3, #20]
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	69db      	ldr	r3, [r3, #28]
 80014b2:	441a      	add	r2, r3
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80014b8:	2100      	movs	r1, #0
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f006 fce0 	bl	8007e80 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	461c      	mov	r4, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	441c      	add	r4, r3
 80014d2:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 80014d6:	461c      	mov	r4, r3
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	691b      	ldr	r3, [r3, #16]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d10e      	bne.n	80014fe <PCD_EP_ISR_Handler+0x222>
 80014e0:	8823      	ldrh	r3, [r4, #0]
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	8023      	strh	r3, [r4, #0]
 80014ec:	8823      	ldrh	r3, [r4, #0]
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80014f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	8023      	strh	r3, [r4, #0]
 80014fc:	e02d      	b.n	800155a <PCD_EP_ISR_Handler+0x27e>
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	691b      	ldr	r3, [r3, #16]
 8001502:	2b3e      	cmp	r3, #62	; 0x3e
 8001504:	d812      	bhi.n	800152c <PCD_EP_ISR_Handler+0x250>
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	691b      	ldr	r3, [r3, #16]
 800150a:	085b      	lsrs	r3, r3, #1
 800150c:	61bb      	str	r3, [r7, #24]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	2b00      	cmp	r3, #0
 8001518:	d002      	beq.n	8001520 <PCD_EP_ISR_Handler+0x244>
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	3301      	adds	r3, #1
 800151e:	61bb      	str	r3, [r7, #24]
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	b29b      	uxth	r3, r3
 8001524:	029b      	lsls	r3, r3, #10
 8001526:	b29b      	uxth	r3, r3
 8001528:	8023      	strh	r3, [r4, #0]
 800152a:	e016      	b.n	800155a <PCD_EP_ISR_Handler+0x27e>
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	691b      	ldr	r3, [r3, #16]
 8001530:	095b      	lsrs	r3, r3, #5
 8001532:	61bb      	str	r3, [r7, #24]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	691b      	ldr	r3, [r3, #16]
 8001538:	f003 031f 	and.w	r3, r3, #31
 800153c:	2b00      	cmp	r3, #0
 800153e:	d102      	bne.n	8001546 <PCD_EP_ISR_Handler+0x26a>
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	3b01      	subs	r3, #1
 8001544:	61bb      	str	r3, [r7, #24]
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	b29b      	uxth	r3, r3
 800154a:	029b      	lsls	r3, r3, #10
 800154c:	b29b      	uxth	r3, r3
 800154e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001552:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001556:	b29b      	uxth	r3, r3
 8001558:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	881b      	ldrh	r3, [r3, #0]
 8001560:	b29b      	uxth	r3, r3
 8001562:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800156a:	b29c      	uxth	r4, r3
 800156c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8001570:	b29c      	uxth	r4, r3
 8001572:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8001576:	b29c      	uxth	r4, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	4ba2      	ldr	r3, [pc, #648]	; (8001808 <PCD_EP_ISR_Handler+0x52c>)
 800157e:	4323      	orrs	r3, r4
 8001580:	b29b      	uxth	r3, r3
 8001582:	8013      	strh	r3, [r2, #0]
 8001584:	e132      	b.n	80017ec <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	461a      	mov	r2, r3
 800158c:	7d7b      	ldrb	r3, [r7, #21]
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	4413      	add	r3, r2
 8001592:	881b      	ldrh	r3, [r3, #0]
 8001594:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001596:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800159a:	2b00      	cmp	r3, #0
 800159c:	f280 80d1 	bge.w	8001742 <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	461a      	mov	r2, r3
 80015a6:	7d7b      	ldrb	r3, [r7, #21]
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	4413      	add	r3, r2
 80015ac:	881b      	ldrh	r3, [r3, #0]
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80015b4:	4013      	ands	r3, r2
 80015b6:	b29c      	uxth	r4, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	461a      	mov	r2, r3
 80015be:	7d7b      	ldrb	r3, [r7, #21]
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	4413      	add	r3, r2
 80015c4:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80015c8:	b292      	uxth	r2, r2
 80015ca:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80015cc:	7d7b      	ldrb	r3, [r7, #21]
 80015ce:	015b      	lsls	r3, r3, #5
 80015d0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	4413      	add	r3, r2
 80015d8:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	7b1b      	ldrb	r3, [r3, #12]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d121      	bne.n	8001626 <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	461a      	mov	r2, r3
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	4413      	add	r3, r2
 80015f6:	3306      	adds	r3, #6
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	6812      	ldr	r2, [r2, #0]
 80015fe:	4413      	add	r3, r2
 8001600:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001604:	881b      	ldrh	r3, [r3, #0]
 8001606:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800160a:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 800160c:	8bfb      	ldrh	r3, [r7, #30]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d072      	beq.n	80016f8 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6818      	ldr	r0, [r3, #0]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	6959      	ldr	r1, [r3, #20]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	88da      	ldrh	r2, [r3, #6]
 800161e:	8bfb      	ldrh	r3, [r7, #30]
 8001620:	f002 f923 	bl	800386a <USB_ReadPMA>
 8001624:	e068      	b.n	80016f8 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	461a      	mov	r2, r3
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	4413      	add	r3, r2
 8001634:	881b      	ldrh	r3, [r3, #0]
 8001636:	b29b      	uxth	r3, r3
 8001638:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d021      	beq.n	8001684 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001648:	b29b      	uxth	r3, r3
 800164a:	461a      	mov	r2, r3
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	00db      	lsls	r3, r3, #3
 8001652:	4413      	add	r3, r2
 8001654:	3302      	adds	r3, #2
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	6812      	ldr	r2, [r2, #0]
 800165c:	4413      	add	r3, r2
 800165e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001662:	881b      	ldrh	r3, [r3, #0]
 8001664:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001668:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800166a:	8bfb      	ldrh	r3, [r7, #30]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d02a      	beq.n	80016c6 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6818      	ldr	r0, [r3, #0]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	6959      	ldr	r1, [r3, #20]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	891a      	ldrh	r2, [r3, #8]
 800167c:	8bfb      	ldrh	r3, [r7, #30]
 800167e:	f002 f8f4 	bl	800386a <USB_ReadPMA>
 8001682:	e020      	b.n	80016c6 <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800168c:	b29b      	uxth	r3, r3
 800168e:	461a      	mov	r2, r3
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	00db      	lsls	r3, r3, #3
 8001696:	4413      	add	r3, r2
 8001698:	3306      	adds	r3, #6
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	6812      	ldr	r2, [r2, #0]
 80016a0:	4413      	add	r3, r2
 80016a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016a6:	881b      	ldrh	r3, [r3, #0]
 80016a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80016ac:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80016ae:	8bfb      	ldrh	r3, [r7, #30]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d008      	beq.n	80016c6 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6818      	ldr	r0, [r3, #0]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	6959      	ldr	r1, [r3, #20]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	895a      	ldrh	r2, [r3, #10]
 80016c0:	8bfb      	ldrh	r3, [r7, #30]
 80016c2:	f002 f8d2 	bl	800386a <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	461a      	mov	r2, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	4413      	add	r3, r2
 80016d4:	881b      	ldrh	r3, [r3, #0]
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80016dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016e0:	b29c      	uxth	r4, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	461a      	mov	r2, r3
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	441a      	add	r2, r3
 80016f0:	4b46      	ldr	r3, [pc, #280]	; (800180c <PCD_EP_ISR_Handler+0x530>)
 80016f2:	4323      	orrs	r3, r4
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	69da      	ldr	r2, [r3, #28]
 80016fc:	8bfb      	ldrh	r3, [r7, #30]
 80016fe:	441a      	add	r2, r3
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	695a      	ldr	r2, [r3, #20]
 8001708:	8bfb      	ldrh	r3, [r7, #30]
 800170a:	441a      	add	r2, r3
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d004      	beq.n	8001722 <PCD_EP_ISR_Handler+0x446>
 8001718:	8bfa      	ldrh	r2, [r7, #30]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	691b      	ldr	r3, [r3, #16]
 800171e:	429a      	cmp	r2, r3
 8001720:	d206      	bcs.n	8001730 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	4619      	mov	r1, r3
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f006 fba9 	bl	8007e80 <HAL_PCD_DataOutStageCallback>
 800172e:	e008      	b.n	8001742 <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	7819      	ldrb	r1, [r3, #0]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	695a      	ldr	r2, [r3, #20]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff fcb1 	bl	80010a4 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001742:	8a7b      	ldrh	r3, [r7, #18]
 8001744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001748:	2b00      	cmp	r3, #0
 800174a:	d04f      	beq.n	80017ec <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 800174c:	7d7b      	ldrb	r3, [r7, #21]
 800174e:	015b      	lsls	r3, r3, #5
 8001750:	3328      	adds	r3, #40	; 0x28
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	4413      	add	r3, r2
 8001756:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	461a      	mov	r2, r3
 800175e:	7d7b      	ldrb	r3, [r7, #21]
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	881b      	ldrh	r3, [r3, #0]
 8001766:	b29b      	uxth	r3, r3
 8001768:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800176c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001770:	b29c      	uxth	r4, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	461a      	mov	r2, r3
 8001778:	7d7b      	ldrb	r3, [r7, #21]
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	441a      	add	r2, r3
 800177e:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001782:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001786:	b29b      	uxth	r3, r3
 8001788:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001792:	b29b      	uxth	r3, r3
 8001794:	461a      	mov	r2, r3
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	00db      	lsls	r3, r3, #3
 800179c:	4413      	add	r3, r2
 800179e:	3302      	adds	r3, #2
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	6812      	ldr	r2, [r2, #0]
 80017a6:	4413      	add	r3, r2
 80017a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017ac:	881b      	ldrh	r3, [r3, #0]
 80017ae:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	695a      	ldr	r2, [r3, #20]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	441a      	add	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d106      	bne.n	80017da <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	4619      	mov	r1, r3
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f006 fb6c 	bl	8007eb0 <HAL_PCD_DataInStageCallback>
 80017d8:	e008      	b.n	80017ec <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	7819      	ldrb	r1, [r3, #0]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	695a      	ldr	r2, [r3, #20]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f7ff fc96 	bl	8001118 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	b21b      	sxth	r3, r3
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	f6ff ad74 	blt.w	80012e6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 80017fe:	2300      	movs	r3, #0
}
 8001800:	4618      	mov	r0, r3
 8001802:	3724      	adds	r7, #36	; 0x24
 8001804:	46bd      	mov	sp, r7
 8001806:	bd90      	pop	{r4, r7, pc}
 8001808:	ffff8080 	.word	0xffff8080
 800180c:	ffff80c0 	.word	0xffff80c0

08001810 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8001810:	b480      	push	{r7}
 8001812:	b087      	sub	sp, #28
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	607b      	str	r3, [r7, #4]
 800181a:	460b      	mov	r3, r1
 800181c:	817b      	strh	r3, [r7, #10]
 800181e:	4613      	mov	r3, r2
 8001820:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001822:	897b      	ldrh	r3, [r7, #10]
 8001824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001828:	b29b      	uxth	r3, r3
 800182a:	2b00      	cmp	r3, #0
 800182c:	d008      	beq.n	8001840 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800182e:	897b      	ldrh	r3, [r7, #10]
 8001830:	f003 0307 	and.w	r3, r3, #7
 8001834:	015b      	lsls	r3, r3, #5
 8001836:	3328      	adds	r3, #40	; 0x28
 8001838:	68fa      	ldr	r2, [r7, #12]
 800183a:	4413      	add	r3, r2
 800183c:	617b      	str	r3, [r7, #20]
 800183e:	e006      	b.n	800184e <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001840:	897b      	ldrh	r3, [r7, #10]
 8001842:	015b      	lsls	r3, r3, #5
 8001844:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001848:	68fa      	ldr	r2, [r7, #12]
 800184a:	4413      	add	r3, r2
 800184c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800184e:	893b      	ldrh	r3, [r7, #8]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d107      	bne.n	8001864 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	2200      	movs	r2, #0
 8001858:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	b29a      	uxth	r2, r3
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	80da      	strh	r2, [r3, #6]
 8001862:	e00b      	b.n	800187c <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	2201      	movs	r2, #1
 8001868:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	b29a      	uxth	r2, r3
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	0c1b      	lsrs	r3, r3, #16
 8001876:	b29a      	uxth	r2, r3
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	371c      	adds	r7, #28
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr

08001888 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d101      	bne.n	800189a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e26c      	b.n	8001d74 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f000 8087 	beq.w	80019b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018a8:	4b92      	ldr	r3, [pc, #584]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f003 030c 	and.w	r3, r3, #12
 80018b0:	2b04      	cmp	r3, #4
 80018b2:	d00c      	beq.n	80018ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018b4:	4b8f      	ldr	r3, [pc, #572]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f003 030c 	and.w	r3, r3, #12
 80018bc:	2b08      	cmp	r3, #8
 80018be:	d112      	bne.n	80018e6 <HAL_RCC_OscConfig+0x5e>
 80018c0:	4b8c      	ldr	r3, [pc, #560]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018cc:	d10b      	bne.n	80018e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ce:	4b89      	ldr	r3, [pc, #548]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d06c      	beq.n	80019b4 <HAL_RCC_OscConfig+0x12c>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d168      	bne.n	80019b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e246      	b.n	8001d74 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ee:	d106      	bne.n	80018fe <HAL_RCC_OscConfig+0x76>
 80018f0:	4b80      	ldr	r3, [pc, #512]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a7f      	ldr	r2, [pc, #508]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 80018f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018fa:	6013      	str	r3, [r2, #0]
 80018fc:	e02e      	b.n	800195c <HAL_RCC_OscConfig+0xd4>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d10c      	bne.n	8001920 <HAL_RCC_OscConfig+0x98>
 8001906:	4b7b      	ldr	r3, [pc, #492]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a7a      	ldr	r2, [pc, #488]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 800190c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	4b78      	ldr	r3, [pc, #480]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a77      	ldr	r2, [pc, #476]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 8001918:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800191c:	6013      	str	r3, [r2, #0]
 800191e:	e01d      	b.n	800195c <HAL_RCC_OscConfig+0xd4>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001928:	d10c      	bne.n	8001944 <HAL_RCC_OscConfig+0xbc>
 800192a:	4b72      	ldr	r3, [pc, #456]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a71      	ldr	r2, [pc, #452]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 8001930:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001934:	6013      	str	r3, [r2, #0]
 8001936:	4b6f      	ldr	r3, [pc, #444]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a6e      	ldr	r2, [pc, #440]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 800193c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001940:	6013      	str	r3, [r2, #0]
 8001942:	e00b      	b.n	800195c <HAL_RCC_OscConfig+0xd4>
 8001944:	4b6b      	ldr	r3, [pc, #428]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a6a      	ldr	r2, [pc, #424]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 800194a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800194e:	6013      	str	r3, [r2, #0]
 8001950:	4b68      	ldr	r3, [pc, #416]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a67      	ldr	r2, [pc, #412]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 8001956:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800195a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d013      	beq.n	800198c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001964:	f7fe fe44 	bl	80005f0 <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800196c:	f7fe fe40 	bl	80005f0 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b64      	cmp	r3, #100	; 0x64
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e1fa      	b.n	8001d74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800197e:	4b5d      	ldr	r3, [pc, #372]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d0f0      	beq.n	800196c <HAL_RCC_OscConfig+0xe4>
 800198a:	e014      	b.n	80019b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198c:	f7fe fe30 	bl	80005f0 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001994:	f7fe fe2c 	bl	80005f0 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b64      	cmp	r3, #100	; 0x64
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e1e6      	b.n	8001d74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019a6:	4b53      	ldr	r3, [pc, #332]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1f0      	bne.n	8001994 <HAL_RCC_OscConfig+0x10c>
 80019b2:	e000      	b.n	80019b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d063      	beq.n	8001a8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019c2:	4b4c      	ldr	r3, [pc, #304]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f003 030c 	and.w	r3, r3, #12
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d00b      	beq.n	80019e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019ce:	4b49      	ldr	r3, [pc, #292]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f003 030c 	and.w	r3, r3, #12
 80019d6:	2b08      	cmp	r3, #8
 80019d8:	d11c      	bne.n	8001a14 <HAL_RCC_OscConfig+0x18c>
 80019da:	4b46      	ldr	r3, [pc, #280]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d116      	bne.n	8001a14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019e6:	4b43      	ldr	r3, [pc, #268]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d005      	beq.n	80019fe <HAL_RCC_OscConfig+0x176>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	691b      	ldr	r3, [r3, #16]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d001      	beq.n	80019fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e1ba      	b.n	8001d74 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019fe:	4b3d      	ldr	r3, [pc, #244]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	4939      	ldr	r1, [pc, #228]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a12:	e03a      	b.n	8001a8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d020      	beq.n	8001a5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a1c:	4b36      	ldr	r3, [pc, #216]	; (8001af8 <HAL_RCC_OscConfig+0x270>)
 8001a1e:	2201      	movs	r2, #1
 8001a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a22:	f7fe fde5 	bl	80005f0 <HAL_GetTick>
 8001a26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a28:	e008      	b.n	8001a3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a2a:	f7fe fde1 	bl	80005f0 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e19b      	b.n	8001d74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a3c:	4b2d      	ldr	r3, [pc, #180]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d0f0      	beq.n	8001a2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a48:	4b2a      	ldr	r3, [pc, #168]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	695b      	ldr	r3, [r3, #20]
 8001a54:	00db      	lsls	r3, r3, #3
 8001a56:	4927      	ldr	r1, [pc, #156]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	600b      	str	r3, [r1, #0]
 8001a5c:	e015      	b.n	8001a8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a5e:	4b26      	ldr	r3, [pc, #152]	; (8001af8 <HAL_RCC_OscConfig+0x270>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a64:	f7fe fdc4 	bl	80005f0 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a6c:	f7fe fdc0 	bl	80005f0 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e17a      	b.n	8001d74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a7e:	4b1d      	ldr	r3, [pc, #116]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1f0      	bne.n	8001a6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0308 	and.w	r3, r3, #8
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d03a      	beq.n	8001b0c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d019      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a9e:	4b17      	ldr	r3, [pc, #92]	; (8001afc <HAL_RCC_OscConfig+0x274>)
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa4:	f7fe fda4 	bl	80005f0 <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aac:	f7fe fda0 	bl	80005f0 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e15a      	b.n	8001d74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001abe:	4b0d      	ldr	r3, [pc, #52]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 8001ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d0f0      	beq.n	8001aac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001aca:	2001      	movs	r0, #1
 8001acc:	f000 faf6 	bl	80020bc <RCC_Delay>
 8001ad0:	e01c      	b.n	8001b0c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ad2:	4b0a      	ldr	r3, [pc, #40]	; (8001afc <HAL_RCC_OscConfig+0x274>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ad8:	f7fe fd8a 	bl	80005f0 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ade:	e00f      	b.n	8001b00 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ae0:	f7fe fd86 	bl	80005f0 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d908      	bls.n	8001b00 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e140      	b.n	8001d74 <HAL_RCC_OscConfig+0x4ec>
 8001af2:	bf00      	nop
 8001af4:	40021000 	.word	0x40021000
 8001af8:	42420000 	.word	0x42420000
 8001afc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b00:	4b9e      	ldr	r3, [pc, #632]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1e9      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0304 	and.w	r3, r3, #4
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f000 80a6 	beq.w	8001c66 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b1e:	4b97      	ldr	r3, [pc, #604]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d10d      	bne.n	8001b46 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b2a:	4b94      	ldr	r3, [pc, #592]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	4a93      	ldr	r2, [pc, #588]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b34:	61d3      	str	r3, [r2, #28]
 8001b36:	4b91      	ldr	r3, [pc, #580]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3e:	60bb      	str	r3, [r7, #8]
 8001b40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b42:	2301      	movs	r3, #1
 8001b44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b46:	4b8e      	ldr	r3, [pc, #568]	; (8001d80 <HAL_RCC_OscConfig+0x4f8>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d118      	bne.n	8001b84 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b52:	4b8b      	ldr	r3, [pc, #556]	; (8001d80 <HAL_RCC_OscConfig+0x4f8>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a8a      	ldr	r2, [pc, #552]	; (8001d80 <HAL_RCC_OscConfig+0x4f8>)
 8001b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b5e:	f7fe fd47 	bl	80005f0 <HAL_GetTick>
 8001b62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b64:	e008      	b.n	8001b78 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b66:	f7fe fd43 	bl	80005f0 <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b64      	cmp	r3, #100	; 0x64
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e0fd      	b.n	8001d74 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b78:	4b81      	ldr	r3, [pc, #516]	; (8001d80 <HAL_RCC_OscConfig+0x4f8>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d0f0      	beq.n	8001b66 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d106      	bne.n	8001b9a <HAL_RCC_OscConfig+0x312>
 8001b8c:	4b7b      	ldr	r3, [pc, #492]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001b8e:	6a1b      	ldr	r3, [r3, #32]
 8001b90:	4a7a      	ldr	r2, [pc, #488]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001b92:	f043 0301 	orr.w	r3, r3, #1
 8001b96:	6213      	str	r3, [r2, #32]
 8001b98:	e02d      	b.n	8001bf6 <HAL_RCC_OscConfig+0x36e>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d10c      	bne.n	8001bbc <HAL_RCC_OscConfig+0x334>
 8001ba2:	4b76      	ldr	r3, [pc, #472]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001ba4:	6a1b      	ldr	r3, [r3, #32]
 8001ba6:	4a75      	ldr	r2, [pc, #468]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001ba8:	f023 0301 	bic.w	r3, r3, #1
 8001bac:	6213      	str	r3, [r2, #32]
 8001bae:	4b73      	ldr	r3, [pc, #460]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001bb0:	6a1b      	ldr	r3, [r3, #32]
 8001bb2:	4a72      	ldr	r2, [pc, #456]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001bb4:	f023 0304 	bic.w	r3, r3, #4
 8001bb8:	6213      	str	r3, [r2, #32]
 8001bba:	e01c      	b.n	8001bf6 <HAL_RCC_OscConfig+0x36e>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	2b05      	cmp	r3, #5
 8001bc2:	d10c      	bne.n	8001bde <HAL_RCC_OscConfig+0x356>
 8001bc4:	4b6d      	ldr	r3, [pc, #436]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001bc6:	6a1b      	ldr	r3, [r3, #32]
 8001bc8:	4a6c      	ldr	r2, [pc, #432]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001bca:	f043 0304 	orr.w	r3, r3, #4
 8001bce:	6213      	str	r3, [r2, #32]
 8001bd0:	4b6a      	ldr	r3, [pc, #424]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001bd2:	6a1b      	ldr	r3, [r3, #32]
 8001bd4:	4a69      	ldr	r2, [pc, #420]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001bd6:	f043 0301 	orr.w	r3, r3, #1
 8001bda:	6213      	str	r3, [r2, #32]
 8001bdc:	e00b      	b.n	8001bf6 <HAL_RCC_OscConfig+0x36e>
 8001bde:	4b67      	ldr	r3, [pc, #412]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001be0:	6a1b      	ldr	r3, [r3, #32]
 8001be2:	4a66      	ldr	r2, [pc, #408]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001be4:	f023 0301 	bic.w	r3, r3, #1
 8001be8:	6213      	str	r3, [r2, #32]
 8001bea:	4b64      	ldr	r3, [pc, #400]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001bec:	6a1b      	ldr	r3, [r3, #32]
 8001bee:	4a63      	ldr	r2, [pc, #396]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001bf0:	f023 0304 	bic.w	r3, r3, #4
 8001bf4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d015      	beq.n	8001c2a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bfe:	f7fe fcf7 	bl	80005f0 <HAL_GetTick>
 8001c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c04:	e00a      	b.n	8001c1c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c06:	f7fe fcf3 	bl	80005f0 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e0ab      	b.n	8001d74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c1c:	4b57      	ldr	r3, [pc, #348]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001c1e:	6a1b      	ldr	r3, [r3, #32]
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d0ee      	beq.n	8001c06 <HAL_RCC_OscConfig+0x37e>
 8001c28:	e014      	b.n	8001c54 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c2a:	f7fe fce1 	bl	80005f0 <HAL_GetTick>
 8001c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c30:	e00a      	b.n	8001c48 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c32:	f7fe fcdd 	bl	80005f0 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e095      	b.n	8001d74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c48:	4b4c      	ldr	r3, [pc, #304]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1ee      	bne.n	8001c32 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c54:	7dfb      	ldrb	r3, [r7, #23]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d105      	bne.n	8001c66 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c5a:	4b48      	ldr	r3, [pc, #288]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001c5c:	69db      	ldr	r3, [r3, #28]
 8001c5e:	4a47      	ldr	r2, [pc, #284]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001c60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c64:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	69db      	ldr	r3, [r3, #28]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f000 8081 	beq.w	8001d72 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c70:	4b42      	ldr	r3, [pc, #264]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f003 030c 	and.w	r3, r3, #12
 8001c78:	2b08      	cmp	r3, #8
 8001c7a:	d061      	beq.n	8001d40 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	69db      	ldr	r3, [r3, #28]
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d146      	bne.n	8001d12 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c84:	4b3f      	ldr	r3, [pc, #252]	; (8001d84 <HAL_RCC_OscConfig+0x4fc>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8a:	f7fe fcb1 	bl	80005f0 <HAL_GetTick>
 8001c8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c90:	e008      	b.n	8001ca4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c92:	f7fe fcad 	bl	80005f0 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e067      	b.n	8001d74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ca4:	4b35      	ldr	r3, [pc, #212]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1f0      	bne.n	8001c92 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a1b      	ldr	r3, [r3, #32]
 8001cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cb8:	d108      	bne.n	8001ccc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cba:	4b30      	ldr	r3, [pc, #192]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	492d      	ldr	r1, [pc, #180]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ccc:	4b2b      	ldr	r3, [pc, #172]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a19      	ldr	r1, [r3, #32]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cdc:	430b      	orrs	r3, r1
 8001cde:	4927      	ldr	r1, [pc, #156]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ce4:	4b27      	ldr	r3, [pc, #156]	; (8001d84 <HAL_RCC_OscConfig+0x4fc>)
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cea:	f7fe fc81 	bl	80005f0 <HAL_GetTick>
 8001cee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cf0:	e008      	b.n	8001d04 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf2:	f7fe fc7d 	bl	80005f0 <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e037      	b.n	8001d74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d04:	4b1d      	ldr	r3, [pc, #116]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d0f0      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x46a>
 8001d10:	e02f      	b.n	8001d72 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d12:	4b1c      	ldr	r3, [pc, #112]	; (8001d84 <HAL_RCC_OscConfig+0x4fc>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d18:	f7fe fc6a 	bl	80005f0 <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d20:	f7fe fc66 	bl	80005f0 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e020      	b.n	8001d74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d32:	4b12      	ldr	r3, [pc, #72]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1f0      	bne.n	8001d20 <HAL_RCC_OscConfig+0x498>
 8001d3e:	e018      	b.n	8001d72 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	69db      	ldr	r3, [r3, #28]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d101      	bne.n	8001d4c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e013      	b.n	8001d74 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d4c:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d106      	bne.n	8001d6e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d001      	beq.n	8001d72 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e000      	b.n	8001d74 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3718      	adds	r7, #24
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	40007000 	.word	0x40007000
 8001d84:	42420060 	.word	0x42420060

08001d88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e0d0      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d9c:	4b6a      	ldr	r3, [pc, #424]	; (8001f48 <HAL_RCC_ClockConfig+0x1c0>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0307 	and.w	r3, r3, #7
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d910      	bls.n	8001dcc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001daa:	4b67      	ldr	r3, [pc, #412]	; (8001f48 <HAL_RCC_ClockConfig+0x1c0>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f023 0207 	bic.w	r2, r3, #7
 8001db2:	4965      	ldr	r1, [pc, #404]	; (8001f48 <HAL_RCC_ClockConfig+0x1c0>)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dba:	4b63      	ldr	r3, [pc, #396]	; (8001f48 <HAL_RCC_ClockConfig+0x1c0>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d001      	beq.n	8001dcc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e0b8      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d020      	beq.n	8001e1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d005      	beq.n	8001df0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001de4:	4b59      	ldr	r3, [pc, #356]	; (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	4a58      	ldr	r2, [pc, #352]	; (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001dea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001dee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0308 	and.w	r3, r3, #8
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d005      	beq.n	8001e08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dfc:	4b53      	ldr	r3, [pc, #332]	; (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	4a52      	ldr	r2, [pc, #328]	; (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001e02:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e08:	4b50      	ldr	r3, [pc, #320]	; (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	494d      	ldr	r1, [pc, #308]	; (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001e16:	4313      	orrs	r3, r2
 8001e18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d040      	beq.n	8001ea8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d107      	bne.n	8001e3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e2e:	4b47      	ldr	r3, [pc, #284]	; (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d115      	bne.n	8001e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e07f      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d107      	bne.n	8001e56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e46:	4b41      	ldr	r3, [pc, #260]	; (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d109      	bne.n	8001e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e073      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e56:	4b3d      	ldr	r3, [pc, #244]	; (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e06b      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e66:	4b39      	ldr	r3, [pc, #228]	; (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f023 0203 	bic.w	r2, r3, #3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	4936      	ldr	r1, [pc, #216]	; (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e78:	f7fe fbba 	bl	80005f0 <HAL_GetTick>
 8001e7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e7e:	e00a      	b.n	8001e96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e80:	f7fe fbb6 	bl	80005f0 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e053      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e96:	4b2d      	ldr	r3, [pc, #180]	; (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f003 020c 	and.w	r2, r3, #12
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d1eb      	bne.n	8001e80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ea8:	4b27      	ldr	r3, [pc, #156]	; (8001f48 <HAL_RCC_ClockConfig+0x1c0>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d210      	bcs.n	8001ed8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eb6:	4b24      	ldr	r3, [pc, #144]	; (8001f48 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f023 0207 	bic.w	r2, r3, #7
 8001ebe:	4922      	ldr	r1, [pc, #136]	; (8001f48 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ec6:	4b20      	ldr	r3, [pc, #128]	; (8001f48 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d001      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e032      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0304 	and.w	r3, r3, #4
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d008      	beq.n	8001ef6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ee4:	4b19      	ldr	r3, [pc, #100]	; (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	4916      	ldr	r1, [pc, #88]	; (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0308 	and.w	r3, r3, #8
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d009      	beq.n	8001f16 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f02:	4b12      	ldr	r3, [pc, #72]	; (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	490e      	ldr	r1, [pc, #56]	; (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f16:	f000 f821 	bl	8001f5c <HAL_RCC_GetSysClockFreq>
 8001f1a:	4601      	mov	r1, r0
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	091b      	lsrs	r3, r3, #4
 8001f22:	f003 030f 	and.w	r3, r3, #15
 8001f26:	4a0a      	ldr	r2, [pc, #40]	; (8001f50 <HAL_RCC_ClockConfig+0x1c8>)
 8001f28:	5cd3      	ldrb	r3, [r2, r3]
 8001f2a:	fa21 f303 	lsr.w	r3, r1, r3
 8001f2e:	4a09      	ldr	r2, [pc, #36]	; (8001f54 <HAL_RCC_ClockConfig+0x1cc>)
 8001f30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f32:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <HAL_RCC_ClockConfig+0x1d0>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7fe fa56 	bl	80003e8 <HAL_InitTick>

  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40022000 	.word	0x40022000
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	0800843c 	.word	0x0800843c
 8001f54:	20000000 	.word	0x20000000
 8001f58:	20000004 	.word	0x20000004

08001f5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f5c:	b490      	push	{r4, r7}
 8001f5e:	b08a      	sub	sp, #40	; 0x28
 8001f60:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f62:	4b2a      	ldr	r3, [pc, #168]	; (800200c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f64:	1d3c      	adds	r4, r7, #4
 8001f66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001f6c:	4b28      	ldr	r3, [pc, #160]	; (8002010 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	61fb      	str	r3, [r7, #28]
 8001f76:	2300      	movs	r3, #0
 8001f78:	61bb      	str	r3, [r7, #24]
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f7e:	2300      	movs	r3, #0
 8001f80:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001f82:	2300      	movs	r3, #0
 8001f84:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f86:	4b23      	ldr	r3, [pc, #140]	; (8002014 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	f003 030c 	and.w	r3, r3, #12
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	d002      	beq.n	8001f9c <HAL_RCC_GetSysClockFreq+0x40>
 8001f96:	2b08      	cmp	r3, #8
 8001f98:	d003      	beq.n	8001fa2 <HAL_RCC_GetSysClockFreq+0x46>
 8001f9a:	e02d      	b.n	8001ff8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f9c:	4b1e      	ldr	r3, [pc, #120]	; (8002018 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f9e:	623b      	str	r3, [r7, #32]
      break;
 8001fa0:	e02d      	b.n	8001ffe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	0c9b      	lsrs	r3, r3, #18
 8001fa6:	f003 030f 	and.w	r3, r3, #15
 8001faa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001fae:	4413      	add	r3, r2
 8001fb0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001fb4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d013      	beq.n	8001fe8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fc0:	4b14      	ldr	r3, [pc, #80]	; (8002014 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	0c5b      	lsrs	r3, r3, #17
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001fce:	4413      	add	r3, r2
 8001fd0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001fd4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	4a0f      	ldr	r2, [pc, #60]	; (8002018 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fda:	fb02 f203 	mul.w	r2, r2, r3
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe4:	627b      	str	r3, [r7, #36]	; 0x24
 8001fe6:	e004      	b.n	8001ff2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	4a0c      	ldr	r2, [pc, #48]	; (800201c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001fec:	fb02 f303 	mul.w	r3, r2, r3
 8001ff0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	623b      	str	r3, [r7, #32]
      break;
 8001ff6:	e002      	b.n	8001ffe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ff8:	4b07      	ldr	r3, [pc, #28]	; (8002018 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ffa:	623b      	str	r3, [r7, #32]
      break;
 8001ffc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ffe:	6a3b      	ldr	r3, [r7, #32]
}
 8002000:	4618      	mov	r0, r3
 8002002:	3728      	adds	r7, #40	; 0x28
 8002004:	46bd      	mov	sp, r7
 8002006:	bc90      	pop	{r4, r7}
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	0800838c 	.word	0x0800838c
 8002010:	0800839c 	.word	0x0800839c
 8002014:	40021000 	.word	0x40021000
 8002018:	007a1200 	.word	0x007a1200
 800201c:	003d0900 	.word	0x003d0900

08002020 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002024:	4b02      	ldr	r3, [pc, #8]	; (8002030 <HAL_RCC_GetHCLKFreq+0x10>)
 8002026:	681b      	ldr	r3, [r3, #0]
}
 8002028:	4618      	mov	r0, r3
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr
 8002030:	20000000 	.word	0x20000000

08002034 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002038:	f7ff fff2 	bl	8002020 <HAL_RCC_GetHCLKFreq>
 800203c:	4601      	mov	r1, r0
 800203e:	4b05      	ldr	r3, [pc, #20]	; (8002054 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	0adb      	lsrs	r3, r3, #11
 8002044:	f003 0307 	and.w	r3, r3, #7
 8002048:	4a03      	ldr	r2, [pc, #12]	; (8002058 <HAL_RCC_GetPCLK2Freq+0x24>)
 800204a:	5cd3      	ldrb	r3, [r2, r3]
 800204c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002050:	4618      	mov	r0, r3
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40021000 	.word	0x40021000
 8002058:	0800844c 	.word	0x0800844c

0800205c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	220f      	movs	r2, #15
 800206a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800206c:	4b11      	ldr	r3, [pc, #68]	; (80020b4 <HAL_RCC_GetClockConfig+0x58>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f003 0203 	and.w	r2, r3, #3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002078:	4b0e      	ldr	r3, [pc, #56]	; (80020b4 <HAL_RCC_GetClockConfig+0x58>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002084:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <HAL_RCC_GetClockConfig+0x58>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002090:	4b08      	ldr	r3, [pc, #32]	; (80020b4 <HAL_RCC_GetClockConfig+0x58>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	08db      	lsrs	r3, r3, #3
 8002096:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800209e:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <HAL_RCC_GetClockConfig+0x5c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0207 	and.w	r2, r3, #7
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bc80      	pop	{r7}
 80020b2:	4770      	bx	lr
 80020b4:	40021000 	.word	0x40021000
 80020b8:	40022000 	.word	0x40022000

080020bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020c4:	4b0a      	ldr	r3, [pc, #40]	; (80020f0 <RCC_Delay+0x34>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a0a      	ldr	r2, [pc, #40]	; (80020f4 <RCC_Delay+0x38>)
 80020ca:	fba2 2303 	umull	r2, r3, r2, r3
 80020ce:	0a5b      	lsrs	r3, r3, #9
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	fb02 f303 	mul.w	r3, r2, r3
 80020d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020d8:	bf00      	nop
  }
  while (Delay --);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	1e5a      	subs	r2, r3, #1
 80020de:	60fa      	str	r2, [r7, #12]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1f9      	bne.n	80020d8 <RCC_Delay+0x1c>
}
 80020e4:	bf00      	nop
 80020e6:	3714      	adds	r7, #20
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bc80      	pop	{r7}
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	20000000 	.word	0x20000000
 80020f4:	10624dd3 	.word	0x10624dd3

080020f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002100:	2300      	movs	r3, #0
 8002102:	613b      	str	r3, [r7, #16]
 8002104:	2300      	movs	r3, #0
 8002106:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	2b00      	cmp	r3, #0
 8002112:	d07d      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002114:	2300      	movs	r3, #0
 8002116:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002118:	4b4f      	ldr	r3, [pc, #316]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800211a:	69db      	ldr	r3, [r3, #28]
 800211c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d10d      	bne.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002124:	4b4c      	ldr	r3, [pc, #304]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002126:	69db      	ldr	r3, [r3, #28]
 8002128:	4a4b      	ldr	r2, [pc, #300]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800212a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800212e:	61d3      	str	r3, [r2, #28]
 8002130:	4b49      	ldr	r3, [pc, #292]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002132:	69db      	ldr	r3, [r3, #28]
 8002134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002138:	60bb      	str	r3, [r7, #8]
 800213a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800213c:	2301      	movs	r3, #1
 800213e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002140:	4b46      	ldr	r3, [pc, #280]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002148:	2b00      	cmp	r3, #0
 800214a:	d118      	bne.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800214c:	4b43      	ldr	r3, [pc, #268]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a42      	ldr	r2, [pc, #264]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002152:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002156:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002158:	f7fe fa4a 	bl	80005f0 <HAL_GetTick>
 800215c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800215e:	e008      	b.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002160:	f7fe fa46 	bl	80005f0 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b64      	cmp	r3, #100	; 0x64
 800216c:	d901      	bls.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e06d      	b.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002172:	4b3a      	ldr	r3, [pc, #232]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800217a:	2b00      	cmp	r3, #0
 800217c:	d0f0      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800217e:	4b36      	ldr	r3, [pc, #216]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002186:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d02e      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	429a      	cmp	r2, r3
 800219a:	d027      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800219c:	4b2e      	ldr	r3, [pc, #184]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021a4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021a6:	4b2e      	ldr	r3, [pc, #184]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80021a8:	2201      	movs	r2, #1
 80021aa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021ac:	4b2c      	ldr	r3, [pc, #176]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80021b2:	4a29      	ldr	r2, [pc, #164]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d014      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c2:	f7fe fa15 	bl	80005f0 <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021c8:	e00a      	b.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ca:	f7fe fa11 	bl	80005f0 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d8:	4293      	cmp	r3, r2
 80021da:	d901      	bls.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e036      	b.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e0:	4b1d      	ldr	r3, [pc, #116]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d0ee      	beq.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021ec:	4b1a      	ldr	r3, [pc, #104]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	4917      	ldr	r1, [pc, #92]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021fe:	7dfb      	ldrb	r3, [r7, #23]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d105      	bne.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002204:	4b14      	ldr	r3, [pc, #80]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002206:	69db      	ldr	r3, [r3, #28]
 8002208:	4a13      	ldr	r2, [pc, #76]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800220a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800220e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d008      	beq.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800221c:	4b0e      	ldr	r3, [pc, #56]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	490b      	ldr	r1, [pc, #44]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800222a:	4313      	orrs	r3, r2
 800222c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0310 	and.w	r3, r3, #16
 8002236:	2b00      	cmp	r3, #0
 8002238:	d008      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800223a:	4b07      	ldr	r3, [pc, #28]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	4904      	ldr	r1, [pc, #16]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002248:	4313      	orrs	r3, r2
 800224a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3718      	adds	r7, #24
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40021000 	.word	0x40021000
 800225c:	40007000 	.word	0x40007000
 8002260:	42420440 	.word	0x42420440

08002264 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e01d      	b.n	80022b2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d106      	bne.n	8002290 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 f815 	bl	80022ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2202      	movs	r2, #2
 8002294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3304      	adds	r3, #4
 80022a0:	4619      	mov	r1, r3
 80022a2:	4610      	mov	r0, r2
 80022a4:	f000 f962 	bl	800256c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80022ba:	b480      	push	{r7}
 80022bc:	b083      	sub	sp, #12
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80022c2:	bf00      	nop
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bc80      	pop	{r7}
 80022ca:	4770      	bx	lr

080022cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68da      	ldr	r2, [r3, #12]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f042 0201 	orr.w	r2, r2, #1
 80022e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f003 0307 	and.w	r3, r3, #7
 80022ee:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2b06      	cmp	r3, #6
 80022f4:	d007      	beq.n	8002306 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f042 0201 	orr.w	r2, r2, #1
 8002304:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3714      	adds	r7, #20
 800230c:	46bd      	mov	sp, r7
 800230e:	bc80      	pop	{r7}
 8002310:	4770      	bx	lr

08002312 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b082      	sub	sp, #8
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b02      	cmp	r3, #2
 8002326:	d122      	bne.n	800236e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b02      	cmp	r3, #2
 8002334:	d11b      	bne.n	800236e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f06f 0202 	mvn.w	r2, #2
 800233e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	f003 0303 	and.w	r3, r3, #3
 8002350:	2b00      	cmp	r3, #0
 8002352:	d003      	beq.n	800235c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f000 f8ed 	bl	8002534 <HAL_TIM_IC_CaptureCallback>
 800235a:	e005      	b.n	8002368 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f000 f8e0 	bl	8002522 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f8ef 	bl	8002546 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b04      	cmp	r3, #4
 800237a:	d122      	bne.n	80023c2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	f003 0304 	and.w	r3, r3, #4
 8002386:	2b04      	cmp	r3, #4
 8002388:	d11b      	bne.n	80023c2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f06f 0204 	mvn.w	r2, #4
 8002392:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2202      	movs	r2, #2
 8002398:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d003      	beq.n	80023b0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f000 f8c3 	bl	8002534 <HAL_TIM_IC_CaptureCallback>
 80023ae:	e005      	b.n	80023bc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 f8b6 	bl	8002522 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 f8c5 	bl	8002546 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	f003 0308 	and.w	r3, r3, #8
 80023cc:	2b08      	cmp	r3, #8
 80023ce:	d122      	bne.n	8002416 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	f003 0308 	and.w	r3, r3, #8
 80023da:	2b08      	cmp	r3, #8
 80023dc:	d11b      	bne.n	8002416 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f06f 0208 	mvn.w	r2, #8
 80023e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2204      	movs	r2, #4
 80023ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	69db      	ldr	r3, [r3, #28]
 80023f4:	f003 0303 	and.w	r3, r3, #3
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d003      	beq.n	8002404 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 f899 	bl	8002534 <HAL_TIM_IC_CaptureCallback>
 8002402:	e005      	b.n	8002410 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f000 f88c 	bl	8002522 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 f89b 	bl	8002546 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	f003 0310 	and.w	r3, r3, #16
 8002420:	2b10      	cmp	r3, #16
 8002422:	d122      	bne.n	800246a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	f003 0310 	and.w	r3, r3, #16
 800242e:	2b10      	cmp	r3, #16
 8002430:	d11b      	bne.n	800246a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f06f 0210 	mvn.w	r2, #16
 800243a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2208      	movs	r2, #8
 8002440:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	69db      	ldr	r3, [r3, #28]
 8002448:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800244c:	2b00      	cmp	r3, #0
 800244e:	d003      	beq.n	8002458 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 f86f 	bl	8002534 <HAL_TIM_IC_CaptureCallback>
 8002456:	e005      	b.n	8002464 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 f862 	bl	8002522 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 f871 	bl	8002546 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	2b01      	cmp	r3, #1
 8002476:	d10e      	bne.n	8002496 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b01      	cmp	r3, #1
 8002484:	d107      	bne.n	8002496 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f06f 0201 	mvn.w	r2, #1
 800248e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f7fd ff5f 	bl	8000354 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a0:	2b80      	cmp	r3, #128	; 0x80
 80024a2:	d10e      	bne.n	80024c2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ae:	2b80      	cmp	r3, #128	; 0x80
 80024b0:	d107      	bne.n	80024c2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 f8c0 	bl	8002642 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024cc:	2b40      	cmp	r3, #64	; 0x40
 80024ce:	d10e      	bne.n	80024ee <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024da:	2b40      	cmp	r3, #64	; 0x40
 80024dc:	d107      	bne.n	80024ee <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f000 f835 	bl	8002558 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	f003 0320 	and.w	r3, r3, #32
 80024f8:	2b20      	cmp	r3, #32
 80024fa:	d10e      	bne.n	800251a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	f003 0320 	and.w	r3, r3, #32
 8002506:	2b20      	cmp	r3, #32
 8002508:	d107      	bne.n	800251a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f06f 0220 	mvn.w	r2, #32
 8002512:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 f88b 	bl	8002630 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800251a:	bf00      	nop
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002522:	b480      	push	{r7}
 8002524:	b083      	sub	sp, #12
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800252a:	bf00      	nop
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	bc80      	pop	{r7}
 8002532:	4770      	bx	lr

08002534 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	bc80      	pop	{r7}
 8002544:	4770      	bx	lr

08002546 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	bc80      	pop	{r7}
 8002556:	4770      	bx	lr

08002558 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	bc80      	pop	{r7}
 8002568:	4770      	bx	lr
	...

0800256c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a29      	ldr	r2, [pc, #164]	; (8002624 <TIM_Base_SetConfig+0xb8>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d00b      	beq.n	800259c <TIM_Base_SetConfig+0x30>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800258a:	d007      	beq.n	800259c <TIM_Base_SetConfig+0x30>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a26      	ldr	r2, [pc, #152]	; (8002628 <TIM_Base_SetConfig+0xbc>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d003      	beq.n	800259c <TIM_Base_SetConfig+0x30>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a25      	ldr	r2, [pc, #148]	; (800262c <TIM_Base_SetConfig+0xc0>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d108      	bne.n	80025ae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a1c      	ldr	r2, [pc, #112]	; (8002624 <TIM_Base_SetConfig+0xb8>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d00b      	beq.n	80025ce <TIM_Base_SetConfig+0x62>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025bc:	d007      	beq.n	80025ce <TIM_Base_SetConfig+0x62>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a19      	ldr	r2, [pc, #100]	; (8002628 <TIM_Base_SetConfig+0xbc>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d003      	beq.n	80025ce <TIM_Base_SetConfig+0x62>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a18      	ldr	r2, [pc, #96]	; (800262c <TIM_Base_SetConfig+0xc0>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d108      	bne.n	80025e0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	4313      	orrs	r3, r2
 80025de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a07      	ldr	r2, [pc, #28]	; (8002624 <TIM_Base_SetConfig+0xb8>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d103      	bne.n	8002614 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	691a      	ldr	r2, [r3, #16]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	615a      	str	r2, [r3, #20]
}
 800261a:	bf00      	nop
 800261c:	3714      	adds	r7, #20
 800261e:	46bd      	mov	sp, r7
 8002620:	bc80      	pop	{r7}
 8002622:	4770      	bx	lr
 8002624:	40012c00 	.word	0x40012c00
 8002628:	40000400 	.word	0x40000400
 800262c:	40000800 	.word	0x40000800

08002630 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	bc80      	pop	{r7}
 8002640:	4770      	bx	lr

08002642 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002642:	b480      	push	{r7}
 8002644:	b083      	sub	sp, #12
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800264a:	bf00      	nop
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	bc80      	pop	{r7}
 8002652:	4770      	bx	lr

08002654 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002654:	b084      	sub	sp, #16
 8002656:	b480      	push	{r7}
 8002658:	b083      	sub	sp, #12
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
 800265e:	f107 0014 	add.w	r0, r7, #20
 8002662:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	bc80      	pop	{r7}
 8002670:	b004      	add	sp, #16
 8002672:	4770      	bx	lr

08002674 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800267c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002680:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002688:	b29a      	uxth	r2, r3
 800268a:	89fb      	ldrh	r3, [r7, #14]
 800268c:	4313      	orrs	r3, r2
 800268e:	b29a      	uxth	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002696:	2300      	movs	r3, #0
}
 8002698:	4618      	mov	r0, r3
 800269a:	3714      	adds	r7, #20
 800269c:	46bd      	mov	sp, r7
 800269e:	bc80      	pop	{r7}
 80026a0:	4770      	bx	lr

080026a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80026a2:	b480      	push	{r7}
 80026a4:	b085      	sub	sp, #20
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80026aa:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80026ae:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	b21a      	sxth	r2, r3
 80026ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026be:	43db      	mvns	r3, r3
 80026c0:	b21b      	sxth	r3, r3
 80026c2:	4013      	ands	r3, r2
 80026c4:	b21b      	sxth	r3, r3
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3714      	adds	r7, #20
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bc80      	pop	{r7}
 80026d8:	4770      	bx	lr

080026da <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80026da:	b480      	push	{r7}
 80026dc:	b083      	sub	sp, #12
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
 80026e2:	460b      	mov	r3, r1
 80026e4:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bc80      	pop	{r7}
 80026f0:	4770      	bx	lr

080026f2 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80026f2:	b084      	sub	sp, #16
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	f107 0014 	add.w	r0, r7, #20
 8002700:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f7ff ffa5 	bl	8002674 <USB_EnableGlobalInt>

  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002736:	b004      	add	sp, #16
 8002738:	4770      	bx	lr
	...

0800273c <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800273c:	b490      	push	{r4, r7}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002746:	2300      	movs	r3, #0
 8002748:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4413      	add	r3, r2
 8002754:	881b      	ldrh	r3, [r3, #0]
 8002756:	b29b      	uxth	r3, r3
 8002758:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800275c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002760:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	78db      	ldrb	r3, [r3, #3]
 8002766:	2b03      	cmp	r3, #3
 8002768:	d819      	bhi.n	800279e <USB_ActivateEndpoint+0x62>
 800276a:	a201      	add	r2, pc, #4	; (adr r2, 8002770 <USB_ActivateEndpoint+0x34>)
 800276c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002770:	08002781 	.word	0x08002781
 8002774:	08002795 	.word	0x08002795
 8002778:	080027a5 	.word	0x080027a5
 800277c:	0800278b 	.word	0x0800278b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002780:	89bb      	ldrh	r3, [r7, #12]
 8002782:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002786:	81bb      	strh	r3, [r7, #12]
      break;
 8002788:	e00d      	b.n	80027a6 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800278a:	89bb      	ldrh	r3, [r7, #12]
 800278c:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002790:	81bb      	strh	r3, [r7, #12]
      break;
 8002792:	e008      	b.n	80027a6 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002794:	89bb      	ldrh	r3, [r7, #12]
 8002796:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800279a:	81bb      	strh	r3, [r7, #12]
      break;
 800279c:	e003      	b.n	80027a6 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	73fb      	strb	r3, [r7, #15]
      break;
 80027a2:	e000      	b.n	80027a6 <USB_ActivateEndpoint+0x6a>
      break;
 80027a4:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	441a      	add	r2, r3
 80027b0:	89bb      	ldrh	r3, [r7, #12]
 80027b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	4413      	add	r3, r2
 80027d0:	881b      	ldrh	r3, [r3, #0]
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027dc:	b29a      	uxth	r2, r3
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	4313      	orrs	r3, r2
 80027e6:	b29c      	uxth	r4, r3
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	441a      	add	r2, r3
 80027f2:	4b8a      	ldr	r3, [pc, #552]	; (8002a1c <USB_ActivateEndpoint+0x2e0>)
 80027f4:	4323      	orrs	r3, r4
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	7b1b      	ldrb	r3, [r3, #12]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f040 8112 	bne.w	8002a28 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	785b      	ldrb	r3, [r3, #1]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d067      	beq.n	80028dc <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800280c:	687c      	ldr	r4, [r7, #4]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002814:	b29b      	uxth	r3, r3
 8002816:	441c      	add	r4, r3
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	011b      	lsls	r3, r3, #4
 800281e:	4423      	add	r3, r4
 8002820:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002824:	461c      	mov	r4, r3
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	88db      	ldrh	r3, [r3, #6]
 800282a:	085b      	lsrs	r3, r3, #1
 800282c:	b29b      	uxth	r3, r3
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	b29b      	uxth	r3, r3
 8002832:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	4413      	add	r3, r2
 800283e:	881b      	ldrh	r3, [r3, #0]
 8002840:	b29c      	uxth	r4, r3
 8002842:	4623      	mov	r3, r4
 8002844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002848:	2b00      	cmp	r3, #0
 800284a:	d014      	beq.n	8002876 <USB_ActivateEndpoint+0x13a>
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4413      	add	r3, r2
 8002856:	881b      	ldrh	r3, [r3, #0]
 8002858:	b29b      	uxth	r3, r3
 800285a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800285e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002862:	b29c      	uxth	r4, r3
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	441a      	add	r2, r3
 800286e:	4b6c      	ldr	r3, [pc, #432]	; (8002a20 <USB_ActivateEndpoint+0x2e4>)
 8002870:	4323      	orrs	r3, r4
 8002872:	b29b      	uxth	r3, r3
 8002874:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	78db      	ldrb	r3, [r3, #3]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d018      	beq.n	80028b0 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	4413      	add	r3, r2
 8002888:	881b      	ldrh	r3, [r3, #0]
 800288a:	b29b      	uxth	r3, r3
 800288c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002890:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002894:	b29c      	uxth	r4, r3
 8002896:	f084 0320 	eor.w	r3, r4, #32
 800289a:	b29c      	uxth	r4, r3
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	441a      	add	r2, r3
 80028a6:	4b5d      	ldr	r3, [pc, #372]	; (8002a1c <USB_ActivateEndpoint+0x2e0>)
 80028a8:	4323      	orrs	r3, r4
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	8013      	strh	r3, [r2, #0]
 80028ae:	e22b      	b.n	8002d08 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	881b      	ldrh	r3, [r3, #0]
 80028bc:	b29b      	uxth	r3, r3
 80028be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028c6:	b29c      	uxth	r4, r3
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	441a      	add	r2, r3
 80028d2:	4b52      	ldr	r3, [pc, #328]	; (8002a1c <USB_ActivateEndpoint+0x2e0>)
 80028d4:	4323      	orrs	r3, r4
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	8013      	strh	r3, [r2, #0]
 80028da:	e215      	b.n	8002d08 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80028dc:	687c      	ldr	r4, [r7, #4]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	441c      	add	r4, r3
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	011b      	lsls	r3, r3, #4
 80028ee:	4423      	add	r3, r4
 80028f0:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80028f4:	461c      	mov	r4, r3
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	88db      	ldrh	r3, [r3, #6]
 80028fa:	085b      	lsrs	r3, r3, #1
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	b29b      	uxth	r3, r3
 8002902:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002904:	687c      	ldr	r4, [r7, #4]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800290c:	b29b      	uxth	r3, r3
 800290e:	441c      	add	r4, r3
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	011b      	lsls	r3, r3, #4
 8002916:	4423      	add	r3, r4
 8002918:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800291c:	461c      	mov	r4, r3
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10e      	bne.n	8002944 <USB_ActivateEndpoint+0x208>
 8002926:	8823      	ldrh	r3, [r4, #0]
 8002928:	b29b      	uxth	r3, r3
 800292a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800292e:	b29b      	uxth	r3, r3
 8002930:	8023      	strh	r3, [r4, #0]
 8002932:	8823      	ldrh	r3, [r4, #0]
 8002934:	b29b      	uxth	r3, r3
 8002936:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800293a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800293e:	b29b      	uxth	r3, r3
 8002940:	8023      	strh	r3, [r4, #0]
 8002942:	e02d      	b.n	80029a0 <USB_ActivateEndpoint+0x264>
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	2b3e      	cmp	r3, #62	; 0x3e
 800294a:	d812      	bhi.n	8002972 <USB_ActivateEndpoint+0x236>
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	085b      	lsrs	r3, r3, #1
 8002952:	60bb      	str	r3, [r7, #8]
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	2b00      	cmp	r3, #0
 800295e:	d002      	beq.n	8002966 <USB_ActivateEndpoint+0x22a>
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	3301      	adds	r3, #1
 8002964:	60bb      	str	r3, [r7, #8]
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	b29b      	uxth	r3, r3
 800296a:	029b      	lsls	r3, r3, #10
 800296c:	b29b      	uxth	r3, r3
 800296e:	8023      	strh	r3, [r4, #0]
 8002970:	e016      	b.n	80029a0 <USB_ActivateEndpoint+0x264>
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	095b      	lsrs	r3, r3, #5
 8002978:	60bb      	str	r3, [r7, #8]
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	f003 031f 	and.w	r3, r3, #31
 8002982:	2b00      	cmp	r3, #0
 8002984:	d102      	bne.n	800298c <USB_ActivateEndpoint+0x250>
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	3b01      	subs	r3, #1
 800298a:	60bb      	str	r3, [r7, #8]
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	b29b      	uxth	r3, r3
 8002990:	029b      	lsls	r3, r3, #10
 8002992:	b29b      	uxth	r3, r3
 8002994:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002998:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800299c:	b29b      	uxth	r3, r3
 800299e:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	881b      	ldrh	r3, [r3, #0]
 80029ac:	b29c      	uxth	r4, r3
 80029ae:	4623      	mov	r3, r4
 80029b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d014      	beq.n	80029e2 <USB_ActivateEndpoint+0x2a6>
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4413      	add	r3, r2
 80029c2:	881b      	ldrh	r3, [r3, #0]
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ce:	b29c      	uxth	r4, r3
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	441a      	add	r2, r3
 80029da:	4b12      	ldr	r3, [pc, #72]	; (8002a24 <USB_ActivateEndpoint+0x2e8>)
 80029dc:	4323      	orrs	r3, r4
 80029de:	b29b      	uxth	r3, r3
 80029e0:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	881b      	ldrh	r3, [r3, #0]
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029f8:	b29c      	uxth	r4, r3
 80029fa:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80029fe:	b29c      	uxth	r4, r3
 8002a00:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002a04:	b29c      	uxth	r4, r3
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	441a      	add	r2, r3
 8002a10:	4b02      	ldr	r3, [pc, #8]	; (8002a1c <USB_ActivateEndpoint+0x2e0>)
 8002a12:	4323      	orrs	r3, r4
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	8013      	strh	r3, [r2, #0]
 8002a18:	e176      	b.n	8002d08 <USB_ActivateEndpoint+0x5cc>
 8002a1a:	bf00      	nop
 8002a1c:	ffff8080 	.word	0xffff8080
 8002a20:	ffff80c0 	.word	0xffff80c0
 8002a24:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	4413      	add	r3, r2
 8002a32:	881b      	ldrh	r3, [r3, #0]
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a3e:	b29c      	uxth	r4, r3
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	441a      	add	r2, r3
 8002a4a:	4b96      	ldr	r3, [pc, #600]	; (8002ca4 <USB_ActivateEndpoint+0x568>)
 8002a4c:	4323      	orrs	r3, r4
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002a52:	687c      	ldr	r4, [r7, #4]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	441c      	add	r4, r3
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	011b      	lsls	r3, r3, #4
 8002a64:	4423      	add	r3, r4
 8002a66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a6a:	461c      	mov	r4, r3
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	891b      	ldrh	r3, [r3, #8]
 8002a70:	085b      	lsrs	r3, r3, #1
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	8023      	strh	r3, [r4, #0]
 8002a7a:	687c      	ldr	r4, [r7, #4]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	441c      	add	r4, r3
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	011b      	lsls	r3, r3, #4
 8002a8c:	4423      	add	r3, r4
 8002a8e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002a92:	461c      	mov	r4, r3
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	895b      	ldrh	r3, [r3, #10]
 8002a98:	085b      	lsrs	r3, r3, #1
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	785b      	ldrb	r3, [r3, #1]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f040 8088 	bne.w	8002bbc <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	4413      	add	r3, r2
 8002ab6:	881b      	ldrh	r3, [r3, #0]
 8002ab8:	b29c      	uxth	r4, r3
 8002aba:	4623      	mov	r3, r4
 8002abc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d014      	beq.n	8002aee <USB_ActivateEndpoint+0x3b2>
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	881b      	ldrh	r3, [r3, #0]
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ada:	b29c      	uxth	r4, r3
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	441a      	add	r2, r3
 8002ae6:	4b70      	ldr	r3, [pc, #448]	; (8002ca8 <USB_ActivateEndpoint+0x56c>)
 8002ae8:	4323      	orrs	r3, r4
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	881b      	ldrh	r3, [r3, #0]
 8002afa:	b29c      	uxth	r4, r3
 8002afc:	4623      	mov	r3, r4
 8002afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d014      	beq.n	8002b30 <USB_ActivateEndpoint+0x3f4>
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4413      	add	r3, r2
 8002b10:	881b      	ldrh	r3, [r3, #0]
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b1c:	b29c      	uxth	r4, r3
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	441a      	add	r2, r3
 8002b28:	4b60      	ldr	r3, [pc, #384]	; (8002cac <USB_ActivateEndpoint+0x570>)
 8002b2a:	4323      	orrs	r3, r4
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	881b      	ldrh	r3, [r3, #0]
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b46:	b29c      	uxth	r4, r3
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	441a      	add	r2, r3
 8002b52:	4b56      	ldr	r3, [pc, #344]	; (8002cac <USB_ActivateEndpoint+0x570>)
 8002b54:	4323      	orrs	r3, r4
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	4413      	add	r3, r2
 8002b64:	881b      	ldrh	r3, [r3, #0]
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b70:	b29c      	uxth	r4, r3
 8002b72:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002b76:	b29c      	uxth	r4, r3
 8002b78:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002b7c:	b29c      	uxth	r4, r3
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	441a      	add	r2, r3
 8002b88:	4b49      	ldr	r3, [pc, #292]	; (8002cb0 <USB_ActivateEndpoint+0x574>)
 8002b8a:	4323      	orrs	r3, r4
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	881b      	ldrh	r3, [r3, #0]
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ba2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ba6:	b29c      	uxth	r4, r3
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	441a      	add	r2, r3
 8002bb2:	4b3f      	ldr	r3, [pc, #252]	; (8002cb0 <USB_ActivateEndpoint+0x574>)
 8002bb4:	4323      	orrs	r3, r4
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	8013      	strh	r3, [r2, #0]
 8002bba:	e0a5      	b.n	8002d08 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4413      	add	r3, r2
 8002bc6:	881b      	ldrh	r3, [r3, #0]
 8002bc8:	b29c      	uxth	r4, r3
 8002bca:	4623      	mov	r3, r4
 8002bcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d014      	beq.n	8002bfe <USB_ActivateEndpoint+0x4c2>
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	4413      	add	r3, r2
 8002bde:	881b      	ldrh	r3, [r3, #0]
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bea:	b29c      	uxth	r4, r3
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	441a      	add	r2, r3
 8002bf6:	4b2c      	ldr	r3, [pc, #176]	; (8002ca8 <USB_ActivateEndpoint+0x56c>)
 8002bf8:	4323      	orrs	r3, r4
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	4413      	add	r3, r2
 8002c08:	881b      	ldrh	r3, [r3, #0]
 8002c0a:	b29c      	uxth	r4, r3
 8002c0c:	4623      	mov	r3, r4
 8002c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d014      	beq.n	8002c40 <USB_ActivateEndpoint+0x504>
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	881b      	ldrh	r3, [r3, #0]
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c2c:	b29c      	uxth	r4, r3
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	441a      	add	r2, r3
 8002c38:	4b1c      	ldr	r3, [pc, #112]	; (8002cac <USB_ActivateEndpoint+0x570>)
 8002c3a:	4323      	orrs	r3, r4
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4413      	add	r3, r2
 8002c4a:	881b      	ldrh	r3, [r3, #0]
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c56:	b29c      	uxth	r4, r3
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	441a      	add	r2, r3
 8002c62:	4b11      	ldr	r3, [pc, #68]	; (8002ca8 <USB_ActivateEndpoint+0x56c>)
 8002c64:	4323      	orrs	r3, r4
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	78db      	ldrb	r3, [r3, #3]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d020      	beq.n	8002cb4 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	4413      	add	r3, r2
 8002c7c:	881b      	ldrh	r3, [r3, #0]
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c88:	b29c      	uxth	r4, r3
 8002c8a:	f084 0320 	eor.w	r3, r4, #32
 8002c8e:	b29c      	uxth	r4, r3
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	441a      	add	r2, r3
 8002c9a:	4b05      	ldr	r3, [pc, #20]	; (8002cb0 <USB_ActivateEndpoint+0x574>)
 8002c9c:	4323      	orrs	r3, r4
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	8013      	strh	r3, [r2, #0]
 8002ca2:	e01c      	b.n	8002cde <USB_ActivateEndpoint+0x5a2>
 8002ca4:	ffff8180 	.word	0xffff8180
 8002ca8:	ffffc080 	.word	0xffffc080
 8002cac:	ffff80c0 	.word	0xffff80c0
 8002cb0:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4413      	add	r3, r2
 8002cbe:	881b      	ldrh	r3, [r3, #0]
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cca:	b29c      	uxth	r4, r3
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	441a      	add	r2, r3
 8002cd6:	4b0f      	ldr	r3, [pc, #60]	; (8002d14 <USB_ActivateEndpoint+0x5d8>)
 8002cd8:	4323      	orrs	r3, r4
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	4413      	add	r3, r2
 8002ce8:	881b      	ldrh	r3, [r3, #0]
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cf4:	b29c      	uxth	r4, r3
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	441a      	add	r2, r3
 8002d00:	4b04      	ldr	r3, [pc, #16]	; (8002d14 <USB_ActivateEndpoint+0x5d8>)
 8002d02:	4323      	orrs	r3, r4
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8002d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bc90      	pop	{r4, r7}
 8002d12:	4770      	bx	lr
 8002d14:	ffff8080 	.word	0xffff8080

08002d18 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002d18:	b490      	push	{r4, r7}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	7b1b      	ldrb	r3, [r3, #12]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d171      	bne.n	8002e0e <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	785b      	ldrb	r3, [r3, #1]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d036      	beq.n	8002da0 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	881b      	ldrh	r3, [r3, #0]
 8002d3e:	b29c      	uxth	r4, r3
 8002d40:	4623      	mov	r3, r4
 8002d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d014      	beq.n	8002d74 <USB_DeactivateEndpoint+0x5c>
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4413      	add	r3, r2
 8002d54:	881b      	ldrh	r3, [r3, #0]
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d60:	b29c      	uxth	r4, r3
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	441a      	add	r2, r3
 8002d6c:	4b6b      	ldr	r3, [pc, #428]	; (8002f1c <USB_DeactivateEndpoint+0x204>)
 8002d6e:	4323      	orrs	r3, r4
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	881b      	ldrh	r3, [r3, #0]
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d8a:	b29c      	uxth	r4, r3
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	441a      	add	r2, r3
 8002d96:	4b62      	ldr	r3, [pc, #392]	; (8002f20 <USB_DeactivateEndpoint+0x208>)
 8002d98:	4323      	orrs	r3, r4
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	8013      	strh	r3, [r2, #0]
 8002d9e:	e144      	b.n	800302a <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	4413      	add	r3, r2
 8002daa:	881b      	ldrh	r3, [r3, #0]
 8002dac:	b29c      	uxth	r4, r3
 8002dae:	4623      	mov	r3, r4
 8002db0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d014      	beq.n	8002de2 <USB_DeactivateEndpoint+0xca>
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	4413      	add	r3, r2
 8002dc2:	881b      	ldrh	r3, [r3, #0]
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dce:	b29c      	uxth	r4, r3
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	441a      	add	r2, r3
 8002dda:	4b52      	ldr	r3, [pc, #328]	; (8002f24 <USB_DeactivateEndpoint+0x20c>)
 8002ddc:	4323      	orrs	r3, r4
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4413      	add	r3, r2
 8002dec:	881b      	ldrh	r3, [r3, #0]
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002df4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002df8:	b29c      	uxth	r4, r3
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	441a      	add	r2, r3
 8002e04:	4b46      	ldr	r3, [pc, #280]	; (8002f20 <USB_DeactivateEndpoint+0x208>)
 8002e06:	4323      	orrs	r3, r4
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	8013      	strh	r3, [r2, #0]
 8002e0c:	e10d      	b.n	800302a <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	785b      	ldrb	r3, [r3, #1]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f040 8088 	bne.w	8002f28 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	881b      	ldrh	r3, [r3, #0]
 8002e24:	b29c      	uxth	r4, r3
 8002e26:	4623      	mov	r3, r4
 8002e28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d014      	beq.n	8002e5a <USB_DeactivateEndpoint+0x142>
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	4413      	add	r3, r2
 8002e3a:	881b      	ldrh	r3, [r3, #0]
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e46:	b29c      	uxth	r4, r3
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	441a      	add	r2, r3
 8002e52:	4b34      	ldr	r3, [pc, #208]	; (8002f24 <USB_DeactivateEndpoint+0x20c>)
 8002e54:	4323      	orrs	r3, r4
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4413      	add	r3, r2
 8002e64:	881b      	ldrh	r3, [r3, #0]
 8002e66:	b29c      	uxth	r4, r3
 8002e68:	4623      	mov	r3, r4
 8002e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d014      	beq.n	8002e9c <USB_DeactivateEndpoint+0x184>
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4413      	add	r3, r2
 8002e7c:	881b      	ldrh	r3, [r3, #0]
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e88:	b29c      	uxth	r4, r3
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	441a      	add	r2, r3
 8002e94:	4b21      	ldr	r3, [pc, #132]	; (8002f1c <USB_DeactivateEndpoint+0x204>)
 8002e96:	4323      	orrs	r3, r4
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4413      	add	r3, r2
 8002ea6:	881b      	ldrh	r3, [r3, #0]
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eb2:	b29c      	uxth	r4, r3
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	441a      	add	r2, r3
 8002ebe:	4b17      	ldr	r3, [pc, #92]	; (8002f1c <USB_DeactivateEndpoint+0x204>)
 8002ec0:	4323      	orrs	r3, r4
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4413      	add	r3, r2
 8002ed0:	881b      	ldrh	r3, [r3, #0]
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002edc:	b29c      	uxth	r4, r3
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	441a      	add	r2, r3
 8002ee8:	4b0d      	ldr	r3, [pc, #52]	; (8002f20 <USB_DeactivateEndpoint+0x208>)
 8002eea:	4323      	orrs	r3, r4
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	881b      	ldrh	r3, [r3, #0]
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f06:	b29c      	uxth	r4, r3
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	441a      	add	r2, r3
 8002f12:	4b03      	ldr	r3, [pc, #12]	; (8002f20 <USB_DeactivateEndpoint+0x208>)
 8002f14:	4323      	orrs	r3, r4
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	8013      	strh	r3, [r2, #0]
 8002f1a:	e086      	b.n	800302a <USB_DeactivateEndpoint+0x312>
 8002f1c:	ffff80c0 	.word	0xffff80c0
 8002f20:	ffff8080 	.word	0xffff8080
 8002f24:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4413      	add	r3, r2
 8002f32:	881b      	ldrh	r3, [r3, #0]
 8002f34:	b29c      	uxth	r4, r3
 8002f36:	4623      	mov	r3, r4
 8002f38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d014      	beq.n	8002f6a <USB_DeactivateEndpoint+0x252>
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	881b      	ldrh	r3, [r3, #0]
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f56:	b29c      	uxth	r4, r3
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	441a      	add	r2, r3
 8002f62:	4b35      	ldr	r3, [pc, #212]	; (8003038 <USB_DeactivateEndpoint+0x320>)
 8002f64:	4323      	orrs	r3, r4
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4413      	add	r3, r2
 8002f74:	881b      	ldrh	r3, [r3, #0]
 8002f76:	b29c      	uxth	r4, r3
 8002f78:	4623      	mov	r3, r4
 8002f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d014      	beq.n	8002fac <USB_DeactivateEndpoint+0x294>
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	4413      	add	r3, r2
 8002f8c:	881b      	ldrh	r3, [r3, #0]
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f98:	b29c      	uxth	r4, r3
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	441a      	add	r2, r3
 8002fa4:	4b25      	ldr	r3, [pc, #148]	; (800303c <USB_DeactivateEndpoint+0x324>)
 8002fa6:	4323      	orrs	r3, r4
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4413      	add	r3, r2
 8002fb6:	881b      	ldrh	r3, [r3, #0]
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fc2:	b29c      	uxth	r4, r3
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	441a      	add	r2, r3
 8002fce:	4b1a      	ldr	r3, [pc, #104]	; (8003038 <USB_DeactivateEndpoint+0x320>)
 8002fd0:	4323      	orrs	r3, r4
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	4413      	add	r3, r2
 8002fe0:	881b      	ldrh	r3, [r3, #0]
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fe8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fec:	b29c      	uxth	r4, r3
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	441a      	add	r2, r3
 8002ff8:	4b11      	ldr	r3, [pc, #68]	; (8003040 <USB_DeactivateEndpoint+0x328>)
 8002ffa:	4323      	orrs	r3, r4
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	4413      	add	r3, r2
 800300a:	881b      	ldrh	r3, [r3, #0]
 800300c:	b29b      	uxth	r3, r3
 800300e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003016:	b29c      	uxth	r4, r3
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	441a      	add	r2, r3
 8003022:	4b07      	ldr	r3, [pc, #28]	; (8003040 <USB_DeactivateEndpoint+0x328>)
 8003024:	4323      	orrs	r3, r4
 8003026:	b29b      	uxth	r3, r3
 8003028:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3708      	adds	r7, #8
 8003030:	46bd      	mov	sp, r7
 8003032:	bc90      	pop	{r4, r7}
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	ffffc080 	.word	0xffffc080
 800303c:	ffff80c0 	.word	0xffff80c0
 8003040:	ffff8080 	.word	0xffff8080

08003044 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003044:	b590      	push	{r4, r7, lr}
 8003046:	b08d      	sub	sp, #52	; 0x34
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	785b      	ldrb	r3, [r3, #1]
 8003052:	2b01      	cmp	r3, #1
 8003054:	f040 8160 	bne.w	8003318 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	699a      	ldr	r2, [r3, #24]
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	429a      	cmp	r2, r3
 8003062:	d909      	bls.n	8003078 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	699a      	ldr	r2, [r3, #24]
 800306e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003070:	1ad2      	subs	r2, r2, r3
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	619a      	str	r2, [r3, #24]
 8003076:	e005      	b.n	8003084 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	2200      	movs	r2, #0
 8003082:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	7b1b      	ldrb	r3, [r3, #12]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d119      	bne.n	80030c0 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	6959      	ldr	r1, [r3, #20]
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	88da      	ldrh	r2, [r3, #6]
 8003094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003096:	b29b      	uxth	r3, r3
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f000 fba2 	bl	80037e2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800309e:	687c      	ldr	r4, [r7, #4]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	441c      	add	r4, r3
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	011b      	lsls	r3, r3, #4
 80030b0:	4423      	add	r3, r4
 80030b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80030b6:	461c      	mov	r4, r3
 80030b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	8023      	strh	r3, [r4, #0]
 80030be:	e10f      	b.n	80032e0 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	4413      	add	r3, r2
 80030ca:	881b      	ldrh	r3, [r3, #0]
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d065      	beq.n	80031a2 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80030d6:	687c      	ldr	r4, [r7, #4]
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	785b      	ldrb	r3, [r3, #1]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d148      	bne.n	8003172 <USB_EPStartXfer+0x12e>
 80030e0:	687c      	ldr	r4, [r7, #4]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	441c      	add	r4, r3
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	011b      	lsls	r3, r3, #4
 80030f2:	4423      	add	r3, r4
 80030f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80030f8:	461c      	mov	r4, r3
 80030fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d10e      	bne.n	800311e <USB_EPStartXfer+0xda>
 8003100:	8823      	ldrh	r3, [r4, #0]
 8003102:	b29b      	uxth	r3, r3
 8003104:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003108:	b29b      	uxth	r3, r3
 800310a:	8023      	strh	r3, [r4, #0]
 800310c:	8823      	ldrh	r3, [r4, #0]
 800310e:	b29b      	uxth	r3, r3
 8003110:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003114:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003118:	b29b      	uxth	r3, r3
 800311a:	8023      	strh	r3, [r4, #0]
 800311c:	e03d      	b.n	800319a <USB_EPStartXfer+0x156>
 800311e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003120:	2b3e      	cmp	r3, #62	; 0x3e
 8003122:	d810      	bhi.n	8003146 <USB_EPStartXfer+0x102>
 8003124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003126:	085b      	lsrs	r3, r3, #1
 8003128:	627b      	str	r3, [r7, #36]	; 0x24
 800312a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	2b00      	cmp	r3, #0
 8003132:	d002      	beq.n	800313a <USB_EPStartXfer+0xf6>
 8003134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003136:	3301      	adds	r3, #1
 8003138:	627b      	str	r3, [r7, #36]	; 0x24
 800313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313c:	b29b      	uxth	r3, r3
 800313e:	029b      	lsls	r3, r3, #10
 8003140:	b29b      	uxth	r3, r3
 8003142:	8023      	strh	r3, [r4, #0]
 8003144:	e029      	b.n	800319a <USB_EPStartXfer+0x156>
 8003146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003148:	095b      	lsrs	r3, r3, #5
 800314a:	627b      	str	r3, [r7, #36]	; 0x24
 800314c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800314e:	f003 031f 	and.w	r3, r3, #31
 8003152:	2b00      	cmp	r3, #0
 8003154:	d102      	bne.n	800315c <USB_EPStartXfer+0x118>
 8003156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003158:	3b01      	subs	r3, #1
 800315a:	627b      	str	r3, [r7, #36]	; 0x24
 800315c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315e:	b29b      	uxth	r3, r3
 8003160:	029b      	lsls	r3, r3, #10
 8003162:	b29b      	uxth	r3, r3
 8003164:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003168:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800316c:	b29b      	uxth	r3, r3
 800316e:	8023      	strh	r3, [r4, #0]
 8003170:	e013      	b.n	800319a <USB_EPStartXfer+0x156>
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	785b      	ldrb	r3, [r3, #1]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d10f      	bne.n	800319a <USB_EPStartXfer+0x156>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003180:	b29b      	uxth	r3, r3
 8003182:	441c      	add	r4, r3
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	011b      	lsls	r3, r3, #4
 800318a:	4423      	add	r3, r4
 800318c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003190:	60fb      	str	r3, [r7, #12]
 8003192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003194:	b29a      	uxth	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	895b      	ldrh	r3, [r3, #10]
 800319e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80031a0:	e063      	b.n	800326a <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	785b      	ldrb	r3, [r3, #1]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d148      	bne.n	800323c <USB_EPStartXfer+0x1f8>
 80031aa:	687c      	ldr	r4, [r7, #4]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	441c      	add	r4, r3
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	011b      	lsls	r3, r3, #4
 80031bc:	4423      	add	r3, r4
 80031be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80031c2:	461c      	mov	r4, r3
 80031c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10e      	bne.n	80031e8 <USB_EPStartXfer+0x1a4>
 80031ca:	8823      	ldrh	r3, [r4, #0]
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	8023      	strh	r3, [r4, #0]
 80031d6:	8823      	ldrh	r3, [r4, #0]
 80031d8:	b29b      	uxth	r3, r3
 80031da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	8023      	strh	r3, [r4, #0]
 80031e6:	e03d      	b.n	8003264 <USB_EPStartXfer+0x220>
 80031e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ea:	2b3e      	cmp	r3, #62	; 0x3e
 80031ec:	d810      	bhi.n	8003210 <USB_EPStartXfer+0x1cc>
 80031ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f0:	085b      	lsrs	r3, r3, #1
 80031f2:	623b      	str	r3, [r7, #32]
 80031f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d002      	beq.n	8003204 <USB_EPStartXfer+0x1c0>
 80031fe:	6a3b      	ldr	r3, [r7, #32]
 8003200:	3301      	adds	r3, #1
 8003202:	623b      	str	r3, [r7, #32]
 8003204:	6a3b      	ldr	r3, [r7, #32]
 8003206:	b29b      	uxth	r3, r3
 8003208:	029b      	lsls	r3, r3, #10
 800320a:	b29b      	uxth	r3, r3
 800320c:	8023      	strh	r3, [r4, #0]
 800320e:	e029      	b.n	8003264 <USB_EPStartXfer+0x220>
 8003210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003212:	095b      	lsrs	r3, r3, #5
 8003214:	623b      	str	r3, [r7, #32]
 8003216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003218:	f003 031f 	and.w	r3, r3, #31
 800321c:	2b00      	cmp	r3, #0
 800321e:	d102      	bne.n	8003226 <USB_EPStartXfer+0x1e2>
 8003220:	6a3b      	ldr	r3, [r7, #32]
 8003222:	3b01      	subs	r3, #1
 8003224:	623b      	str	r3, [r7, #32]
 8003226:	6a3b      	ldr	r3, [r7, #32]
 8003228:	b29b      	uxth	r3, r3
 800322a:	029b      	lsls	r3, r3, #10
 800322c:	b29b      	uxth	r3, r3
 800322e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003232:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003236:	b29b      	uxth	r3, r3
 8003238:	8023      	strh	r3, [r4, #0]
 800323a:	e013      	b.n	8003264 <USB_EPStartXfer+0x220>
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	785b      	ldrb	r3, [r3, #1]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d10f      	bne.n	8003264 <USB_EPStartXfer+0x220>
 8003244:	687c      	ldr	r4, [r7, #4]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800324c:	b29b      	uxth	r3, r3
 800324e:	441c      	add	r4, r3
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	011b      	lsls	r3, r3, #4
 8003256:	4423      	add	r3, r4
 8003258:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800325c:	461c      	mov	r4, r3
 800325e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003260:	b29b      	uxth	r3, r3
 8003262:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	891b      	ldrh	r3, [r3, #8]
 8003268:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	6959      	ldr	r1, [r3, #20]
 800326e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003270:	b29b      	uxth	r3, r3
 8003272:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 fab4 	bl	80037e2 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	785b      	ldrb	r3, [r3, #1]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d115      	bne.n	80032ae <USB_EPStartXfer+0x26a>
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	4413      	add	r3, r2
 800328c:	881b      	ldrh	r3, [r3, #0]
 800328e:	b29b      	uxth	r3, r3
 8003290:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003294:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003298:	b29c      	uxth	r4, r3
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	441a      	add	r2, r3
 80032a4:	4b9a      	ldr	r3, [pc, #616]	; (8003510 <USB_EPStartXfer+0x4cc>)
 80032a6:	4323      	orrs	r3, r4
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	8013      	strh	r3, [r2, #0]
 80032ac:	e018      	b.n	80032e0 <USB_EPStartXfer+0x29c>
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	785b      	ldrb	r3, [r3, #1]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d114      	bne.n	80032e0 <USB_EPStartXfer+0x29c>
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4413      	add	r3, r2
 80032c0:	881b      	ldrh	r3, [r3, #0]
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032cc:	b29c      	uxth	r4, r3
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	441a      	add	r2, r3
 80032d8:	4b8e      	ldr	r3, [pc, #568]	; (8003514 <USB_EPStartXfer+0x4d0>)
 80032da:	4323      	orrs	r3, r4
 80032dc:	b29b      	uxth	r3, r3
 80032de:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4413      	add	r3, r2
 80032ea:	881b      	ldrh	r3, [r3, #0]
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032f6:	b29c      	uxth	r4, r3
 80032f8:	f084 0310 	eor.w	r3, r4, #16
 80032fc:	b29c      	uxth	r4, r3
 80032fe:	f084 0320 	eor.w	r3, r4, #32
 8003302:	b29c      	uxth	r4, r3
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	441a      	add	r2, r3
 800330e:	4b82      	ldr	r3, [pc, #520]	; (8003518 <USB_EPStartXfer+0x4d4>)
 8003310:	4323      	orrs	r3, r4
 8003312:	b29b      	uxth	r3, r3
 8003314:	8013      	strh	r3, [r2, #0]
 8003316:	e146      	b.n	80035a6 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	699a      	ldr	r2, [r3, #24]
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	429a      	cmp	r2, r3
 8003322:	d909      	bls.n	8003338 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	699a      	ldr	r2, [r3, #24]
 800332e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003330:	1ad2      	subs	r2, r2, r3
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	619a      	str	r2, [r3, #24]
 8003336:	e005      	b.n	8003344 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	2200      	movs	r2, #0
 8003342:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	7b1b      	ldrb	r3, [r3, #12]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d148      	bne.n	80033de <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800334c:	687c      	ldr	r4, [r7, #4]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003354:	b29b      	uxth	r3, r3
 8003356:	441c      	add	r4, r3
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	011b      	lsls	r3, r3, #4
 800335e:	4423      	add	r3, r4
 8003360:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003364:	461c      	mov	r4, r3
 8003366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003368:	2b00      	cmp	r3, #0
 800336a:	d10e      	bne.n	800338a <USB_EPStartXfer+0x346>
 800336c:	8823      	ldrh	r3, [r4, #0]
 800336e:	b29b      	uxth	r3, r3
 8003370:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003374:	b29b      	uxth	r3, r3
 8003376:	8023      	strh	r3, [r4, #0]
 8003378:	8823      	ldrh	r3, [r4, #0]
 800337a:	b29b      	uxth	r3, r3
 800337c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003380:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003384:	b29b      	uxth	r3, r3
 8003386:	8023      	strh	r3, [r4, #0]
 8003388:	e0f2      	b.n	8003570 <USB_EPStartXfer+0x52c>
 800338a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800338c:	2b3e      	cmp	r3, #62	; 0x3e
 800338e:	d810      	bhi.n	80033b2 <USB_EPStartXfer+0x36e>
 8003390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003392:	085b      	lsrs	r3, r3, #1
 8003394:	61fb      	str	r3, [r7, #28]
 8003396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b00      	cmp	r3, #0
 800339e:	d002      	beq.n	80033a6 <USB_EPStartXfer+0x362>
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	3301      	adds	r3, #1
 80033a4:	61fb      	str	r3, [r7, #28]
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	029b      	lsls	r3, r3, #10
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	8023      	strh	r3, [r4, #0]
 80033b0:	e0de      	b.n	8003570 <USB_EPStartXfer+0x52c>
 80033b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b4:	095b      	lsrs	r3, r3, #5
 80033b6:	61fb      	str	r3, [r7, #28]
 80033b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ba:	f003 031f 	and.w	r3, r3, #31
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d102      	bne.n	80033c8 <USB_EPStartXfer+0x384>
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	3b01      	subs	r3, #1
 80033c6:	61fb      	str	r3, [r7, #28]
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	029b      	lsls	r3, r3, #10
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033d8:	b29b      	uxth	r3, r3
 80033da:	8023      	strh	r3, [r4, #0]
 80033dc:	e0c8      	b.n	8003570 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	785b      	ldrb	r3, [r3, #1]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d148      	bne.n	8003478 <USB_EPStartXfer+0x434>
 80033e6:	687c      	ldr	r4, [r7, #4]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	441c      	add	r4, r3
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	011b      	lsls	r3, r3, #4
 80033f8:	4423      	add	r3, r4
 80033fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80033fe:	461c      	mov	r4, r3
 8003400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10e      	bne.n	8003424 <USB_EPStartXfer+0x3e0>
 8003406:	8823      	ldrh	r3, [r4, #0]
 8003408:	b29b      	uxth	r3, r3
 800340a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800340e:	b29b      	uxth	r3, r3
 8003410:	8023      	strh	r3, [r4, #0]
 8003412:	8823      	ldrh	r3, [r4, #0]
 8003414:	b29b      	uxth	r3, r3
 8003416:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800341a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800341e:	b29b      	uxth	r3, r3
 8003420:	8023      	strh	r3, [r4, #0]
 8003422:	e03d      	b.n	80034a0 <USB_EPStartXfer+0x45c>
 8003424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003426:	2b3e      	cmp	r3, #62	; 0x3e
 8003428:	d810      	bhi.n	800344c <USB_EPStartXfer+0x408>
 800342a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800342c:	085b      	lsrs	r3, r3, #1
 800342e:	61bb      	str	r3, [r7, #24]
 8003430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b00      	cmp	r3, #0
 8003438:	d002      	beq.n	8003440 <USB_EPStartXfer+0x3fc>
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	3301      	adds	r3, #1
 800343e:	61bb      	str	r3, [r7, #24]
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	b29b      	uxth	r3, r3
 8003444:	029b      	lsls	r3, r3, #10
 8003446:	b29b      	uxth	r3, r3
 8003448:	8023      	strh	r3, [r4, #0]
 800344a:	e029      	b.n	80034a0 <USB_EPStartXfer+0x45c>
 800344c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344e:	095b      	lsrs	r3, r3, #5
 8003450:	61bb      	str	r3, [r7, #24]
 8003452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003454:	f003 031f 	and.w	r3, r3, #31
 8003458:	2b00      	cmp	r3, #0
 800345a:	d102      	bne.n	8003462 <USB_EPStartXfer+0x41e>
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	3b01      	subs	r3, #1
 8003460:	61bb      	str	r3, [r7, #24]
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	b29b      	uxth	r3, r3
 8003466:	029b      	lsls	r3, r3, #10
 8003468:	b29b      	uxth	r3, r3
 800346a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800346e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003472:	b29b      	uxth	r3, r3
 8003474:	8023      	strh	r3, [r4, #0]
 8003476:	e013      	b.n	80034a0 <USB_EPStartXfer+0x45c>
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	785b      	ldrb	r3, [r3, #1]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d10f      	bne.n	80034a0 <USB_EPStartXfer+0x45c>
 8003480:	687c      	ldr	r4, [r7, #4]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003488:	b29b      	uxth	r3, r3
 800348a:	441c      	add	r4, r3
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	011b      	lsls	r3, r3, #4
 8003492:	4423      	add	r3, r4
 8003494:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003498:	461c      	mov	r4, r3
 800349a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800349c:	b29b      	uxth	r3, r3
 800349e:	8023      	strh	r3, [r4, #0]
 80034a0:	687c      	ldr	r4, [r7, #4]
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	785b      	ldrb	r3, [r3, #1]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d14e      	bne.n	8003548 <USB_EPStartXfer+0x504>
 80034aa:	687c      	ldr	r4, [r7, #4]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	441c      	add	r4, r3
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	011b      	lsls	r3, r3, #4
 80034bc:	4423      	add	r3, r4
 80034be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80034c2:	461c      	mov	r4, r3
 80034c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10e      	bne.n	80034e8 <USB_EPStartXfer+0x4a4>
 80034ca:	8823      	ldrh	r3, [r4, #0]
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	8023      	strh	r3, [r4, #0]
 80034d6:	8823      	ldrh	r3, [r4, #0]
 80034d8:	b29b      	uxth	r3, r3
 80034da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	8023      	strh	r3, [r4, #0]
 80034e6:	e043      	b.n	8003570 <USB_EPStartXfer+0x52c>
 80034e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ea:	2b3e      	cmp	r3, #62	; 0x3e
 80034ec:	d816      	bhi.n	800351c <USB_EPStartXfer+0x4d8>
 80034ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f0:	085b      	lsrs	r3, r3, #1
 80034f2:	617b      	str	r3, [r7, #20]
 80034f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d002      	beq.n	8003504 <USB_EPStartXfer+0x4c0>
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	3301      	adds	r3, #1
 8003502:	617b      	str	r3, [r7, #20]
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	b29b      	uxth	r3, r3
 8003508:	029b      	lsls	r3, r3, #10
 800350a:	b29b      	uxth	r3, r3
 800350c:	8023      	strh	r3, [r4, #0]
 800350e:	e02f      	b.n	8003570 <USB_EPStartXfer+0x52c>
 8003510:	ffff80c0 	.word	0xffff80c0
 8003514:	ffffc080 	.word	0xffffc080
 8003518:	ffff8080 	.word	0xffff8080
 800351c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800351e:	095b      	lsrs	r3, r3, #5
 8003520:	617b      	str	r3, [r7, #20]
 8003522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003524:	f003 031f 	and.w	r3, r3, #31
 8003528:	2b00      	cmp	r3, #0
 800352a:	d102      	bne.n	8003532 <USB_EPStartXfer+0x4ee>
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	3b01      	subs	r3, #1
 8003530:	617b      	str	r3, [r7, #20]
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	b29b      	uxth	r3, r3
 8003536:	029b      	lsls	r3, r3, #10
 8003538:	b29b      	uxth	r3, r3
 800353a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800353e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003542:	b29b      	uxth	r3, r3
 8003544:	8023      	strh	r3, [r4, #0]
 8003546:	e013      	b.n	8003570 <USB_EPStartXfer+0x52c>
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	785b      	ldrb	r3, [r3, #1]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d10f      	bne.n	8003570 <USB_EPStartXfer+0x52c>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003556:	b29b      	uxth	r3, r3
 8003558:	441c      	add	r4, r3
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	011b      	lsls	r3, r3, #4
 8003560:	4423      	add	r3, r4
 8003562:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003566:	613b      	str	r3, [r7, #16]
 8003568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800356a:	b29a      	uxth	r2, r3
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	4413      	add	r3, r2
 800357a:	881b      	ldrh	r3, [r3, #0]
 800357c:	b29b      	uxth	r3, r3
 800357e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003586:	b29c      	uxth	r4, r3
 8003588:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800358c:	b29c      	uxth	r4, r3
 800358e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003592:	b29c      	uxth	r4, r3
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	441a      	add	r2, r3
 800359e:	4b04      	ldr	r3, [pc, #16]	; (80035b0 <USB_EPStartXfer+0x56c>)
 80035a0:	4323      	orrs	r3, r4
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3734      	adds	r7, #52	; 0x34
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd90      	pop	{r4, r7, pc}
 80035b0:	ffff8080 	.word	0xffff8080

080035b4 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80035b4:	b490      	push	{r4, r7}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	785b      	ldrb	r3, [r3, #1]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d018      	beq.n	80035f8 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	4413      	add	r3, r2
 80035d0:	881b      	ldrh	r3, [r3, #0]
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035dc:	b29c      	uxth	r4, r3
 80035de:	f084 0310 	eor.w	r3, r4, #16
 80035e2:	b29c      	uxth	r4, r3
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	441a      	add	r2, r3
 80035ee:	4b11      	ldr	r3, [pc, #68]	; (8003634 <USB_EPSetStall+0x80>)
 80035f0:	4323      	orrs	r3, r4
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	8013      	strh	r3, [r2, #0]
 80035f6:	e017      	b.n	8003628 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4413      	add	r3, r2
 8003602:	881b      	ldrh	r3, [r3, #0]
 8003604:	b29b      	uxth	r3, r3
 8003606:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800360a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800360e:	b29c      	uxth	r4, r3
 8003610:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003614:	b29c      	uxth	r4, r3
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	441a      	add	r2, r3
 8003620:	4b04      	ldr	r3, [pc, #16]	; (8003634 <USB_EPSetStall+0x80>)
 8003622:	4323      	orrs	r3, r4
 8003624:	b29b      	uxth	r3, r3
 8003626:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3708      	adds	r7, #8
 800362e:	46bd      	mov	sp, r7
 8003630:	bc90      	pop	{r4, r7}
 8003632:	4770      	bx	lr
 8003634:	ffff8080 	.word	0xffff8080

08003638 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003638:	b490      	push	{r4, r7}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	7b1b      	ldrb	r3, [r3, #12]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d17d      	bne.n	8003746 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	785b      	ldrb	r3, [r3, #1]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d03d      	beq.n	80036ce <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	4413      	add	r3, r2
 800365c:	881b      	ldrh	r3, [r3, #0]
 800365e:	b29c      	uxth	r4, r3
 8003660:	4623      	mov	r3, r4
 8003662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003666:	2b00      	cmp	r3, #0
 8003668:	d014      	beq.n	8003694 <USB_EPClearStall+0x5c>
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4413      	add	r3, r2
 8003674:	881b      	ldrh	r3, [r3, #0]
 8003676:	b29b      	uxth	r3, r3
 8003678:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800367c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003680:	b29c      	uxth	r4, r3
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	441a      	add	r2, r3
 800368c:	4b31      	ldr	r3, [pc, #196]	; (8003754 <USB_EPClearStall+0x11c>)
 800368e:	4323      	orrs	r3, r4
 8003690:	b29b      	uxth	r3, r3
 8003692:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	78db      	ldrb	r3, [r3, #3]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d054      	beq.n	8003746 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	4413      	add	r3, r2
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036b2:	b29c      	uxth	r4, r3
 80036b4:	f084 0320 	eor.w	r3, r4, #32
 80036b8:	b29c      	uxth	r4, r3
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	441a      	add	r2, r3
 80036c4:	4b24      	ldr	r3, [pc, #144]	; (8003758 <USB_EPClearStall+0x120>)
 80036c6:	4323      	orrs	r3, r4
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	8013      	strh	r3, [r2, #0]
 80036cc:	e03b      	b.n	8003746 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	4413      	add	r3, r2
 80036d8:	881b      	ldrh	r3, [r3, #0]
 80036da:	b29c      	uxth	r4, r3
 80036dc:	4623      	mov	r3, r4
 80036de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d014      	beq.n	8003710 <USB_EPClearStall+0xd8>
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	4413      	add	r3, r2
 80036f0:	881b      	ldrh	r3, [r3, #0]
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036fc:	b29c      	uxth	r4, r3
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	441a      	add	r2, r3
 8003708:	4b14      	ldr	r3, [pc, #80]	; (800375c <USB_EPClearStall+0x124>)
 800370a:	4323      	orrs	r3, r4
 800370c:	b29b      	uxth	r3, r3
 800370e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	4413      	add	r3, r2
 800371a:	881b      	ldrh	r3, [r3, #0]
 800371c:	b29b      	uxth	r3, r3
 800371e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003726:	b29c      	uxth	r4, r3
 8003728:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800372c:	b29c      	uxth	r4, r3
 800372e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003732:	b29c      	uxth	r4, r3
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	441a      	add	r2, r3
 800373e:	4b06      	ldr	r3, [pc, #24]	; (8003758 <USB_EPClearStall+0x120>)
 8003740:	4323      	orrs	r3, r4
 8003742:	b29b      	uxth	r3, r3
 8003744:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3708      	adds	r7, #8
 800374c:	46bd      	mov	sp, r7
 800374e:	bc90      	pop	{r4, r7}
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	ffff80c0 	.word	0xffff80c0
 8003758:	ffff8080 	.word	0xffff8080
 800375c:	ffffc080 	.word	0xffffc080

08003760 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	460b      	mov	r3, r1
 800376a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800376c:	78fb      	ldrb	r3, [r7, #3]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d103      	bne.n	800377a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2280      	movs	r2, #128	; 0x80
 8003776:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	bc80      	pop	{r7}
 8003784:	4770      	bx	lr

08003786 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8003786:	b480      	push	{r7}
 8003788:	b083      	sub	sp, #12
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	bc80      	pop	{r7}
 8003798:	4770      	bx	lr

0800379a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800379a:	b480      	push	{r7}
 800379c:	b083      	sub	sp, #12
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bc80      	pop	{r7}
 80037ac:	4770      	bx	lr

080037ae <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b085      	sub	sp, #20
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80037bc:	b29b      	uxth	r3, r3
 80037be:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80037c0:	68fb      	ldr	r3, [r7, #12]
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3714      	adds	r7, #20
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bc80      	pop	{r7}
 80037ca:	4770      	bx	lr

080037cc <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	bc80      	pop	{r7}
 80037e0:	4770      	bx	lr

080037e2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80037e2:	b480      	push	{r7}
 80037e4:	b08d      	sub	sp, #52	; 0x34
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	60f8      	str	r0, [r7, #12]
 80037ea:	60b9      	str	r1, [r7, #8]
 80037ec:	4611      	mov	r1, r2
 80037ee:	461a      	mov	r2, r3
 80037f0:	460b      	mov	r3, r1
 80037f2:	80fb      	strh	r3, [r7, #6]
 80037f4:	4613      	mov	r3, r2
 80037f6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80037f8:	88bb      	ldrh	r3, [r7, #4]
 80037fa:	3301      	adds	r3, #1
 80037fc:	085b      	lsrs	r3, r3, #1
 80037fe:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003808:	88fb      	ldrh	r3, [r7, #6]
 800380a:	005a      	lsls	r2, r3, #1
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	4413      	add	r3, r2
 8003810:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003814:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8003816:	6a3b      	ldr	r3, [r7, #32]
 8003818:	62fb      	str	r3, [r7, #44]	; 0x2c
 800381a:	e01e      	b.n	800385a <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800381c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8003822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003824:	3301      	adds	r3, #1
 8003826:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8003828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	b29b      	uxth	r3, r3
 800382e:	021b      	lsls	r3, r3, #8
 8003830:	b29b      	uxth	r3, r3
 8003832:	461a      	mov	r2, r3
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	4313      	orrs	r3, r2
 8003838:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	b29a      	uxth	r2, r3
 800383e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003840:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8003842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003844:	3302      	adds	r3, #2
 8003846:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8003848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800384a:	3302      	adds	r3, #2
 800384c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800384e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003850:	3301      	adds	r3, #1
 8003852:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8003854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003856:	3b01      	subs	r3, #1
 8003858:	62fb      	str	r3, [r7, #44]	; 0x2c
 800385a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1dd      	bne.n	800381c <USB_WritePMA+0x3a>
  }
}
 8003860:	bf00      	nop
 8003862:	3734      	adds	r7, #52	; 0x34
 8003864:	46bd      	mov	sp, r7
 8003866:	bc80      	pop	{r7}
 8003868:	4770      	bx	lr

0800386a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800386a:	b480      	push	{r7}
 800386c:	b08b      	sub	sp, #44	; 0x2c
 800386e:	af00      	add	r7, sp, #0
 8003870:	60f8      	str	r0, [r7, #12]
 8003872:	60b9      	str	r1, [r7, #8]
 8003874:	4611      	mov	r1, r2
 8003876:	461a      	mov	r2, r3
 8003878:	460b      	mov	r3, r1
 800387a:	80fb      	strh	r3, [r7, #6]
 800387c:	4613      	mov	r3, r2
 800387e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8003880:	88bb      	ldrh	r3, [r7, #4]
 8003882:	085b      	lsrs	r3, r3, #1
 8003884:	b29b      	uxth	r3, r3
 8003886:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003890:	88fb      	ldrh	r3, [r7, #6]
 8003892:	005a      	lsls	r2, r3, #1
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	4413      	add	r3, r2
 8003898:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800389c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	627b      	str	r3, [r7, #36]	; 0x24
 80038a2:	e01b      	b.n	80038dc <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80038a4:	6a3b      	ldr	r3, [r7, #32]
 80038a6:	881b      	ldrh	r3, [r3, #0]
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80038ac:	6a3b      	ldr	r3, [r7, #32]
 80038ae:	3302      	adds	r3, #2
 80038b0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	b2da      	uxtb	r2, r3
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	3301      	adds	r3, #1
 80038be:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	0a1b      	lsrs	r3, r3, #8
 80038c4:	b2da      	uxtb	r2, r3
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	3301      	adds	r3, #1
 80038ce:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80038d0:	6a3b      	ldr	r3, [r7, #32]
 80038d2:	3302      	adds	r3, #2
 80038d4:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80038d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d8:	3b01      	subs	r3, #1
 80038da:	627b      	str	r3, [r7, #36]	; 0x24
 80038dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1e0      	bne.n	80038a4 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80038e2:	88bb      	ldrh	r3, [r7, #4]
 80038e4:	f003 0301 	and.w	r3, r3, #1
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d007      	beq.n	80038fe <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80038ee:	6a3b      	ldr	r3, [r7, #32]
 80038f0:	881b      	ldrh	r3, [r3, #0]
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	b2da      	uxtb	r2, r3
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	701a      	strb	r2, [r3, #0]
  }
}
 80038fe:	bf00      	nop
 8003900:	372c      	adds	r7, #44	; 0x2c
 8003902:	46bd      	mov	sp, r7
 8003904:	bc80      	pop	{r7}
 8003906:	4770      	bx	lr

08003908 <USBD_COMPOSITE_Init>:
		0x00,
};

static uint8_t  USBD_COMPOSITE_Init(USBD_HandleTypeDef *pdev,
		uint8_t cfgidx)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	460b      	mov	r3, r1
 8003912:	70fb      	strb	r3, [r7, #3]
	/* Mouse initialization */
	uint8_t ret = USBD_MOUSE_Init (pdev, cfgidx);
 8003914:	78fb      	ldrb	r3, [r7, #3]
 8003916:	4619      	mov	r1, r3
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 faad 	bl	8003e78 <USBD_MOUSE_Init>
 800391e:	4603      	mov	r3, r0
 8003920:	73fb      	strb	r3, [r7, #15]
	if(ret != USBD_OK)
 8003922:	7bfb      	ldrb	r3, [r7, #15]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d001      	beq.n	800392c <USBD_COMPOSITE_Init+0x24>
		return ret;
 8003928:	7bfb      	ldrb	r3, [r7, #15]
 800392a:	e00c      	b.n	8003946 <USBD_COMPOSITE_Init+0x3e>

	/* Custom HID initialization */
	ret = USBD_CUSTOM_HID_Init (pdev, cfgidx);
 800392c:	78fb      	ldrb	r3, [r7, #3]
 800392e:	4619      	mov	r1, r3
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 f8d5 	bl	8003ae0 <USBD_CUSTOM_HID_Init>
 8003936:	4603      	mov	r3, r0
 8003938:	73fb      	strb	r3, [r7, #15]
	if(ret != USBD_OK)
 800393a:	7bfb      	ldrb	r3, [r7, #15]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d001      	beq.n	8003944 <USBD_COMPOSITE_Init+0x3c>
		return ret;
 8003940:	7bfb      	ldrb	r3, [r7, #15]
 8003942:	e000      	b.n	8003946 <USBD_COMPOSITE_Init+0x3e>

	return USBD_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <USBD_COMPOSITE_DeInit>:
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t  USBD_COMPOSITE_DeInit(USBD_HandleTypeDef *pdev,
		uint8_t cfgidx)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b084      	sub	sp, #16
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
 8003956:	460b      	mov	r3, r1
 8003958:	70fb      	strb	r3, [r7, #3]
	/* Mouse initialization */
	uint8_t ret = USBD_MOUSE_DeInit (pdev, cfgidx);
 800395a:	78fb      	ldrb	r3, [r7, #3]
 800395c:	4619      	mov	r1, r3
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 fab0 	bl	8003ec4 <USBD_MOUSE_DeInit>
 8003964:	4603      	mov	r3, r0
 8003966:	73fb      	strb	r3, [r7, #15]
	if(ret != USBD_OK)
 8003968:	7bfb      	ldrb	r3, [r7, #15]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <USBD_COMPOSITE_DeInit+0x24>
		return ret;
 800396e:	7bfb      	ldrb	r3, [r7, #15]
 8003970:	e00c      	b.n	800398c <USBD_COMPOSITE_DeInit+0x3e>

	/* Custom HID initialization */
	ret = USBD_CUSTOM_HID_DeInit (pdev, cfgidx);
 8003972:	78fb      	ldrb	r3, [r7, #3]
 8003974:	4619      	mov	r1, r3
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 f8f2 	bl	8003b60 <USBD_CUSTOM_HID_DeInit>
 800397c:	4603      	mov	r3, r0
 800397e:	73fb      	strb	r3, [r7, #15]
	if(ret != USBD_OK)
 8003980:	7bfb      	ldrb	r3, [r7, #15]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <USBD_COMPOSITE_DeInit+0x3c>
		return ret;
 8003986:	7bfb      	ldrb	r3, [r7, #15]
 8003988:	e000      	b.n	800398c <USBD_COMPOSITE_DeInit+0x3e>

	return USBD_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <USBD_COMPOSITE_Setup>:
 * @param  req: usb requests
 * @retval status
 */
static uint8_t  USBD_COMPOSITE_Setup(USBD_HandleTypeDef *pdev,
		USBD_SetupReqTypedef *req)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
	// Route requests to MSC interface or its endpoints to MSC class implementaion
	if(((req->bmRequest & USB_REQ_RECIPIENT_MASK) == USB_REQ_RECIPIENT_INTERFACE && req->wIndex == MOUSE_INTERFACE_IDX) ||
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	f003 0303 	and.w	r3, r3, #3
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d103      	bne.n	80039b2 <USBD_COMPOSITE_Setup+0x1e>
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	889b      	ldrh	r3, [r3, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00b      	beq.n	80039ca <USBD_COMPOSITE_Setup+0x36>
			((req->bmRequest & USB_REQ_RECIPIENT_MASK) == USB_REQ_RECIPIENT_ENDPOINT && ((req->wIndex & 0x7F) == MOUSE_EP_IDX)))
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	f003 0303 	and.w	r3, r3, #3
	if(((req->bmRequest & USB_REQ_RECIPIENT_MASK) == USB_REQ_RECIPIENT_INTERFACE && req->wIndex == MOUSE_INTERFACE_IDX) ||
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d10b      	bne.n	80039d6 <USBD_COMPOSITE_Setup+0x42>
			((req->bmRequest & USB_REQ_RECIPIENT_MASK) == USB_REQ_RECIPIENT_ENDPOINT && ((req->wIndex & 0x7F) == MOUSE_EP_IDX)))
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	889b      	ldrh	r3, [r3, #4]
 80039c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d105      	bne.n	80039d6 <USBD_COMPOSITE_Setup+0x42>
	{
		return USBD_MOUSE_Setup(pdev, req);
 80039ca:	6839      	ldr	r1, [r7, #0]
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 fa95 	bl	8003efc <USBD_MOUSE_Setup>
 80039d2:	4603      	mov	r3, r0
 80039d4:	e004      	b.n	80039e0 <USBD_COMPOSITE_Setup+0x4c>
	}

	return USBD_CUSTOM_HID_Setup(pdev, req);
 80039d6:	6839      	ldr	r1, [r7, #0]
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 f8e9 	bl	8003bb0 <USBD_CUSTOM_HID_Setup>
 80039de:	4603      	mov	r3, r0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3708      	adds	r7, #8
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <USBD_COMPOSITE_GetFSCfgDesc>:
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t  *USBD_COMPOSITE_GetFSCfgDesc(uint16_t *length)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
	*length = sizeof(USBD_COMPOSITE_CfgFSDesc);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2242      	movs	r2, #66	; 0x42
 80039f4:	801a      	strh	r2, [r3, #0]
	return USBD_COMPOSITE_CfgFSDesc;
 80039f6:	4b03      	ldr	r3, [pc, #12]	; (8003a04 <USBD_COMPOSITE_GetFSCfgDesc+0x1c>)
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bc80      	pop	{r7}
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	20000044 	.word	0x20000044

08003a08 <USBD_COMPOSITE_GetHSCfgDesc>:
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t  *USBD_COMPOSITE_GetHSCfgDesc(uint16_t *length)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
	*length = sizeof(USBD_COMPOSITE_CfgHSDesc);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2242      	movs	r2, #66	; 0x42
 8003a14:	801a      	strh	r2, [r3, #0]
	return USBD_COMPOSITE_CfgHSDesc;
 8003a16:	4b03      	ldr	r3, [pc, #12]	; (8003a24 <USBD_COMPOSITE_GetHSCfgDesc+0x1c>)
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bc80      	pop	{r7}
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	20000088 	.word	0x20000088

08003a28 <USBD_COMPOSITE_GetOtherSpeedCfgDesc>:
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t  *USBD_COMPOSITE_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
	*length = sizeof(USBD_COMPOSITE_OtherSpeedCfgDesc);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2242      	movs	r2, #66	; 0x42
 8003a34:	801a      	strh	r2, [r3, #0]
	return USBD_COMPOSITE_OtherSpeedCfgDesc;
 8003a36:	4b03      	ldr	r3, [pc, #12]	; (8003a44 <USBD_COMPOSITE_GetOtherSpeedCfgDesc+0x1c>)
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bc80      	pop	{r7}
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	200000cc 	.word	0x200000cc

08003a48 <USBD_COMPOSITE_DataIn>:
 * @param  epnum: endpoint index
 * @retval status
 */
static uint8_t  USBD_COMPOSITE_DataIn(USBD_HandleTypeDef *pdev,
		uint8_t epnum)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	460b      	mov	r3, r1
 8003a52:	70fb      	strb	r3, [r7, #3]
	if(epnum == MOUSE_EP_IDX)
 8003a54:	78fb      	ldrb	r3, [r7, #3]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d106      	bne.n	8003a68 <USBD_COMPOSITE_DataIn+0x20>
		return USBD_MOUSE_DataIn(pdev, epnum);
 8003a5a:	78fb      	ldrb	r3, [r7, #3]
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 fb4a 	bl	80040f8 <USBD_MOUSE_DataIn>
 8003a64:	4603      	mov	r3, r0
 8003a66:	e005      	b.n	8003a74 <USBD_COMPOSITE_DataIn+0x2c>

	return USBD_CUSTOM_HID_DataIn(pdev, epnum);
 8003a68:	78fb      	ldrb	r3, [r7, #3]
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 f99f 	bl	8003db0 <USBD_CUSTOM_HID_DataIn>
 8003a72:	4603      	mov	r3, r0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3708      	adds	r7, #8
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <USBD_COMPOSITE_DataOut>:
 * @param  epnum: endpoint index
 * @retval status
 */
static uint8_t  USBD_COMPOSITE_DataOut(USBD_HandleTypeDef *pdev,
		uint8_t epnum)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	460b      	mov	r3, r1
 8003a86:	70fb      	strb	r3, [r7, #3]
	if(epnum == MOUSE_EP_IDX)
 8003a88:	78fb      	ldrb	r3, [r7, #3]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d101      	bne.n	8003a92 <USBD_COMPOSITE_DataOut+0x16>
		return USBD_OK; // USBD_MOUSE_DataOut(pdev, epnum); // не нужна для мыши
 8003a8e:	2300      	movs	r3, #0
 8003a90:	e005      	b.n	8003a9e <USBD_COMPOSITE_DataOut+0x22>

	return USBD_CUSTOM_HID_DataOut(pdev, epnum);
 8003a92:	78fb      	ldrb	r3, [r7, #3]
 8003a94:	4619      	mov	r1, r3
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f99b 	bl	8003dd2 <USBD_CUSTOM_HID_DataOut>
 8003a9c:	4603      	mov	r3, r0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3708      	adds	r7, #8
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <USBD_COMPOSITE_EP0_RxReady>:
 *         Handles control request data.
 * @param  pdev: device instance
 * @retval status
 */
static uint8_t USBD_COMPOSITE_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b082      	sub	sp, #8
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
	return USBD_CUSTOM_HID_EP0_RxReady(pdev);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 f9ae 	bl	8003e10 <USBD_CUSTOM_HID_EP0_RxReady>
 8003ab4:	4603      	mov	r3, r0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
	...

08003ac0 <USBD_COMPOSITE_GetDeviceQualifierDesc>:
 *         return Device Qualifier descriptor
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t  *USBD_COMPOSITE_GetDeviceQualifierDesc(uint16_t *length)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
	*length = sizeof(USBD_COMPOSITE_DeviceQualifierDesc);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	220a      	movs	r2, #10
 8003acc:	801a      	strh	r2, [r3, #0]
	return USBD_COMPOSITE_DeviceQualifierDesc;
 8003ace:	4b03      	ldr	r3, [pc, #12]	; (8003adc <USBD_COMPOSITE_GetDeviceQualifierDesc+0x1c>)
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bc80      	pop	{r7}
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	20000110 	.word	0x20000110

08003ae0 <USBD_CUSTOM_HID_Init>:
 * @param  cfgidx: Configuration index
 * @retval status
 */
uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
		uint8_t cfgidx)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	460b      	mov	r3, r1
 8003aea:	70fb      	strb	r3, [r7, #3]
	uint8_t ret = 0U;
 8003aec:	2300      	movs	r3, #0
 8003aee:	73fb      	strb	r3, [r7, #15]
	USBD_CUSTOM_HID_HandleTypeDef     *hhid;

	/* Open EP IN */
	USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8003af0:	2302      	movs	r3, #2
 8003af2:	2203      	movs	r2, #3
 8003af4:	2182      	movs	r1, #130	; 0x82
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f004 fab9 	bl	800806e <USBD_LL_OpenEP>
			CUSTOM_HID_EPIN_SIZE);

	pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	641a      	str	r2, [r3, #64]	; 0x40

	/* Open EP OUT */
	USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8003b02:	2302      	movs	r3, #2
 8003b04:	2203      	movs	r2, #3
 8003b06:	2103      	movs	r1, #3
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f004 fab0 	bl	800806e <USBD_LL_OpenEP>
			CUSTOM_HID_EPOUT_SIZE);

	pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194

	//pdev->pClassDataCustomHID = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
	pdev->pClassDataCustomHID = &customHIDInstance;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a10      	ldr	r2, [pc, #64]	; (8003b5c <USBD_CUSTOM_HID_Init+0x7c>)
 8003b1a:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

	if (pdev->pClassDataCustomHID == NULL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d102      	bne.n	8003b2e <USBD_CUSTOM_HID_Init+0x4e>
	{
		ret = 1U;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	73fb      	strb	r3, [r7, #15]
 8003b2c:	e011      	b.n	8003b52 <USBD_CUSTOM_HID_Init+0x72>
	}
	else
	{
		hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassDataCustomHID;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8003b34:	60bb      	str	r3, [r7, #8]

		hhid->state = CUSTOM_HID_IDLE;
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	751a      	strb	r2, [r3, #20]
		((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pClassSpecificInterfaceCustomHID)->Init();
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	4798      	blx	r3

		/* Prepare Out endpoint to receive 1st packet */
		USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8003b46:	68ba      	ldr	r2, [r7, #8]
 8003b48:	2302      	movs	r3, #2
 8003b4a:	2103      	movs	r1, #3
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f004 fb78 	bl	8008242 <USBD_LL_PrepareReceive>
				USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
	}

	return ret;
 8003b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	20001b88 	.word	0x20001b88

08003b60 <USBD_CUSTOM_HID_DeInit>:
 * @param  cfgidx: Configuration index
 * @retval status
 */
uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
		uint8_t cfgidx)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	460b      	mov	r3, r1
 8003b6a:	70fb      	strb	r3, [r7, #3]
	/* Close CUSTOM_HID EP IN */
	USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8003b6c:	2182      	movs	r1, #130	; 0x82
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f004 faa3 	bl	80080ba <USBD_LL_CloseEP>
	pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	641a      	str	r2, [r3, #64]	; 0x40

	/* Close CUSTOM_HID EP OUT */
	USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8003b7a:	2103      	movs	r1, #3
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f004 fa9c 	bl	80080ba <USBD_LL_CloseEP>
	pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194

	/* FRee allocated memory */
	if (pdev->pClassDataCustomHID != NULL)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d008      	beq.n	8003ba6 <USBD_CUSTOM_HID_DeInit+0x46>
	{
		((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pClassSpecificInterfaceCustomHID)->DeInit();
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	4798      	blx	r3
		// USBD_free(pdev->pClassDataCustomHID); // Статическое выделение
		pdev->pClassDataCustomHID = NULL;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
	}
	return USBD_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3708      	adds	r7, #8
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <USBD_CUSTOM_HID_Setup>:
 * @param  req: usb requests
 * @retval status
 */
uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
		USBD_SetupReqTypedef *req)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b088      	sub	sp, #32
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
	USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCustomHID;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8003bc0:	613b      	str	r3, [r7, #16]
	uint16_t len = 0U;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	83fb      	strh	r3, [r7, #30]
	uint8_t  *pbuf = NULL;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	61bb      	str	r3, [r7, #24]
	uint16_t status_info = 0U;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	81fb      	strh	r3, [r7, #14]
	uint8_t ret = USBD_OK;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	75fb      	strb	r3, [r7, #23]

	switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d051      	beq.n	8003c82 <USBD_CUSTOM_HID_Setup+0xd2>
 8003bde:	2b20      	cmp	r3, #32
 8003be0:	f040 80d8 	bne.w	8003d94 <USBD_CUSTOM_HID_Setup+0x1e4>
	{
	case USB_REQ_TYPE_CLASS :
		switch (req->bRequest)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	785b      	ldrb	r3, [r3, #1]
 8003be8:	3b02      	subs	r3, #2
 8003bea:	2b09      	cmp	r3, #9
 8003bec:	d841      	bhi.n	8003c72 <USBD_CUSTOM_HID_Setup+0xc2>
 8003bee:	a201      	add	r2, pc, #4	; (adr r2, 8003bf4 <USBD_CUSTOM_HID_Setup+0x44>)
 8003bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf4:	08003c4d 	.word	0x08003c4d
 8003bf8:	08003c2b 	.word	0x08003c2b
 8003bfc:	08003c73 	.word	0x08003c73
 8003c00:	08003c73 	.word	0x08003c73
 8003c04:	08003c73 	.word	0x08003c73
 8003c08:	08003c73 	.word	0x08003c73
 8003c0c:	08003c73 	.word	0x08003c73
 8003c10:	08003c5d 	.word	0x08003c5d
 8003c14:	08003c3b 	.word	0x08003c3b
 8003c18:	08003c1d 	.word	0x08003c1d
		{
		case CUSTOM_HID_REQ_SET_PROTOCOL:
			hhid->Protocol = (uint8_t)(req->wValue);
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	885b      	ldrh	r3, [r3, #2]
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	461a      	mov	r2, r3
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	605a      	str	r2, [r3, #4]
			break;
 8003c28:	e02a      	b.n	8003c80 <USBD_CUSTOM_HID_Setup+0xd0>

		case CUSTOM_HID_REQ_GET_PROTOCOL:
			USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	3304      	adds	r3, #4
 8003c2e:	2201      	movs	r2, #1
 8003c30:	4619      	mov	r1, r3
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f001 fa7a 	bl	800512c <USBD_CtlSendData>
			break;
 8003c38:	e022      	b.n	8003c80 <USBD_CUSTOM_HID_Setup+0xd0>

		case CUSTOM_HID_REQ_SET_IDLE:
			hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	885b      	ldrh	r3, [r3, #2]
 8003c3e:	0a1b      	lsrs	r3, r3, #8
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	461a      	mov	r2, r3
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	609a      	str	r2, [r3, #8]
			break;
 8003c4a:	e019      	b.n	8003c80 <USBD_CUSTOM_HID_Setup+0xd0>

		case CUSTOM_HID_REQ_GET_IDLE:
			USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	3308      	adds	r3, #8
 8003c50:	2201      	movs	r2, #1
 8003c52:	4619      	mov	r1, r3
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f001 fa69 	bl	800512c <USBD_CtlSendData>
			break;
 8003c5a:	e011      	b.n	8003c80 <USBD_CUSTOM_HID_Setup+0xd0>

		case CUSTOM_HID_REQ_SET_REPORT:
			hhid->IsReportAvailable = 1U;
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	611a      	str	r2, [r3, #16]
			USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8003c62:	6939      	ldr	r1, [r7, #16]
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	88db      	ldrh	r3, [r3, #6]
 8003c68:	461a      	mov	r2, r3
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f001 fa8c 	bl	8005188 <USBD_CtlPrepareRx>
			break;
 8003c70:	e006      	b.n	8003c80 <USBD_CUSTOM_HID_Setup+0xd0>

		default:
			USBD_CtlError(pdev, req);
 8003c72:	6839      	ldr	r1, [r7, #0]
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f001 f9ef 	bl	8005058 <USBD_CtlError>
			ret = USBD_FAIL;
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	75fb      	strb	r3, [r7, #23]
			break;
 8003c7e:	bf00      	nop
		}
		break;
 8003c80:	e08f      	b.n	8003da2 <USBD_CUSTOM_HID_Setup+0x1f2>

		case USB_REQ_TYPE_STANDARD:
			switch (req->bRequest)
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	785b      	ldrb	r3, [r3, #1]
 8003c86:	2b0b      	cmp	r3, #11
 8003c88:	d87c      	bhi.n	8003d84 <USBD_CUSTOM_HID_Setup+0x1d4>
 8003c8a:	a201      	add	r2, pc, #4	; (adr r2, 8003c90 <USBD_CUSTOM_HID_Setup+0xe0>)
 8003c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c90:	08003cc1 	.word	0x08003cc1
 8003c94:	08003d85 	.word	0x08003d85
 8003c98:	08003d85 	.word	0x08003d85
 8003c9c:	08003d85 	.word	0x08003d85
 8003ca0:	08003d85 	.word	0x08003d85
 8003ca4:	08003d85 	.word	0x08003d85
 8003ca8:	08003ce9 	.word	0x08003ce9
 8003cac:	08003d85 	.word	0x08003d85
 8003cb0:	08003d85 	.word	0x08003d85
 8003cb4:	08003d85 	.word	0x08003d85
 8003cb8:	08003d37 	.word	0x08003d37
 8003cbc:	08003d5f 	.word	0x08003d5f
			{
			case USB_REQ_GET_STATUS:
				if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003cc6:	2b03      	cmp	r3, #3
 8003cc8:	d107      	bne.n	8003cda <USBD_CUSTOM_HID_Setup+0x12a>
				{
					USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8003cca:	f107 030e 	add.w	r3, r7, #14
 8003cce:	2202      	movs	r2, #2
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f001 fa2a 	bl	800512c <USBD_CtlSendData>
				else
				{
					USBD_CtlError(pdev, req);
					ret = USBD_FAIL;
				}
				break;
 8003cd8:	e05b      	b.n	8003d92 <USBD_CUSTOM_HID_Setup+0x1e2>
					USBD_CtlError(pdev, req);
 8003cda:	6839      	ldr	r1, [r7, #0]
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f001 f9bb 	bl	8005058 <USBD_CtlError>
					ret = USBD_FAIL;
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	75fb      	strb	r3, [r7, #23]
				break;
 8003ce6:	e054      	b.n	8003d92 <USBD_CUSTOM_HID_Setup+0x1e2>

			case USB_REQ_GET_DESCRIPTOR:
				if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	885b      	ldrh	r3, [r3, #2]
 8003cec:	0a1b      	lsrs	r3, r3, #8
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	2b22      	cmp	r3, #34	; 0x22
 8003cf2:	d10b      	bne.n	8003d0c <USBD_CUSTOM_HID_Setup+0x15c>
				{
					len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	88db      	ldrh	r3, [r3, #6]
 8003cf8:	2b33      	cmp	r3, #51	; 0x33
 8003cfa:	bf28      	it	cs
 8003cfc:	2333      	movcs	r3, #51	; 0x33
 8003cfe:	83fb      	strh	r3, [r7, #30]
					pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pClassSpecificInterfaceCustomHID)->pReport;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	61bb      	str	r3, [r7, #24]
 8003d0a:	e00d      	b.n	8003d28 <USBD_CUSTOM_HID_Setup+0x178>
				}
				else
				{
					if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	885b      	ldrh	r3, [r3, #2]
 8003d10:	0a1b      	lsrs	r3, r3, #8
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	2b21      	cmp	r3, #33	; 0x21
 8003d16:	d107      	bne.n	8003d28 <USBD_CUSTOM_HID_Setup+0x178>
					{
						pbuf = USBD_CUSTOM_HID_Desc;
 8003d18:	4b24      	ldr	r3, [pc, #144]	; (8003dac <USBD_CUSTOM_HID_Setup+0x1fc>)
 8003d1a:	61bb      	str	r3, [r7, #24]
						len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	88db      	ldrh	r3, [r3, #6]
 8003d20:	2b09      	cmp	r3, #9
 8003d22:	bf28      	it	cs
 8003d24:	2309      	movcs	r3, #9
 8003d26:	83fb      	strh	r3, [r7, #30]
					}
				}

				USBD_CtlSendData(pdev, pbuf, len);
 8003d28:	8bfb      	ldrh	r3, [r7, #30]
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	69b9      	ldr	r1, [r7, #24]
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f001 f9fc 	bl	800512c <USBD_CtlSendData>
				break;
 8003d34:	e02d      	b.n	8003d92 <USBD_CUSTOM_HID_Setup+0x1e2>

			case USB_REQ_GET_INTERFACE :
				if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003d3c:	2b03      	cmp	r3, #3
 8003d3e:	d107      	bne.n	8003d50 <USBD_CUSTOM_HID_Setup+0x1a0>
				{
					USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	330c      	adds	r3, #12
 8003d44:	2201      	movs	r2, #1
 8003d46:	4619      	mov	r1, r3
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f001 f9ef 	bl	800512c <USBD_CtlSendData>
				else
				{
					USBD_CtlError(pdev, req);
					ret = USBD_FAIL;
				}
				break;
 8003d4e:	e020      	b.n	8003d92 <USBD_CUSTOM_HID_Setup+0x1e2>
					USBD_CtlError(pdev, req);
 8003d50:	6839      	ldr	r1, [r7, #0]
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f001 f980 	bl	8005058 <USBD_CtlError>
					ret = USBD_FAIL;
 8003d58:	2302      	movs	r3, #2
 8003d5a:	75fb      	strb	r3, [r7, #23]
				break;
 8003d5c:	e019      	b.n	8003d92 <USBD_CUSTOM_HID_Setup+0x1e2>

			case USB_REQ_SET_INTERFACE :
				if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003d64:	2b03      	cmp	r3, #3
 8003d66:	d106      	bne.n	8003d76 <USBD_CUSTOM_HID_Setup+0x1c6>
				{
					hhid->AltSetting = (uint8_t)(req->wValue);
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	885b      	ldrh	r3, [r3, #2]
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	461a      	mov	r2, r3
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	60da      	str	r2, [r3, #12]
				else
				{
					USBD_CtlError(pdev, req);
					ret = USBD_FAIL;
				}
				break;
 8003d74:	e00d      	b.n	8003d92 <USBD_CUSTOM_HID_Setup+0x1e2>
					USBD_CtlError(pdev, req);
 8003d76:	6839      	ldr	r1, [r7, #0]
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f001 f96d 	bl	8005058 <USBD_CtlError>
					ret = USBD_FAIL;
 8003d7e:	2302      	movs	r3, #2
 8003d80:	75fb      	strb	r3, [r7, #23]
				break;
 8003d82:	e006      	b.n	8003d92 <USBD_CUSTOM_HID_Setup+0x1e2>

			default:
				USBD_CtlError(pdev, req);
 8003d84:	6839      	ldr	r1, [r7, #0]
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f001 f966 	bl	8005058 <USBD_CtlError>
				ret = USBD_FAIL;
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	75fb      	strb	r3, [r7, #23]
				break;
 8003d90:	bf00      	nop
			}
			break;
 8003d92:	e006      	b.n	8003da2 <USBD_CUSTOM_HID_Setup+0x1f2>

			default:
				USBD_CtlError(pdev, req);
 8003d94:	6839      	ldr	r1, [r7, #0]
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f001 f95e 	bl	8005058 <USBD_CtlError>
				ret = USBD_FAIL;
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	75fb      	strb	r3, [r7, #23]
				break;
 8003da0:	bf00      	nop
	}
	return ret;
 8003da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3720      	adds	r7, #32
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	2000011c 	.word	0x2000011c

08003db0 <USBD_CUSTOM_HID_DataIn>:
 * @param  epnum: endpoint index
 * @retval status
 */
uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
		uint8_t epnum)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	460b      	mov	r3, r1
 8003dba:	70fb      	strb	r3, [r7, #3]
	/* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
	((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCustomHID)->state = CUSTOM_HID_IDLE;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	751a      	strb	r2, [r3, #20]

	return USBD_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bc80      	pop	{r7}
 8003dd0:	4770      	bx	lr

08003dd2 <USBD_CUSTOM_HID_DataOut>:
 * @param  epnum: endpoint index
 * @retval status
 */
uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
		uint8_t epnum)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b084      	sub	sp, #16
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
 8003dda:	460b      	mov	r3, r1
 8003ddc:	70fb      	strb	r3, [r7, #3]

	USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCustomHID;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8003de4:	60fb      	str	r3, [r7, #12]

	((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pClassSpecificInterfaceCustomHID)->OutEvent(hhid->Report_buf[0],
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	7810      	ldrb	r0, [r2, #0]
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	7852      	ldrb	r2, [r2, #1]
 8003df6:	4611      	mov	r1, r2
 8003df8:	4798      	blx	r3
			hhid->Report_buf[1]);

	USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	2103      	movs	r1, #3
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f004 fa1e 	bl	8008242 <USBD_LL_PrepareReceive>
			USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

	return USBD_OK;
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3710      	adds	r7, #16
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <USBD_CUSTOM_HID_EP0_RxReady>:
 *         Handles control request data.
 * @param  pdev: device instance
 * @retval status
 */
uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
	USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCustomHID;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8003e1e:	60fb      	str	r3, [r7, #12]

	if (hhid->IsReportAvailable == 1U)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d10c      	bne.n	8003e42 <USBD_CUSTOM_HID_EP0_RxReady+0x32>
	{
		((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pClassSpecificInterfaceCustomHID)->OutEvent(hhid->Report_buf[0],
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	7810      	ldrb	r0, [r2, #0]
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	7852      	ldrb	r2, [r2, #1]
 8003e38:	4611      	mov	r1, r2
 8003e3a:	4798      	blx	r3
				hhid->Report_buf[1]);
		hhid->IsReportAvailable = 0U;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	611a      	str	r2, [r3, #16]
	}

	return USBD_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3710      	adds	r7, #16
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <USBD_CUSTOM_HID_RegisterInterface>:
 * @param  fops: CUSTOMHID Interface callback
 * @retval status
 */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
		USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
	uint8_t  ret = USBD_FAIL;
 8003e56:	2302      	movs	r3, #2
 8003e58:	73fb      	strb	r3, [r7, #15]

	if (fops != NULL)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d005      	beq.n	8003e6c <USBD_CUSTOM_HID_RegisterInterface+0x20>
	{
		pdev->pClassSpecificInterfaceCustomHID = fops;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	683a      	ldr	r2, [r7, #0]
 8003e64:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
		ret = USBD_OK;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8003e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3714      	adds	r7, #20
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bc80      	pop	{r7}
 8003e76:	4770      	bx	lr

08003e78 <USBD_MOUSE_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
uint8_t  USBD_MOUSE_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	460b      	mov	r3, r1
 8003e82:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, MOUSE_EPIN_ADDR, USBD_EP_TYPE_INTR, MOUSE_EPIN_SIZE);
 8003e84:	2304      	movs	r3, #4
 8003e86:	2203      	movs	r2, #3
 8003e88:	2181      	movs	r1, #129	; 0x81
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f004 f8ef 	bl	800806e <USBD_LL_OpenEP>
  pdev->ep_in[MOUSE_EPIN_ADDR & 0xFU].is_used = 1U;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassDataMouse = &mouseInstance;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a09      	ldr	r2, [pc, #36]	; (8003ec0 <USBD_MOUSE_Init+0x48>)
 8003e9a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassDataMouse == NULL)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d101      	bne.n	8003eac <USBD_MOUSE_Init+0x34>
  {
    return USBD_FAIL;
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	e005      	b.n	8003eb8 <USBD_MOUSE_Init+0x40>
  }

  ((USBD_MOUSE_HandleTypeDef *)pdev->pClassDataMouse)->state = MOUSE_IDLE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3708      	adds	r7, #8
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	20001ba0 	.word	0x20001ba0

08003ec4 <USBD_MOUSE_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
uint8_t  USBD_MOUSE_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	460b      	mov	r3, r1
 8003ece:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, MOUSE_EPIN_ADDR);
 8003ed0:	2181      	movs	r1, #129	; 0x81
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f004 f8f1 	bl	80080ba <USBD_LL_CloseEP>
  pdev->ep_in[MOUSE_EPIN_ADDR & 0xFU].is_used = 0U;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassDataMouse != NULL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d003      	beq.n	8003ef0 <USBD_MOUSE_DeInit+0x2c>
  {
    //USBD_free(pdev->pClassDataMouse);
    pdev->pClassDataMouse = NULL;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3708      	adds	r7, #8
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
	...

08003efc <USBD_MOUSE_Setup>:
  * @param  req: usb requests
  * @retval status
  */
uint8_t  USBD_MOUSE_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b088      	sub	sp, #32
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  USBD_MOUSE_HandleTypeDef *hhid = (USBD_MOUSE_HandleTypeDef *) pdev->pClassDataMouse;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003f0c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8003f12:	2300      	movs	r3, #0
 8003f14:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8003f16:	2300      	movs	r3, #0
 8003f18:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d045      	beq.n	8003fb6 <USBD_MOUSE_Setup+0xba>
 8003f2a:	2b20      	cmp	r3, #32
 8003f2c:	f040 80d3 	bne.w	80040d6 <USBD_MOUSE_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	785b      	ldrb	r3, [r3, #1]
 8003f34:	3b02      	subs	r3, #2
 8003f36:	2b09      	cmp	r3, #9
 8003f38:	d835      	bhi.n	8003fa6 <USBD_MOUSE_Setup+0xaa>
 8003f3a:	a201      	add	r2, pc, #4	; (adr r2, 8003f40 <USBD_MOUSE_Setup+0x44>)
 8003f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f40:	08003f97 	.word	0x08003f97
 8003f44:	08003f77 	.word	0x08003f77
 8003f48:	08003fa7 	.word	0x08003fa7
 8003f4c:	08003fa7 	.word	0x08003fa7
 8003f50:	08003fa7 	.word	0x08003fa7
 8003f54:	08003fa7 	.word	0x08003fa7
 8003f58:	08003fa7 	.word	0x08003fa7
 8003f5c:	08003fa7 	.word	0x08003fa7
 8003f60:	08003f85 	.word	0x08003f85
 8003f64:	08003f69 	.word	0x08003f69
      {
        case MOUSE_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	885b      	ldrh	r3, [r3, #2]
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	461a      	mov	r2, r3
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	601a      	str	r2, [r3, #0]
          break;
 8003f74:	e01e      	b.n	8003fb4 <USBD_MOUSE_Setup+0xb8>

        case MOUSE_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f001 f8d5 	bl	800512c <USBD_CtlSendData>
          break;
 8003f82:	e017      	b.n	8003fb4 <USBD_MOUSE_Setup+0xb8>

        case MOUSE_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	885b      	ldrh	r3, [r3, #2]
 8003f88:	0a1b      	lsrs	r3, r3, #8
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	461a      	mov	r2, r3
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	605a      	str	r2, [r3, #4]
          break;
 8003f94:	e00e      	b.n	8003fb4 <USBD_MOUSE_Setup+0xb8>

        case MOUSE_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	3304      	adds	r3, #4
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f001 f8c4 	bl	800512c <USBD_CtlSendData>
          break;
 8003fa4:	e006      	b.n	8003fb4 <USBD_MOUSE_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8003fa6:	6839      	ldr	r1, [r7, #0]
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f001 f855 	bl	8005058 <USBD_CtlError>
          ret = USBD_FAIL;
 8003fae:	2302      	movs	r3, #2
 8003fb0:	75fb      	strb	r3, [r7, #23]
          break;
 8003fb2:	bf00      	nop
      }
      break;
 8003fb4:	e096      	b.n	80040e4 <USBD_MOUSE_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	785b      	ldrb	r3, [r3, #1]
 8003fba:	2b0b      	cmp	r3, #11
 8003fbc:	f200 8083 	bhi.w	80040c6 <USBD_MOUSE_Setup+0x1ca>
 8003fc0:	a201      	add	r2, pc, #4	; (adr r2, 8003fc8 <USBD_MOUSE_Setup+0xcc>)
 8003fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc6:	bf00      	nop
 8003fc8:	08003ff9 	.word	0x08003ff9
 8003fcc:	080040c7 	.word	0x080040c7
 8003fd0:	080040c7 	.word	0x080040c7
 8003fd4:	080040c7 	.word	0x080040c7
 8003fd8:	080040c7 	.word	0x080040c7
 8003fdc:	080040c7 	.word	0x080040c7
 8003fe0:	08004021 	.word	0x08004021
 8003fe4:	080040c7 	.word	0x080040c7
 8003fe8:	080040c7 	.word	0x080040c7
 8003fec:	080040c7 	.word	0x080040c7
 8003ff0:	08004079 	.word	0x08004079
 8003ff4:	080040a1 	.word	0x080040a1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003ffe:	2b03      	cmp	r3, #3
 8004000:	d107      	bne.n	8004012 <USBD_MOUSE_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8004002:	f107 030e 	add.w	r3, r7, #14
 8004006:	2202      	movs	r2, #2
 8004008:	4619      	mov	r1, r3
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f001 f88e 	bl	800512c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004010:	e060      	b.n	80040d4 <USBD_MOUSE_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8004012:	6839      	ldr	r1, [r7, #0]
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f001 f81f 	bl	8005058 <USBD_CtlError>
            ret = USBD_FAIL;
 800401a:	2302      	movs	r3, #2
 800401c:	75fb      	strb	r3, [r7, #23]
          break;
 800401e:	e059      	b.n	80040d4 <USBD_MOUSE_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == MOUSE_REPORT_DESC)
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	885b      	ldrh	r3, [r3, #2]
 8004024:	0a1b      	lsrs	r3, r3, #8
 8004026:	b29b      	uxth	r3, r3
 8004028:	2b22      	cmp	r3, #34	; 0x22
 800402a:	d108      	bne.n	800403e <USBD_MOUSE_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	88db      	ldrh	r3, [r3, #6]
 8004030:	2b4a      	cmp	r3, #74	; 0x4a
 8004032:	bf28      	it	cs
 8004034:	234a      	movcs	r3, #74	; 0x4a
 8004036:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8004038:	4b2d      	ldr	r3, [pc, #180]	; (80040f0 <USBD_MOUSE_Setup+0x1f4>)
 800403a:	61bb      	str	r3, [r7, #24]
 800403c:	e015      	b.n	800406a <USBD_MOUSE_Setup+0x16e>
          }
          else if (req->wValue >> 8 == MOUSE_DESCRIPTOR_TYPE)
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	885b      	ldrh	r3, [r3, #2]
 8004042:	0a1b      	lsrs	r3, r3, #8
 8004044:	b29b      	uxth	r3, r3
 8004046:	2b21      	cmp	r3, #33	; 0x21
 8004048:	d108      	bne.n	800405c <USBD_MOUSE_Setup+0x160>
          {
            pbuf = USBD_MOUSE_Desc;
 800404a:	4b2a      	ldr	r3, [pc, #168]	; (80040f4 <USBD_MOUSE_Setup+0x1f8>)
 800404c:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_MOUSE_DESC_SIZ, req->wLength);
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	88db      	ldrh	r3, [r3, #6]
 8004052:	2b09      	cmp	r3, #9
 8004054:	bf28      	it	cs
 8004056:	2309      	movcs	r3, #9
 8004058:	83fb      	strh	r3, [r7, #30]
 800405a:	e006      	b.n	800406a <USBD_MOUSE_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800405c:	6839      	ldr	r1, [r7, #0]
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 fffa 	bl	8005058 <USBD_CtlError>
            ret = USBD_FAIL;
 8004064:	2302      	movs	r3, #2
 8004066:	75fb      	strb	r3, [r7, #23]
            break;
 8004068:	e034      	b.n	80040d4 <USBD_MOUSE_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 800406a:	8bfb      	ldrh	r3, [r7, #30]
 800406c:	461a      	mov	r2, r3
 800406e:	69b9      	ldr	r1, [r7, #24]
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f001 f85b 	bl	800512c <USBD_CtlSendData>
          break;
 8004076:	e02d      	b.n	80040d4 <USBD_MOUSE_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800407e:	2b03      	cmp	r3, #3
 8004080:	d107      	bne.n	8004092 <USBD_MOUSE_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	3308      	adds	r3, #8
 8004086:	2201      	movs	r2, #1
 8004088:	4619      	mov	r1, r3
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f001 f84e 	bl	800512c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004090:	e020      	b.n	80040d4 <USBD_MOUSE_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8004092:	6839      	ldr	r1, [r7, #0]
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 ffdf 	bl	8005058 <USBD_CtlError>
            ret = USBD_FAIL;
 800409a:	2302      	movs	r3, #2
 800409c:	75fb      	strb	r3, [r7, #23]
          break;
 800409e:	e019      	b.n	80040d4 <USBD_MOUSE_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80040a6:	2b03      	cmp	r3, #3
 80040a8:	d106      	bne.n	80040b8 <USBD_MOUSE_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	885b      	ldrh	r3, [r3, #2]
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	461a      	mov	r2, r3
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80040b6:	e00d      	b.n	80040d4 <USBD_MOUSE_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80040b8:	6839      	ldr	r1, [r7, #0]
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 ffcc 	bl	8005058 <USBD_CtlError>
            ret = USBD_FAIL;
 80040c0:	2302      	movs	r3, #2
 80040c2:	75fb      	strb	r3, [r7, #23]
          break;
 80040c4:	e006      	b.n	80040d4 <USBD_MOUSE_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 80040c6:	6839      	ldr	r1, [r7, #0]
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 ffc5 	bl	8005058 <USBD_CtlError>
          ret = USBD_FAIL;
 80040ce:	2302      	movs	r3, #2
 80040d0:	75fb      	strb	r3, [r7, #23]
          break;
 80040d2:	bf00      	nop
      }
      break;
 80040d4:	e006      	b.n	80040e4 <USBD_MOUSE_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 80040d6:	6839      	ldr	r1, [r7, #0]
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 ffbd 	bl	8005058 <USBD_CtlError>
      ret = USBD_FAIL;
 80040de:	2302      	movs	r3, #2
 80040e0:	75fb      	strb	r3, [r7, #23]
      break;
 80040e2:	bf00      	nop
  }

  return ret;
 80040e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3720      	adds	r7, #32
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	20000134 	.word	0x20000134
 80040f4:	20000128 	.word	0x20000128

080040f8 <USBD_MOUSE_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t  USBD_MOUSE_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	460b      	mov	r3, r1
 8004102:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_MOUSE_HandleTypeDef *)pdev->pClassDataMouse)->state = MOUSE_IDLE;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800410a:	2200      	movs	r2, #0
 800410c:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	bc80      	pop	{r7}
 8004118:	4770      	bx	lr

0800411a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800411a:	b580      	push	{r7, lr}
 800411c:	b084      	sub	sp, #16
 800411e:	af00      	add	r7, sp, #0
 8004120:	60f8      	str	r0, [r7, #12]
 8004122:	60b9      	str	r1, [r7, #8]
 8004124:	4613      	mov	r3, r2
 8004126:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800412e:	2302      	movs	r3, #2
 8004130:	e01a      	b.n	8004168 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004138:	2b00      	cmp	r3, #0
 800413a:	d003      	beq.n	8004144 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d003      	beq.n	8004152 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	68ba      	ldr	r2, [r7, #8]
 800414e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	79fa      	ldrb	r2, [r7, #7]
 800415e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f003 ff11 	bl	8007f88 <USBD_LL_Init>

  return USBD_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	3710      	adds	r7, #16
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004170:	b480      	push	{r7}
 8004172:	b085      	sub	sp, #20
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800417a:	2300      	movs	r3, #0
 800417c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d006      	beq.n	8004192 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	683a      	ldr	r2, [r7, #0]
 8004188:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800418c:	2300      	movs	r3, #0
 800418e:	73fb      	strb	r3, [r7, #15]
 8004190:	e001      	b.n	8004196 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8004192:	2302      	movs	r3, #2
 8004194:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004196:	7bfb      	ldrb	r3, [r7, #15]
}
 8004198:	4618      	mov	r0, r3
 800419a:	3714      	adds	r7, #20
 800419c:	46bd      	mov	sp, r7
 800419e:	bc80      	pop	{r7}
 80041a0:	4770      	bx	lr

080041a2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b082      	sub	sp, #8
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f003 ff44 	bl	8008038 <USBD_LL_Start>

  return USBD_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80041ba:	b480      	push	{r7}
 80041bc:	b083      	sub	sp, #12
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bc80      	pop	{r7}
 80041cc:	4770      	bx	lr

080041ce <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b084      	sub	sp, #16
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
 80041d6:	460b      	mov	r3, r1
 80041d8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80041da:	2302      	movs	r3, #2
 80041dc:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00c      	beq.n	8004202 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	78fa      	ldrb	r2, [r7, #3]
 80041f2:	4611      	mov	r1, r2
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	4798      	blx	r3
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d101      	bne.n	8004202 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80041fe:	2300      	movs	r3, #0
 8004200:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8004202:	7bfb      	ldrb	r3, [r7, #15]
}
 8004204:	4618      	mov	r0, r3
 8004206:	3710      	adds	r7, #16
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	460b      	mov	r3, r1
 8004216:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	78fa      	ldrb	r2, [r7, #3]
 8004222:	4611      	mov	r1, r2
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	4798      	blx	r3

  return USBD_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3708      	adds	r7, #8
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b082      	sub	sp, #8
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
 800423a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004242:	6839      	ldr	r1, [r7, #0]
 8004244:	4618      	mov	r0, r3
 8004246:	f000 fecb 	bl	8004fe0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2201      	movs	r2, #1
 800424e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8004258:	461a      	mov	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004266:	f003 031f 	and.w	r3, r3, #31
 800426a:	2b01      	cmp	r3, #1
 800426c:	d00c      	beq.n	8004288 <USBD_LL_SetupStage+0x56>
 800426e:	2b01      	cmp	r3, #1
 8004270:	d302      	bcc.n	8004278 <USBD_LL_SetupStage+0x46>
 8004272:	2b02      	cmp	r3, #2
 8004274:	d010      	beq.n	8004298 <USBD_LL_SetupStage+0x66>
 8004276:	e017      	b.n	80042a8 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800427e:	4619      	mov	r1, r3
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 f9cb 	bl	800461c <USBD_StdDevReq>
      break;
 8004286:	e01a      	b.n	80042be <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800428e:	4619      	mov	r1, r3
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 fa2d 	bl	80046f0 <USBD_StdItfReq>
      break;
 8004296:	e012      	b.n	80042be <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800429e:	4619      	mov	r1, r3
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 fa6b 	bl	800477c <USBD_StdEPReq>
      break;
 80042a6:	e00a      	b.n	80042be <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80042ae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	4619      	mov	r1, r3
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f003 ff1e 	bl	80080f8 <USBD_LL_StallEP>
      break;
 80042bc:	bf00      	nop
  }

  return USBD_OK;
 80042be:	2300      	movs	r3, #0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3708      	adds	r7, #8
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b086      	sub	sp, #24
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	460b      	mov	r3, r1
 80042d2:	607a      	str	r2, [r7, #4]
 80042d4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80042d6:	7afb      	ldrb	r3, [r7, #11]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d14b      	bne.n	8004374 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80042e2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80042ea:	2b03      	cmp	r3, #3
 80042ec:	d134      	bne.n	8004358 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	68da      	ldr	r2, [r3, #12]
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d919      	bls.n	800432e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	68da      	ldr	r2, [r3, #12]
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	1ad2      	subs	r2, r2, r3
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	68da      	ldr	r2, [r3, #12]
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8004310:	429a      	cmp	r2, r3
 8004312:	d203      	bcs.n	800431c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8004318:	b29b      	uxth	r3, r3
 800431a:	e002      	b.n	8004322 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8004320:	b29b      	uxth	r3, r3
 8004322:	461a      	mov	r2, r3
 8004324:	6879      	ldr	r1, [r7, #4]
 8004326:	68f8      	ldr	r0, [r7, #12]
 8004328:	f000 ff4c 	bl	80051c4 <USBD_CtlContinueRx>
 800432c:	e038      	b.n	80043a0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00a      	beq.n	8004350 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004340:	2b03      	cmp	r3, #3
 8004342:	d105      	bne.n	8004350 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	68f8      	ldr	r0, [r7, #12]
 800434e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f000 ff49 	bl	80051e8 <USBD_CtlSendStatus>
 8004356:	e023      	b.n	80043a0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800435e:	2b05      	cmp	r3, #5
 8004360:	d11e      	bne.n	80043a0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800436a:	2100      	movs	r1, #0
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f003 fec3 	bl	80080f8 <USBD_LL_StallEP>
 8004372:	e015      	b.n	80043a0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d00d      	beq.n	800439c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8004386:	2b03      	cmp	r3, #3
 8004388:	d108      	bne.n	800439c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	7afa      	ldrb	r2, [r7, #11]
 8004394:	4611      	mov	r1, r2
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	4798      	blx	r3
 800439a:	e001      	b.n	80043a0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800439c:	2302      	movs	r3, #2
 800439e:	e000      	b.n	80043a2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3718      	adds	r7, #24
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80043aa:	b580      	push	{r7, lr}
 80043ac:	b086      	sub	sp, #24
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	60f8      	str	r0, [r7, #12]
 80043b2:	460b      	mov	r3, r1
 80043b4:	607a      	str	r2, [r7, #4]
 80043b6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80043b8:	7afb      	ldrb	r3, [r7, #11]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d17f      	bne.n	80044be <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	3314      	adds	r3, #20
 80043c2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d15c      	bne.n	8004488 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	68da      	ldr	r2, [r3, #12]
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d915      	bls.n	8004406 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	68da      	ldr	r2, [r3, #12]
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	1ad2      	subs	r2, r2, r3
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	461a      	mov	r2, r3
 80043f0:	6879      	ldr	r1, [r7, #4]
 80043f2:	68f8      	ldr	r0, [r7, #12]
 80043f4:	f000 feb6 	bl	8005164 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80043f8:	2300      	movs	r3, #0
 80043fa:	2200      	movs	r2, #0
 80043fc:	2100      	movs	r1, #0
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	f003 ff1f 	bl	8008242 <USBD_LL_PrepareReceive>
 8004404:	e04e      	b.n	80044a4 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	6912      	ldr	r2, [r2, #16]
 800440e:	fbb3 f1f2 	udiv	r1, r3, r2
 8004412:	fb02 f201 	mul.w	r2, r2, r1
 8004416:	1a9b      	subs	r3, r3, r2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d11c      	bne.n	8004456 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	689a      	ldr	r2, [r3, #8]
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004424:	429a      	cmp	r2, r3
 8004426:	d316      	bcc.n	8004456 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	689a      	ldr	r2, [r3, #8]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004432:	429a      	cmp	r2, r3
 8004434:	d20f      	bcs.n	8004456 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004436:	2200      	movs	r2, #0
 8004438:	2100      	movs	r1, #0
 800443a:	68f8      	ldr	r0, [r7, #12]
 800443c:	f000 fe92 	bl	8005164 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004448:	2300      	movs	r3, #0
 800444a:	2200      	movs	r2, #0
 800444c:	2100      	movs	r1, #0
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f003 fef7 	bl	8008242 <USBD_LL_PrepareReceive>
 8004454:	e026      	b.n	80044a4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00a      	beq.n	8004478 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004468:	2b03      	cmp	r3, #3
 800446a:	d105      	bne.n	8004478 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8004478:	2180      	movs	r1, #128	; 0x80
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f003 fe3c 	bl	80080f8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f000 fec4 	bl	800520e <USBD_CtlReceiveStatus>
 8004486:	e00d      	b.n	80044a4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800448e:	2b04      	cmp	r3, #4
 8004490:	d004      	beq.n	800449c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004498:	2b00      	cmp	r3, #0
 800449a:	d103      	bne.n	80044a4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800449c:	2180      	movs	r1, #128	; 0x80
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	f003 fe2a 	bl	80080f8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d11d      	bne.n	80044ea <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80044ae:	68f8      	ldr	r0, [r7, #12]
 80044b0:	f7ff fe83 	bl	80041ba <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80044bc:	e015      	b.n	80044ea <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00d      	beq.n	80044e6 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80044d0:	2b03      	cmp	r3, #3
 80044d2:	d108      	bne.n	80044e6 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80044da:	695b      	ldr	r3, [r3, #20]
 80044dc:	7afa      	ldrb	r2, [r7, #11]
 80044de:	4611      	mov	r1, r2
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	4798      	blx	r3
 80044e4:	e001      	b.n	80044ea <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80044e6:	2302      	movs	r3, #2
 80044e8:	e000      	b.n	80044ec <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3718      	adds	r7, #24
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80044fc:	2340      	movs	r3, #64	; 0x40
 80044fe:	2200      	movs	r2, #0
 8004500:	2100      	movs	r1, #0
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f003 fdb3 	bl	800806e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2240      	movs	r2, #64	; 0x40
 8004514:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004518:	2340      	movs	r3, #64	; 0x40
 800451a:	2200      	movs	r2, #0
 800451c:	2180      	movs	r1, #128	; 0x80
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f003 fda5 	bl	800806e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2240      	movs	r2, #64	; 0x40
 800452e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassDataCustomHID)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d009      	beq.n	800456c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	6852      	ldr	r2, [r2, #4]
 8004564:	b2d2      	uxtb	r2, r2
 8004566:	4611      	mov	r1, r2
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	4798      	blx	r3
  }

  return USBD_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3708      	adds	r7, #8
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}

08004576 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004576:	b480      	push	{r7}
 8004578:	b083      	sub	sp, #12
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
 800457e:	460b      	mov	r3, r1
 8004580:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	78fa      	ldrb	r2, [r7, #3]
 8004586:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	370c      	adds	r7, #12
 800458e:	46bd      	mov	sp, r7
 8004590:	bc80      	pop	{r7}
 8004592:	4770      	bx	lr

08004594 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2204      	movs	r2, #4
 80045ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	370c      	adds	r7, #12
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bc80      	pop	{r7}
 80045ba:	4770      	bx	lr

080045bc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80045ca:	2b04      	cmp	r3, #4
 80045cc:	d105      	bne.n	80045da <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bc80      	pop	{r7}
 80045e4:	4770      	bx	lr

080045e6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b082      	sub	sp, #8
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80045f4:	2b03      	cmp	r3, #3
 80045f6:	d10b      	bne.n	8004610 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80045fe:	69db      	ldr	r3, [r3, #28]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d005      	beq.n	8004610 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800460a:	69db      	ldr	r3, [r3, #28]
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3708      	adds	r7, #8
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
	...

0800461c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004626:	2300      	movs	r3, #0
 8004628:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004632:	2b20      	cmp	r3, #32
 8004634:	d004      	beq.n	8004640 <USBD_StdDevReq+0x24>
 8004636:	2b40      	cmp	r3, #64	; 0x40
 8004638:	d002      	beq.n	8004640 <USBD_StdDevReq+0x24>
 800463a:	2b00      	cmp	r3, #0
 800463c:	d008      	beq.n	8004650 <USBD_StdDevReq+0x34>
 800463e:	e04c      	b.n	80046da <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	6839      	ldr	r1, [r7, #0]
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	4798      	blx	r3
      break;
 800464e:	e049      	b.n	80046e4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	785b      	ldrb	r3, [r3, #1]
 8004654:	2b09      	cmp	r3, #9
 8004656:	d83a      	bhi.n	80046ce <USBD_StdDevReq+0xb2>
 8004658:	a201      	add	r2, pc, #4	; (adr r2, 8004660 <USBD_StdDevReq+0x44>)
 800465a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800465e:	bf00      	nop
 8004660:	080046b1 	.word	0x080046b1
 8004664:	080046c5 	.word	0x080046c5
 8004668:	080046cf 	.word	0x080046cf
 800466c:	080046bb 	.word	0x080046bb
 8004670:	080046cf 	.word	0x080046cf
 8004674:	08004693 	.word	0x08004693
 8004678:	08004689 	.word	0x08004689
 800467c:	080046cf 	.word	0x080046cf
 8004680:	080046a7 	.word	0x080046a7
 8004684:	0800469d 	.word	0x0800469d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8004688:	6839      	ldr	r1, [r7, #0]
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 f9d4 	bl	8004a38 <USBD_GetDescriptor>
          break;
 8004690:	e022      	b.n	80046d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8004692:	6839      	ldr	r1, [r7, #0]
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 fb37 	bl	8004d08 <USBD_SetAddress>
          break;
 800469a:	e01d      	b.n	80046d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800469c:	6839      	ldr	r1, [r7, #0]
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 fb74 	bl	8004d8c <USBD_SetConfig>
          break;
 80046a4:	e018      	b.n	80046d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80046a6:	6839      	ldr	r1, [r7, #0]
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 fbfd 	bl	8004ea8 <USBD_GetConfig>
          break;
 80046ae:	e013      	b.n	80046d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80046b0:	6839      	ldr	r1, [r7, #0]
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 fc2c 	bl	8004f10 <USBD_GetStatus>
          break;
 80046b8:	e00e      	b.n	80046d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80046ba:	6839      	ldr	r1, [r7, #0]
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f000 fc5a 	bl	8004f76 <USBD_SetFeature>
          break;
 80046c2:	e009      	b.n	80046d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80046c4:	6839      	ldr	r1, [r7, #0]
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 fc69 	bl	8004f9e <USBD_ClrFeature>
          break;
 80046cc:	e004      	b.n	80046d8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80046ce:	6839      	ldr	r1, [r7, #0]
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 fcc1 	bl	8005058 <USBD_CtlError>
          break;
 80046d6:	bf00      	nop
      }
      break;
 80046d8:	e004      	b.n	80046e4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80046da:	6839      	ldr	r1, [r7, #0]
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 fcbb 	bl	8005058 <USBD_CtlError>
      break;
 80046e2:	bf00      	nop
  }

  return ret;
 80046e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3710      	adds	r7, #16
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop

080046f0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80046fa:	2300      	movs	r3, #0
 80046fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004706:	2b20      	cmp	r3, #32
 8004708:	d003      	beq.n	8004712 <USBD_StdItfReq+0x22>
 800470a:	2b40      	cmp	r3, #64	; 0x40
 800470c:	d001      	beq.n	8004712 <USBD_StdItfReq+0x22>
 800470e:	2b00      	cmp	r3, #0
 8004710:	d12a      	bne.n	8004768 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004718:	3b01      	subs	r3, #1
 800471a:	2b02      	cmp	r3, #2
 800471c:	d81d      	bhi.n	800475a <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	889b      	ldrh	r3, [r3, #4]
 8004722:	b2db      	uxtb	r3, r3
 8004724:	2b02      	cmp	r3, #2
 8004726:	d813      	bhi.n	8004750 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	6839      	ldr	r1, [r7, #0]
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	4798      	blx	r3
 8004736:	4603      	mov	r3, r0
 8004738:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	88db      	ldrh	r3, [r3, #6]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d110      	bne.n	8004764 <USBD_StdItfReq+0x74>
 8004742:	7bfb      	ldrb	r3, [r7, #15]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d10d      	bne.n	8004764 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 fd4d 	bl	80051e8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800474e:	e009      	b.n	8004764 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8004750:	6839      	ldr	r1, [r7, #0]
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 fc80 	bl	8005058 <USBD_CtlError>
          break;
 8004758:	e004      	b.n	8004764 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800475a:	6839      	ldr	r1, [r7, #0]
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f000 fc7b 	bl	8005058 <USBD_CtlError>
          break;
 8004762:	e000      	b.n	8004766 <USBD_StdItfReq+0x76>
          break;
 8004764:	bf00      	nop
      }
      break;
 8004766:	e004      	b.n	8004772 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8004768:	6839      	ldr	r1, [r7, #0]
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 fc74 	bl	8005058 <USBD_CtlError>
      break;
 8004770:	bf00      	nop
  }

  return USBD_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3710      	adds	r7, #16
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8004786:	2300      	movs	r3, #0
 8004788:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	889b      	ldrh	r3, [r3, #4]
 800478e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004798:	2b20      	cmp	r3, #32
 800479a:	d004      	beq.n	80047a6 <USBD_StdEPReq+0x2a>
 800479c:	2b40      	cmp	r3, #64	; 0x40
 800479e:	d002      	beq.n	80047a6 <USBD_StdEPReq+0x2a>
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d008      	beq.n	80047b6 <USBD_StdEPReq+0x3a>
 80047a4:	e13d      	b.n	8004a22 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	6839      	ldr	r1, [r7, #0]
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	4798      	blx	r3
      break;
 80047b4:	e13a      	b.n	8004a2c <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80047be:	2b20      	cmp	r3, #32
 80047c0:	d10a      	bne.n	80047d8 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	6839      	ldr	r1, [r7, #0]
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	4798      	blx	r3
 80047d0:	4603      	mov	r3, r0
 80047d2:	73fb      	strb	r3, [r7, #15]

        return ret;
 80047d4:	7bfb      	ldrb	r3, [r7, #15]
 80047d6:	e12a      	b.n	8004a2e <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	785b      	ldrb	r3, [r3, #1]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d03e      	beq.n	800485e <USBD_StdEPReq+0xe2>
 80047e0:	2b03      	cmp	r3, #3
 80047e2:	d002      	beq.n	80047ea <USBD_StdEPReq+0x6e>
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d070      	beq.n	80048ca <USBD_StdEPReq+0x14e>
 80047e8:	e115      	b.n	8004a16 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d002      	beq.n	80047fa <USBD_StdEPReq+0x7e>
 80047f4:	2b03      	cmp	r3, #3
 80047f6:	d015      	beq.n	8004824 <USBD_StdEPReq+0xa8>
 80047f8:	e02b      	b.n	8004852 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80047fa:	7bbb      	ldrb	r3, [r7, #14]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00c      	beq.n	800481a <USBD_StdEPReq+0x9e>
 8004800:	7bbb      	ldrb	r3, [r7, #14]
 8004802:	2b80      	cmp	r3, #128	; 0x80
 8004804:	d009      	beq.n	800481a <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8004806:	7bbb      	ldrb	r3, [r7, #14]
 8004808:	4619      	mov	r1, r3
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f003 fc74 	bl	80080f8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004810:	2180      	movs	r1, #128	; 0x80
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f003 fc70 	bl	80080f8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004818:	e020      	b.n	800485c <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800481a:	6839      	ldr	r1, [r7, #0]
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f000 fc1b 	bl	8005058 <USBD_CtlError>
              break;
 8004822:	e01b      	b.n	800485c <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	885b      	ldrh	r3, [r3, #2]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d10e      	bne.n	800484a <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 800482c:	7bbb      	ldrb	r3, [r7, #14]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00b      	beq.n	800484a <USBD_StdEPReq+0xce>
 8004832:	7bbb      	ldrb	r3, [r7, #14]
 8004834:	2b80      	cmp	r3, #128	; 0x80
 8004836:	d008      	beq.n	800484a <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	88db      	ldrh	r3, [r3, #6]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d104      	bne.n	800484a <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8004840:	7bbb      	ldrb	r3, [r7, #14]
 8004842:	4619      	mov	r1, r3
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f003 fc57 	bl	80080f8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 fccc 	bl	80051e8 <USBD_CtlSendStatus>

              break;
 8004850:	e004      	b.n	800485c <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8004852:	6839      	ldr	r1, [r7, #0]
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f000 fbff 	bl	8005058 <USBD_CtlError>
              break;
 800485a:	bf00      	nop
          }
          break;
 800485c:	e0e0      	b.n	8004a20 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004864:	2b02      	cmp	r3, #2
 8004866:	d002      	beq.n	800486e <USBD_StdEPReq+0xf2>
 8004868:	2b03      	cmp	r3, #3
 800486a:	d015      	beq.n	8004898 <USBD_StdEPReq+0x11c>
 800486c:	e026      	b.n	80048bc <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800486e:	7bbb      	ldrb	r3, [r7, #14]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00c      	beq.n	800488e <USBD_StdEPReq+0x112>
 8004874:	7bbb      	ldrb	r3, [r7, #14]
 8004876:	2b80      	cmp	r3, #128	; 0x80
 8004878:	d009      	beq.n	800488e <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800487a:	7bbb      	ldrb	r3, [r7, #14]
 800487c:	4619      	mov	r1, r3
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f003 fc3a 	bl	80080f8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004884:	2180      	movs	r1, #128	; 0x80
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f003 fc36 	bl	80080f8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800488c:	e01c      	b.n	80048c8 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800488e:	6839      	ldr	r1, [r7, #0]
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f000 fbe1 	bl	8005058 <USBD_CtlError>
              break;
 8004896:	e017      	b.n	80048c8 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	885b      	ldrh	r3, [r3, #2]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d112      	bne.n	80048c6 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80048a0:	7bbb      	ldrb	r3, [r7, #14]
 80048a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d004      	beq.n	80048b4 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80048aa:	7bbb      	ldrb	r3, [r7, #14]
 80048ac:	4619      	mov	r1, r3
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f003 fc41 	bl	8008136 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 fc97 	bl	80051e8 <USBD_CtlSendStatus>
              }
              break;
 80048ba:	e004      	b.n	80048c6 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80048bc:	6839      	ldr	r1, [r7, #0]
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 fbca 	bl	8005058 <USBD_CtlError>
              break;
 80048c4:	e000      	b.n	80048c8 <USBD_StdEPReq+0x14c>
              break;
 80048c6:	bf00      	nop
          }
          break;
 80048c8:	e0aa      	b.n	8004a20 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d002      	beq.n	80048da <USBD_StdEPReq+0x15e>
 80048d4:	2b03      	cmp	r3, #3
 80048d6:	d032      	beq.n	800493e <USBD_StdEPReq+0x1c2>
 80048d8:	e097      	b.n	8004a0a <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80048da:	7bbb      	ldrb	r3, [r7, #14]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d007      	beq.n	80048f0 <USBD_StdEPReq+0x174>
 80048e0:	7bbb      	ldrb	r3, [r7, #14]
 80048e2:	2b80      	cmp	r3, #128	; 0x80
 80048e4:	d004      	beq.n	80048f0 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80048e6:	6839      	ldr	r1, [r7, #0]
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 fbb5 	bl	8005058 <USBD_CtlError>
                break;
 80048ee:	e091      	b.n	8004a14 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80048f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	da0b      	bge.n	8004910 <USBD_StdEPReq+0x194>
 80048f8:	7bbb      	ldrb	r3, [r7, #14]
 80048fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80048fe:	4613      	mov	r3, r2
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	4413      	add	r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	3310      	adds	r3, #16
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	4413      	add	r3, r2
 800490c:	3304      	adds	r3, #4
 800490e:	e00b      	b.n	8004928 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004910:	7bbb      	ldrb	r3, [r7, #14]
 8004912:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004916:	4613      	mov	r3, r2
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	4413      	add	r3, r2
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	4413      	add	r3, r2
 8004926:	3304      	adds	r3, #4
 8004928:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	2200      	movs	r2, #0
 800492e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	2202      	movs	r2, #2
 8004934:	4619      	mov	r1, r3
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 fbf8 	bl	800512c <USBD_CtlSendData>
              break;
 800493c:	e06a      	b.n	8004a14 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800493e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004942:	2b00      	cmp	r3, #0
 8004944:	da11      	bge.n	800496a <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004946:	7bbb      	ldrb	r3, [r7, #14]
 8004948:	f003 020f 	and.w	r2, r3, #15
 800494c:	6879      	ldr	r1, [r7, #4]
 800494e:	4613      	mov	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	4413      	add	r3, r2
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	440b      	add	r3, r1
 8004958:	3318      	adds	r3, #24
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d117      	bne.n	8004990 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8004960:	6839      	ldr	r1, [r7, #0]
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 fb78 	bl	8005058 <USBD_CtlError>
                  break;
 8004968:	e054      	b.n	8004a14 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800496a:	7bbb      	ldrb	r3, [r7, #14]
 800496c:	f003 020f 	and.w	r2, r3, #15
 8004970:	6879      	ldr	r1, [r7, #4]
 8004972:	4613      	mov	r3, r2
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	4413      	add	r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	440b      	add	r3, r1
 800497c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d104      	bne.n	8004990 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8004986:	6839      	ldr	r1, [r7, #0]
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 fb65 	bl	8005058 <USBD_CtlError>
                  break;
 800498e:	e041      	b.n	8004a14 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004990:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004994:	2b00      	cmp	r3, #0
 8004996:	da0b      	bge.n	80049b0 <USBD_StdEPReq+0x234>
 8004998:	7bbb      	ldrb	r3, [r7, #14]
 800499a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800499e:	4613      	mov	r3, r2
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	4413      	add	r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	3310      	adds	r3, #16
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	4413      	add	r3, r2
 80049ac:	3304      	adds	r3, #4
 80049ae:	e00b      	b.n	80049c8 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80049b0:	7bbb      	ldrb	r3, [r7, #14]
 80049b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80049b6:	4613      	mov	r3, r2
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	4413      	add	r3, r2
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	4413      	add	r3, r2
 80049c6:	3304      	adds	r3, #4
 80049c8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80049ca:	7bbb      	ldrb	r3, [r7, #14]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d002      	beq.n	80049d6 <USBD_StdEPReq+0x25a>
 80049d0:	7bbb      	ldrb	r3, [r7, #14]
 80049d2:	2b80      	cmp	r3, #128	; 0x80
 80049d4:	d103      	bne.n	80049de <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	2200      	movs	r2, #0
 80049da:	601a      	str	r2, [r3, #0]
 80049dc:	e00e      	b.n	80049fc <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80049de:	7bbb      	ldrb	r3, [r7, #14]
 80049e0:	4619      	mov	r1, r3
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f003 fbc6 	bl	8008174 <USBD_LL_IsStallEP>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d003      	beq.n	80049f6 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	2201      	movs	r2, #1
 80049f2:	601a      	str	r2, [r3, #0]
 80049f4:	e002      	b.n	80049fc <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	2200      	movs	r2, #0
 80049fa:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	2202      	movs	r2, #2
 8004a00:	4619      	mov	r1, r3
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 fb92 	bl	800512c <USBD_CtlSendData>
              break;
 8004a08:	e004      	b.n	8004a14 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8004a0a:	6839      	ldr	r1, [r7, #0]
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 fb23 	bl	8005058 <USBD_CtlError>
              break;
 8004a12:	bf00      	nop
          }
          break;
 8004a14:	e004      	b.n	8004a20 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8004a16:	6839      	ldr	r1, [r7, #0]
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 fb1d 	bl	8005058 <USBD_CtlError>
          break;
 8004a1e:	bf00      	nop
      }
      break;
 8004a20:	e004      	b.n	8004a2c <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8004a22:	6839      	ldr	r1, [r7, #0]
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 fb17 	bl	8005058 <USBD_CtlError>
      break;
 8004a2a:	bf00      	nop
  }

  return ret;
 8004a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
	...

08004a38 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004a42:	2300      	movs	r3, #0
 8004a44:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8004a46:	2300      	movs	r3, #0
 8004a48:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	885b      	ldrh	r3, [r3, #2]
 8004a52:	0a1b      	lsrs	r3, r3, #8
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	3b01      	subs	r3, #1
 8004a58:	2b06      	cmp	r3, #6
 8004a5a:	f200 8128 	bhi.w	8004cae <USBD_GetDescriptor+0x276>
 8004a5e:	a201      	add	r2, pc, #4	; (adr r2, 8004a64 <USBD_GetDescriptor+0x2c>)
 8004a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a64:	08004a81 	.word	0x08004a81
 8004a68:	08004a99 	.word	0x08004a99
 8004a6c:	08004ad9 	.word	0x08004ad9
 8004a70:	08004caf 	.word	0x08004caf
 8004a74:	08004caf 	.word	0x08004caf
 8004a78:	08004c4f 	.word	0x08004c4f
 8004a7c:	08004c7b 	.word	0x08004c7b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	7c12      	ldrb	r2, [r2, #16]
 8004a8c:	f107 0108 	add.w	r1, r7, #8
 8004a90:	4610      	mov	r0, r2
 8004a92:	4798      	blx	r3
 8004a94:	60f8      	str	r0, [r7, #12]
      break;
 8004a96:	e112      	b.n	8004cbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	7c1b      	ldrb	r3, [r3, #16]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d10d      	bne.n	8004abc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa8:	f107 0208 	add.w	r2, r7, #8
 8004aac:	4610      	mov	r0, r2
 8004aae:	4798      	blx	r3
 8004ab0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8004aba:	e100      	b.n	8004cbe <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac4:	f107 0208 	add.w	r2, r7, #8
 8004ac8:	4610      	mov	r0, r2
 8004aca:	4798      	blx	r3
 8004acc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	2202      	movs	r2, #2
 8004ad4:	701a      	strb	r2, [r3, #0]
      break;
 8004ad6:	e0f2      	b.n	8004cbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	885b      	ldrh	r3, [r3, #2]
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2b05      	cmp	r3, #5
 8004ae0:	f200 80ac 	bhi.w	8004c3c <USBD_GetDescriptor+0x204>
 8004ae4:	a201      	add	r2, pc, #4	; (adr r2, 8004aec <USBD_GetDescriptor+0xb4>)
 8004ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aea:	bf00      	nop
 8004aec:	08004b05 	.word	0x08004b05
 8004af0:	08004b39 	.word	0x08004b39
 8004af4:	08004b6d 	.word	0x08004b6d
 8004af8:	08004ba1 	.word	0x08004ba1
 8004afc:	08004bd5 	.word	0x08004bd5
 8004b00:	08004c09 	.word	0x08004c09
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d00b      	beq.n	8004b28 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	7c12      	ldrb	r2, [r2, #16]
 8004b1c:	f107 0108 	add.w	r1, r7, #8
 8004b20:	4610      	mov	r0, r2
 8004b22:	4798      	blx	r3
 8004b24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004b26:	e091      	b.n	8004c4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004b28:	6839      	ldr	r1, [r7, #0]
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 fa94 	bl	8005058 <USBD_CtlError>
            err++;
 8004b30:	7afb      	ldrb	r3, [r7, #11]
 8004b32:	3301      	adds	r3, #1
 8004b34:	72fb      	strb	r3, [r7, #11]
          break;
 8004b36:	e089      	b.n	8004c4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d00b      	beq.n	8004b5c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	7c12      	ldrb	r2, [r2, #16]
 8004b50:	f107 0108 	add.w	r1, r7, #8
 8004b54:	4610      	mov	r0, r2
 8004b56:	4798      	blx	r3
 8004b58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004b5a:	e077      	b.n	8004c4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004b5c:	6839      	ldr	r1, [r7, #0]
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 fa7a 	bl	8005058 <USBD_CtlError>
            err++;
 8004b64:	7afb      	ldrb	r3, [r7, #11]
 8004b66:	3301      	adds	r3, #1
 8004b68:	72fb      	strb	r3, [r7, #11]
          break;
 8004b6a:	e06f      	b.n	8004c4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00b      	beq.n	8004b90 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	7c12      	ldrb	r2, [r2, #16]
 8004b84:	f107 0108 	add.w	r1, r7, #8
 8004b88:	4610      	mov	r0, r2
 8004b8a:	4798      	blx	r3
 8004b8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004b8e:	e05d      	b.n	8004c4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004b90:	6839      	ldr	r1, [r7, #0]
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 fa60 	bl	8005058 <USBD_CtlError>
            err++;
 8004b98:	7afb      	ldrb	r3, [r7, #11]
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	72fb      	strb	r3, [r7, #11]
          break;
 8004b9e:	e055      	b.n	8004c4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00b      	beq.n	8004bc4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	7c12      	ldrb	r2, [r2, #16]
 8004bb8:	f107 0108 	add.w	r1, r7, #8
 8004bbc:	4610      	mov	r0, r2
 8004bbe:	4798      	blx	r3
 8004bc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004bc2:	e043      	b.n	8004c4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004bc4:	6839      	ldr	r1, [r7, #0]
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 fa46 	bl	8005058 <USBD_CtlError>
            err++;
 8004bcc:	7afb      	ldrb	r3, [r7, #11]
 8004bce:	3301      	adds	r3, #1
 8004bd0:	72fb      	strb	r3, [r7, #11]
          break;
 8004bd2:	e03b      	b.n	8004c4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004bda:	695b      	ldr	r3, [r3, #20]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00b      	beq.n	8004bf8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004be6:	695b      	ldr	r3, [r3, #20]
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	7c12      	ldrb	r2, [r2, #16]
 8004bec:	f107 0108 	add.w	r1, r7, #8
 8004bf0:	4610      	mov	r0, r2
 8004bf2:	4798      	blx	r3
 8004bf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004bf6:	e029      	b.n	8004c4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004bf8:	6839      	ldr	r1, [r7, #0]
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 fa2c 	bl	8005058 <USBD_CtlError>
            err++;
 8004c00:	7afb      	ldrb	r3, [r7, #11]
 8004c02:	3301      	adds	r3, #1
 8004c04:	72fb      	strb	r3, [r7, #11]
          break;
 8004c06:	e021      	b.n	8004c4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d00b      	beq.n	8004c2c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	7c12      	ldrb	r2, [r2, #16]
 8004c20:	f107 0108 	add.w	r1, r7, #8
 8004c24:	4610      	mov	r0, r2
 8004c26:	4798      	blx	r3
 8004c28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004c2a:	e00f      	b.n	8004c4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004c2c:	6839      	ldr	r1, [r7, #0]
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 fa12 	bl	8005058 <USBD_CtlError>
            err++;
 8004c34:	7afb      	ldrb	r3, [r7, #11]
 8004c36:	3301      	adds	r3, #1
 8004c38:	72fb      	strb	r3, [r7, #11]
          break;
 8004c3a:	e007      	b.n	8004c4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8004c3c:	6839      	ldr	r1, [r7, #0]
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 fa0a 	bl	8005058 <USBD_CtlError>
          err++;
 8004c44:	7afb      	ldrb	r3, [r7, #11]
 8004c46:	3301      	adds	r3, #1
 8004c48:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8004c4a:	e038      	b.n	8004cbe <USBD_GetDescriptor+0x286>
 8004c4c:	e037      	b.n	8004cbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	7c1b      	ldrb	r3, [r3, #16]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d109      	bne.n	8004c6a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c5e:	f107 0208 	add.w	r2, r7, #8
 8004c62:	4610      	mov	r0, r2
 8004c64:	4798      	blx	r3
 8004c66:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004c68:	e029      	b.n	8004cbe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8004c6a:	6839      	ldr	r1, [r7, #0]
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 f9f3 	bl	8005058 <USBD_CtlError>
        err++;
 8004c72:	7afb      	ldrb	r3, [r7, #11]
 8004c74:	3301      	adds	r3, #1
 8004c76:	72fb      	strb	r3, [r7, #11]
      break;
 8004c78:	e021      	b.n	8004cbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	7c1b      	ldrb	r3, [r3, #16]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10d      	bne.n	8004c9e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8a:	f107 0208 	add.w	r2, r7, #8
 8004c8e:	4610      	mov	r0, r2
 8004c90:	4798      	blx	r3
 8004c92:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	3301      	adds	r3, #1
 8004c98:	2207      	movs	r2, #7
 8004c9a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004c9c:	e00f      	b.n	8004cbe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8004c9e:	6839      	ldr	r1, [r7, #0]
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 f9d9 	bl	8005058 <USBD_CtlError>
        err++;
 8004ca6:	7afb      	ldrb	r3, [r7, #11]
 8004ca8:	3301      	adds	r3, #1
 8004caa:	72fb      	strb	r3, [r7, #11]
      break;
 8004cac:	e007      	b.n	8004cbe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8004cae:	6839      	ldr	r1, [r7, #0]
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 f9d1 	bl	8005058 <USBD_CtlError>
      err++;
 8004cb6:	7afb      	ldrb	r3, [r7, #11]
 8004cb8:	3301      	adds	r3, #1
 8004cba:	72fb      	strb	r3, [r7, #11]
      break;
 8004cbc:	bf00      	nop
  }

  if (err != 0U)
 8004cbe:	7afb      	ldrb	r3, [r7, #11]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d11c      	bne.n	8004cfe <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8004cc4:	893b      	ldrh	r3, [r7, #8]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d011      	beq.n	8004cee <USBD_GetDescriptor+0x2b6>
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	88db      	ldrh	r3, [r3, #6]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00d      	beq.n	8004cee <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	88da      	ldrh	r2, [r3, #6]
 8004cd6:	893b      	ldrh	r3, [r7, #8]
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	bf28      	it	cs
 8004cdc:	4613      	movcs	r3, r2
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004ce2:	893b      	ldrh	r3, [r7, #8]
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	68f9      	ldr	r1, [r7, #12]
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 fa1f 	bl	800512c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	88db      	ldrh	r3, [r3, #6]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d104      	bne.n	8004d00 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 fa76 	bl	80051e8 <USBD_CtlSendStatus>
 8004cfc:	e000      	b.n	8004d00 <USBD_GetDescriptor+0x2c8>
    return;
 8004cfe:	bf00      	nop
    }
  }
}
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop

08004d08 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	889b      	ldrh	r3, [r3, #4]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d130      	bne.n	8004d7c <USBD_SetAddress+0x74>
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	88db      	ldrh	r3, [r3, #6]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d12c      	bne.n	8004d7c <USBD_SetAddress+0x74>
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	885b      	ldrh	r3, [r3, #2]
 8004d26:	2b7f      	cmp	r3, #127	; 0x7f
 8004d28:	d828      	bhi.n	8004d7c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	885b      	ldrh	r3, [r3, #2]
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d34:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d3c:	2b03      	cmp	r3, #3
 8004d3e:	d104      	bne.n	8004d4a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8004d40:	6839      	ldr	r1, [r7, #0]
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 f988 	bl	8005058 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d48:	e01c      	b.n	8004d84 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	7bfa      	ldrb	r2, [r7, #15]
 8004d4e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8004d52:	7bfb      	ldrb	r3, [r7, #15]
 8004d54:	4619      	mov	r1, r3
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f003 fa31 	bl	80081be <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f000 fa43 	bl	80051e8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8004d62:	7bfb      	ldrb	r3, [r7, #15]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d004      	beq.n	8004d72 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d70:	e008      	b.n	8004d84 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d7a:	e003      	b.n	8004d84 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8004d7c:	6839      	ldr	r1, [r7, #0]
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 f96a 	bl	8005058 <USBD_CtlError>
  }
}
 8004d84:	bf00      	nop
 8004d86:	3710      	adds	r7, #16
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	885b      	ldrh	r3, [r3, #2]
 8004d9a:	b2da      	uxtb	r2, r3
 8004d9c:	4b41      	ldr	r3, [pc, #260]	; (8004ea4 <USBD_SetConfig+0x118>)
 8004d9e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004da0:	4b40      	ldr	r3, [pc, #256]	; (8004ea4 <USBD_SetConfig+0x118>)
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d904      	bls.n	8004db2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8004da8:	6839      	ldr	r1, [r7, #0]
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 f954 	bl	8005058 <USBD_CtlError>
 8004db0:	e075      	b.n	8004e9e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d002      	beq.n	8004dc2 <USBD_SetConfig+0x36>
 8004dbc:	2b03      	cmp	r3, #3
 8004dbe:	d023      	beq.n	8004e08 <USBD_SetConfig+0x7c>
 8004dc0:	e062      	b.n	8004e88 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8004dc2:	4b38      	ldr	r3, [pc, #224]	; (8004ea4 <USBD_SetConfig+0x118>)
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d01a      	beq.n	8004e00 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8004dca:	4b36      	ldr	r3, [pc, #216]	; (8004ea4 <USBD_SetConfig+0x118>)
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	461a      	mov	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2203      	movs	r2, #3
 8004dd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004ddc:	4b31      	ldr	r3, [pc, #196]	; (8004ea4 <USBD_SetConfig+0x118>)
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	4619      	mov	r1, r3
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f7ff f9f3 	bl	80041ce <USBD_SetClassConfig>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d104      	bne.n	8004df8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8004dee:	6839      	ldr	r1, [r7, #0]
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 f931 	bl	8005058 <USBD_CtlError>
            return;
 8004df6:	e052      	b.n	8004e9e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 f9f5 	bl	80051e8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8004dfe:	e04e      	b.n	8004e9e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f000 f9f1 	bl	80051e8 <USBD_CtlSendStatus>
        break;
 8004e06:	e04a      	b.n	8004e9e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8004e08:	4b26      	ldr	r3, [pc, #152]	; (8004ea4 <USBD_SetConfig+0x118>)
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d112      	bne.n	8004e36 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2202      	movs	r2, #2
 8004e14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8004e18:	4b22      	ldr	r3, [pc, #136]	; (8004ea4 <USBD_SetConfig+0x118>)
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8004e22:	4b20      	ldr	r3, [pc, #128]	; (8004ea4 <USBD_SetConfig+0x118>)
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	4619      	mov	r1, r3
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f7ff f9ef 	bl	800420c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 f9da 	bl	80051e8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8004e34:	e033      	b.n	8004e9e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8004e36:	4b1b      	ldr	r3, [pc, #108]	; (8004ea4 <USBD_SetConfig+0x118>)
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d01d      	beq.n	8004e80 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f7ff f9dd 	bl	800420c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8004e52:	4b14      	ldr	r3, [pc, #80]	; (8004ea4 <USBD_SetConfig+0x118>)
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	461a      	mov	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004e5c:	4b11      	ldr	r3, [pc, #68]	; (8004ea4 <USBD_SetConfig+0x118>)
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	4619      	mov	r1, r3
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f7ff f9b3 	bl	80041ce <USBD_SetClassConfig>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d104      	bne.n	8004e78 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8004e6e:	6839      	ldr	r1, [r7, #0]
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f000 f8f1 	bl	8005058 <USBD_CtlError>
            return;
 8004e76:	e012      	b.n	8004e9e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f000 f9b5 	bl	80051e8 <USBD_CtlSendStatus>
        break;
 8004e7e:	e00e      	b.n	8004e9e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 f9b1 	bl	80051e8 <USBD_CtlSendStatus>
        break;
 8004e86:	e00a      	b.n	8004e9e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8004e88:	6839      	ldr	r1, [r7, #0]
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 f8e4 	bl	8005058 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8004e90:	4b04      	ldr	r3, [pc, #16]	; (8004ea4 <USBD_SetConfig+0x118>)
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	4619      	mov	r1, r3
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f7ff f9b8 	bl	800420c <USBD_ClrClassConfig>
        break;
 8004e9c:	bf00      	nop
    }
  }
}
 8004e9e:	3708      	adds	r7, #8
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	20000234 	.word	0x20000234

08004ea8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	88db      	ldrh	r3, [r3, #6]
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d004      	beq.n	8004ec4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8004eba:	6839      	ldr	r1, [r7, #0]
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 f8cb 	bl	8005058 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8004ec2:	e021      	b.n	8004f08 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	db17      	blt.n	8004efe <USBD_GetConfig+0x56>
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	dd02      	ble.n	8004ed8 <USBD_GetConfig+0x30>
 8004ed2:	2b03      	cmp	r3, #3
 8004ed4:	d00b      	beq.n	8004eee <USBD_GetConfig+0x46>
 8004ed6:	e012      	b.n	8004efe <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	3308      	adds	r3, #8
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 f920 	bl	800512c <USBD_CtlSendData>
        break;
 8004eec:	e00c      	b.n	8004f08 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	3304      	adds	r3, #4
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f918 	bl	800512c <USBD_CtlSendData>
        break;
 8004efc:	e004      	b.n	8004f08 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8004efe:	6839      	ldr	r1, [r7, #0]
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 f8a9 	bl	8005058 <USBD_CtlError>
        break;
 8004f06:	bf00      	nop
}
 8004f08:	bf00      	nop
 8004f0a:	3708      	adds	r7, #8
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f20:	3b01      	subs	r3, #1
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d81e      	bhi.n	8004f64 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	88db      	ldrh	r3, [r3, #6]
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d004      	beq.n	8004f38 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8004f2e:	6839      	ldr	r1, [r7, #0]
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 f891 	bl	8005058 <USBD_CtlError>
        break;
 8004f36:	e01a      	b.n	8004f6e <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d005      	beq.n	8004f54 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	f043 0202 	orr.w	r2, r3, #2
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	330c      	adds	r3, #12
 8004f58:	2202      	movs	r2, #2
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 f8e5 	bl	800512c <USBD_CtlSendData>
      break;
 8004f62:	e004      	b.n	8004f6e <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8004f64:	6839      	ldr	r1, [r7, #0]
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 f876 	bl	8005058 <USBD_CtlError>
      break;
 8004f6c:	bf00      	nop
  }
}
 8004f6e:	bf00      	nop
 8004f70:	3708      	adds	r7, #8
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b082      	sub	sp, #8
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
 8004f7e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	885b      	ldrh	r3, [r3, #2]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d106      	bne.n	8004f96 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 f929 	bl	80051e8 <USBD_CtlSendStatus>
  }
}
 8004f96:	bf00      	nop
 8004f98:	3708      	adds	r7, #8
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b082      	sub	sp, #8
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
 8004fa6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d80b      	bhi.n	8004fcc <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	885b      	ldrh	r3, [r3, #2]
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d10c      	bne.n	8004fd6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 f90f 	bl	80051e8 <USBD_CtlSendStatus>
      }
      break;
 8004fca:	e004      	b.n	8004fd6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8004fcc:	6839      	ldr	r1, [r7, #0]
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 f842 	bl	8005058 <USBD_CtlError>
      break;
 8004fd4:	e000      	b.n	8004fd8 <USBD_ClrFeature+0x3a>
      break;
 8004fd6:	bf00      	nop
  }
}
 8004fd8:	bf00      	nop
 8004fda:	3708      	adds	r7, #8
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	781a      	ldrb	r2, [r3, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	785a      	ldrb	r2, [r3, #1]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	3302      	adds	r3, #2
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	b29a      	uxth	r2, r3
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	3303      	adds	r3, #3
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	b29b      	uxth	r3, r3
 800500a:	021b      	lsls	r3, r3, #8
 800500c:	b29b      	uxth	r3, r3
 800500e:	4413      	add	r3, r2
 8005010:	b29a      	uxth	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	3304      	adds	r3, #4
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	b29a      	uxth	r2, r3
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	3305      	adds	r3, #5
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	b29b      	uxth	r3, r3
 8005026:	021b      	lsls	r3, r3, #8
 8005028:	b29b      	uxth	r3, r3
 800502a:	4413      	add	r3, r2
 800502c:	b29a      	uxth	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	3306      	adds	r3, #6
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	b29a      	uxth	r2, r3
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	3307      	adds	r3, #7
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	b29b      	uxth	r3, r3
 8005042:	021b      	lsls	r3, r3, #8
 8005044:	b29b      	uxth	r3, r3
 8005046:	4413      	add	r3, r2
 8005048:	b29a      	uxth	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	80da      	strh	r2, [r3, #6]

}
 800504e:	bf00      	nop
 8005050:	370c      	adds	r7, #12
 8005052:	46bd      	mov	sp, r7
 8005054:	bc80      	pop	{r7}
 8005056:	4770      	bx	lr

08005058 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8005062:	2180      	movs	r1, #128	; 0x80
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f003 f847 	bl	80080f8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800506a:	2100      	movs	r1, #0
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f003 f843 	bl	80080f8 <USBD_LL_StallEP>
}
 8005072:	bf00      	nop
 8005074:	3708      	adds	r7, #8
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}

0800507a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800507a:	b580      	push	{r7, lr}
 800507c:	b086      	sub	sp, #24
 800507e:	af00      	add	r7, sp, #0
 8005080:	60f8      	str	r0, [r7, #12]
 8005082:	60b9      	str	r1, [r7, #8]
 8005084:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005086:	2300      	movs	r3, #0
 8005088:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d032      	beq.n	80050f6 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f000 f834 	bl	80050fe <USBD_GetLen>
 8005096:	4603      	mov	r3, r0
 8005098:	3301      	adds	r3, #1
 800509a:	b29b      	uxth	r3, r3
 800509c:	005b      	lsls	r3, r3, #1
 800509e:	b29a      	uxth	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80050a4:	7dfb      	ldrb	r3, [r7, #23]
 80050a6:	1c5a      	adds	r2, r3, #1
 80050a8:	75fa      	strb	r2, [r7, #23]
 80050aa:	461a      	mov	r2, r3
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	4413      	add	r3, r2
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	7812      	ldrb	r2, [r2, #0]
 80050b4:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80050b6:	7dfb      	ldrb	r3, [r7, #23]
 80050b8:	1c5a      	adds	r2, r3, #1
 80050ba:	75fa      	strb	r2, [r7, #23]
 80050bc:	461a      	mov	r2, r3
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	4413      	add	r3, r2
 80050c2:	2203      	movs	r2, #3
 80050c4:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80050c6:	e012      	b.n	80050ee <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	1c5a      	adds	r2, r3, #1
 80050cc:	60fa      	str	r2, [r7, #12]
 80050ce:	7dfa      	ldrb	r2, [r7, #23]
 80050d0:	1c51      	adds	r1, r2, #1
 80050d2:	75f9      	strb	r1, [r7, #23]
 80050d4:	4611      	mov	r1, r2
 80050d6:	68ba      	ldr	r2, [r7, #8]
 80050d8:	440a      	add	r2, r1
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80050de:	7dfb      	ldrb	r3, [r7, #23]
 80050e0:	1c5a      	adds	r2, r3, #1
 80050e2:	75fa      	strb	r2, [r7, #23]
 80050e4:	461a      	mov	r2, r3
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	4413      	add	r3, r2
 80050ea:	2200      	movs	r2, #0
 80050ec:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1e8      	bne.n	80050c8 <USBD_GetString+0x4e>
    }
  }
}
 80050f6:	bf00      	nop
 80050f8:	3718      	adds	r7, #24
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}

080050fe <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80050fe:	b480      	push	{r7}
 8005100:	b085      	sub	sp, #20
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005106:	2300      	movs	r3, #0
 8005108:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800510a:	e005      	b.n	8005118 <USBD_GetLen+0x1a>
  {
    len++;
 800510c:	7bfb      	ldrb	r3, [r7, #15]
 800510e:	3301      	adds	r3, #1
 8005110:	73fb      	strb	r3, [r7, #15]
    buf++;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	3301      	adds	r3, #1
 8005116:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1f5      	bne.n	800510c <USBD_GetLen+0xe>
  }

  return len;
 8005120:	7bfb      	ldrb	r3, [r7, #15]
}
 8005122:	4618      	mov	r0, r3
 8005124:	3714      	adds	r7, #20
 8005126:	46bd      	mov	sp, r7
 8005128:	bc80      	pop	{r7}
 800512a:	4770      	bx	lr

0800512c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	4613      	mov	r3, r2
 8005138:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2202      	movs	r2, #2
 800513e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005142:	88fa      	ldrh	r2, [r7, #6]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8005148:	88fa      	ldrh	r2, [r7, #6]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800514e:	88fb      	ldrh	r3, [r7, #6]
 8005150:	68ba      	ldr	r2, [r7, #8]
 8005152:	2100      	movs	r1, #0
 8005154:	68f8      	ldr	r0, [r7, #12]
 8005156:	f003 f851 	bl	80081fc <USBD_LL_Transmit>

  return USBD_OK;
 800515a:	2300      	movs	r3, #0
}
 800515c:	4618      	mov	r0, r3
 800515e:	3710      	adds	r7, #16
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	4613      	mov	r3, r2
 8005170:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005172:	88fb      	ldrh	r3, [r7, #6]
 8005174:	68ba      	ldr	r2, [r7, #8]
 8005176:	2100      	movs	r1, #0
 8005178:	68f8      	ldr	r0, [r7, #12]
 800517a:	f003 f83f 	bl	80081fc <USBD_LL_Transmit>

  return USBD_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	3710      	adds	r7, #16
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	4613      	mov	r3, r2
 8005194:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2203      	movs	r2, #3
 800519a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800519e:	88fa      	ldrh	r2, [r7, #6]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80051a6:	88fa      	ldrh	r2, [r7, #6]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80051ae:	88fb      	ldrh	r3, [r7, #6]
 80051b0:	68ba      	ldr	r2, [r7, #8]
 80051b2:	2100      	movs	r1, #0
 80051b4:	68f8      	ldr	r0, [r7, #12]
 80051b6:	f003 f844 	bl	8008242 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80051ba:	2300      	movs	r3, #0
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3710      	adds	r7, #16
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	4613      	mov	r3, r2
 80051d0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80051d2:	88fb      	ldrh	r3, [r7, #6]
 80051d4:	68ba      	ldr	r2, [r7, #8]
 80051d6:	2100      	movs	r1, #0
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	f003 f832 	bl	8008242 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3710      	adds	r7, #16
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2204      	movs	r2, #4
 80051f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80051f8:	2300      	movs	r3, #0
 80051fa:	2200      	movs	r2, #0
 80051fc:	2100      	movs	r1, #0
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f002 fffc 	bl	80081fc <USBD_LL_Transmit>

  return USBD_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3708      	adds	r7, #8
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b082      	sub	sp, #8
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2205      	movs	r2, #5
 800521a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800521e:	2300      	movs	r3, #0
 8005220:	2200      	movs	r2, #0
 8005222:	2100      	movs	r1, #0
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f003 f80c 	bl	8008242 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	3708      	adds	r7, #8
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800523a:	f3ef 8305 	mrs	r3, IPSR
 800523e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005240:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005242:	2b00      	cmp	r3, #0
 8005244:	d10f      	bne.n	8005266 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005246:	f3ef 8310 	mrs	r3, PRIMASK
 800524a:	607b      	str	r3, [r7, #4]
  return(result);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d109      	bne.n	8005266 <osKernelInitialize+0x32>
 8005252:	4b10      	ldr	r3, [pc, #64]	; (8005294 <osKernelInitialize+0x60>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2b02      	cmp	r3, #2
 8005258:	d109      	bne.n	800526e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800525a:	f3ef 8311 	mrs	r3, BASEPRI
 800525e:	603b      	str	r3, [r7, #0]
  return(result);
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d003      	beq.n	800526e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005266:	f06f 0305 	mvn.w	r3, #5
 800526a:	60fb      	str	r3, [r7, #12]
 800526c:	e00c      	b.n	8005288 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800526e:	4b09      	ldr	r3, [pc, #36]	; (8005294 <osKernelInitialize+0x60>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d105      	bne.n	8005282 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8005276:	4b07      	ldr	r3, [pc, #28]	; (8005294 <osKernelInitialize+0x60>)
 8005278:	2201      	movs	r2, #1
 800527a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800527c:	2300      	movs	r3, #0
 800527e:	60fb      	str	r3, [r7, #12]
 8005280:	e002      	b.n	8005288 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005282:	f04f 33ff 	mov.w	r3, #4294967295
 8005286:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005288:	68fb      	ldr	r3, [r7, #12]
}
 800528a:	4618      	mov	r0, r3
 800528c:	3714      	adds	r7, #20
 800528e:	46bd      	mov	sp, r7
 8005290:	bc80      	pop	{r7}
 8005292:	4770      	bx	lr
 8005294:	20000238 	.word	0x20000238

08005298 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800529e:	f3ef 8305 	mrs	r3, IPSR
 80052a2:	60bb      	str	r3, [r7, #8]
  return(result);
 80052a4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d10f      	bne.n	80052ca <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052aa:	f3ef 8310 	mrs	r3, PRIMASK
 80052ae:	607b      	str	r3, [r7, #4]
  return(result);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d109      	bne.n	80052ca <osKernelStart+0x32>
 80052b6:	4b11      	ldr	r3, [pc, #68]	; (80052fc <osKernelStart+0x64>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d109      	bne.n	80052d2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80052be:	f3ef 8311 	mrs	r3, BASEPRI
 80052c2:	603b      	str	r3, [r7, #0]
  return(result);
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d003      	beq.n	80052d2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80052ca:	f06f 0305 	mvn.w	r3, #5
 80052ce:	60fb      	str	r3, [r7, #12]
 80052d0:	e00e      	b.n	80052f0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80052d2:	4b0a      	ldr	r3, [pc, #40]	; (80052fc <osKernelStart+0x64>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d107      	bne.n	80052ea <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80052da:	4b08      	ldr	r3, [pc, #32]	; (80052fc <osKernelStart+0x64>)
 80052dc:	2202      	movs	r2, #2
 80052de:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80052e0:	f001 f864 	bl	80063ac <vTaskStartScheduler>
      stat = osOK;
 80052e4:	2300      	movs	r3, #0
 80052e6:	60fb      	str	r3, [r7, #12]
 80052e8:	e002      	b.n	80052f0 <osKernelStart+0x58>
    } else {
      stat = osError;
 80052ea:	f04f 33ff 	mov.w	r3, #4294967295
 80052ee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80052f0:	68fb      	ldr	r3, [r7, #12]
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3710      	adds	r7, #16
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	20000238 	.word	0x20000238

08005300 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005300:	b580      	push	{r7, lr}
 8005302:	b092      	sub	sp, #72	; 0x48
 8005304:	af04      	add	r7, sp, #16
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800530c:	2300      	movs	r3, #0
 800530e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005310:	f3ef 8305 	mrs	r3, IPSR
 8005314:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005316:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8005318:	2b00      	cmp	r3, #0
 800531a:	f040 8094 	bne.w	8005446 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800531e:	f3ef 8310 	mrs	r3, PRIMASK
 8005322:	623b      	str	r3, [r7, #32]
  return(result);
 8005324:	6a3b      	ldr	r3, [r7, #32]
 8005326:	2b00      	cmp	r3, #0
 8005328:	f040 808d 	bne.w	8005446 <osThreadNew+0x146>
 800532c:	4b48      	ldr	r3, [pc, #288]	; (8005450 <osThreadNew+0x150>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2b02      	cmp	r3, #2
 8005332:	d106      	bne.n	8005342 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005334:	f3ef 8311 	mrs	r3, BASEPRI
 8005338:	61fb      	str	r3, [r7, #28]
  return(result);
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	2b00      	cmp	r3, #0
 800533e:	f040 8082 	bne.w	8005446 <osThreadNew+0x146>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d07e      	beq.n	8005446 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8005348:	2380      	movs	r3, #128	; 0x80
 800534a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800534c:	2318      	movs	r3, #24
 800534e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8005350:	2300      	movs	r3, #0
 8005352:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8005354:	f107 031b 	add.w	r3, r7, #27
 8005358:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800535a:	f04f 33ff 	mov.w	r3, #4294967295
 800535e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d045      	beq.n	80053f2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d002      	beq.n	8005374 <osThreadNew+0x74>
        name = attr->name;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d002      	beq.n	8005382 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005384:	2b00      	cmp	r3, #0
 8005386:	d008      	beq.n	800539a <osThreadNew+0x9a>
 8005388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800538a:	2b38      	cmp	r3, #56	; 0x38
 800538c:	d805      	bhi.n	800539a <osThreadNew+0x9a>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	2b00      	cmp	r3, #0
 8005398:	d001      	beq.n	800539e <osThreadNew+0x9e>
        return (NULL);
 800539a:	2300      	movs	r3, #0
 800539c:	e054      	b.n	8005448 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	695b      	ldr	r3, [r3, #20]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d003      	beq.n	80053ae <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	695b      	ldr	r3, [r3, #20]
 80053aa:	089b      	lsrs	r3, r3, #2
 80053ac:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00e      	beq.n	80053d4 <osThreadNew+0xd4>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	2b5b      	cmp	r3, #91	; 0x5b
 80053bc:	d90a      	bls.n	80053d4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d006      	beq.n	80053d4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d002      	beq.n	80053d4 <osThreadNew+0xd4>
        mem = 1;
 80053ce:	2301      	movs	r3, #1
 80053d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80053d2:	e010      	b.n	80053f6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d10c      	bne.n	80053f6 <osThreadNew+0xf6>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d108      	bne.n	80053f6 <osThreadNew+0xf6>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d104      	bne.n	80053f6 <osThreadNew+0xf6>
          mem = 0;
 80053ec:	2300      	movs	r3, #0
 80053ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80053f0:	e001      	b.n	80053f6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80053f2:	2300      	movs	r3, #0
 80053f4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80053f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d110      	bne.n	800541e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005404:	9202      	str	r2, [sp, #8]
 8005406:	9301      	str	r3, [sp, #4]
 8005408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800540a:	9300      	str	r3, [sp, #0]
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005410:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005412:	68f8      	ldr	r0, [r7, #12]
 8005414:	f000 fe02 	bl	800601c <xTaskCreateStatic>
 8005418:	4603      	mov	r3, r0
 800541a:	617b      	str	r3, [r7, #20]
 800541c:	e013      	b.n	8005446 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800541e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005420:	2b00      	cmp	r3, #0
 8005422:	d110      	bne.n	8005446 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005426:	b29a      	uxth	r2, r3
 8005428:	f107 0314 	add.w	r3, r7, #20
 800542c:	9301      	str	r3, [sp, #4]
 800542e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005430:	9300      	str	r3, [sp, #0]
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005436:	68f8      	ldr	r0, [r7, #12]
 8005438:	f000 fe49 	bl	80060ce <xTaskCreate>
 800543c:	4603      	mov	r3, r0
 800543e:	2b01      	cmp	r3, #1
 8005440:	d001      	beq.n	8005446 <osThreadNew+0x146>
          hTask = NULL;
 8005442:	2300      	movs	r3, #0
 8005444:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005446:	697b      	ldr	r3, [r7, #20]
}
 8005448:	4618      	mov	r0, r3
 800544a:	3738      	adds	r7, #56	; 0x38
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}
 8005450:	20000238 	.word	0x20000238

08005454 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005454:	b580      	push	{r7, lr}
 8005456:	b086      	sub	sp, #24
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800545c:	f3ef 8305 	mrs	r3, IPSR
 8005460:	613b      	str	r3, [r7, #16]
  return(result);
 8005462:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005464:	2b00      	cmp	r3, #0
 8005466:	d10f      	bne.n	8005488 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005468:	f3ef 8310 	mrs	r3, PRIMASK
 800546c:	60fb      	str	r3, [r7, #12]
  return(result);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d109      	bne.n	8005488 <osDelay+0x34>
 8005474:	4b0d      	ldr	r3, [pc, #52]	; (80054ac <osDelay+0x58>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2b02      	cmp	r3, #2
 800547a:	d109      	bne.n	8005490 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800547c:	f3ef 8311 	mrs	r3, BASEPRI
 8005480:	60bb      	str	r3, [r7, #8]
  return(result);
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d003      	beq.n	8005490 <osDelay+0x3c>
    stat = osErrorISR;
 8005488:	f06f 0305 	mvn.w	r3, #5
 800548c:	617b      	str	r3, [r7, #20]
 800548e:	e007      	b.n	80054a0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005490:	2300      	movs	r3, #0
 8005492:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d002      	beq.n	80054a0 <osDelay+0x4c>
      vTaskDelay(ticks);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 ff52 	bl	8006344 <vTaskDelay>
    }
  }

  return (stat);
 80054a0:	697b      	ldr	r3, [r7, #20]
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3718      	adds	r7, #24
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	20000238 	.word	0x20000238

080054b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80054b0:	b480      	push	{r7}
 80054b2:	b085      	sub	sp, #20
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	4a06      	ldr	r2, [pc, #24]	; (80054d8 <vApplicationGetIdleTaskMemory+0x28>)
 80054c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	4a05      	ldr	r2, [pc, #20]	; (80054dc <vApplicationGetIdleTaskMemory+0x2c>)
 80054c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2280      	movs	r2, #128	; 0x80
 80054cc:	601a      	str	r2, [r3, #0]
}
 80054ce:	bf00      	nop
 80054d0:	3714      	adds	r7, #20
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bc80      	pop	{r7}
 80054d6:	4770      	bx	lr
 80054d8:	2000023c 	.word	0x2000023c
 80054dc:	20000298 	.word	0x20000298

080054e0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80054e0:	b480      	push	{r7}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	4a07      	ldr	r2, [pc, #28]	; (800550c <vApplicationGetTimerTaskMemory+0x2c>)
 80054f0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	4a06      	ldr	r2, [pc, #24]	; (8005510 <vApplicationGetTimerTaskMemory+0x30>)
 80054f6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054fe:	601a      	str	r2, [r3, #0]
}
 8005500:	bf00      	nop
 8005502:	3714      	adds	r7, #20
 8005504:	46bd      	mov	sp, r7
 8005506:	bc80      	pop	{r7}
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	20000498 	.word	0x20000498
 8005510:	200004f4 	.word	0x200004f4

08005514 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f103 0208 	add.w	r2, r3, #8
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f04f 32ff 	mov.w	r2, #4294967295
 800552c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f103 0208 	add.w	r2, r3, #8
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f103 0208 	add.w	r2, r3, #8
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005548:	bf00      	nop
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	bc80      	pop	{r7}
 8005550:	4770      	bx	lr

08005552 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005552:	b480      	push	{r7}
 8005554:	b083      	sub	sp, #12
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005560:	bf00      	nop
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	bc80      	pop	{r7}
 8005568:	4770      	bx	lr

0800556a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800556a:	b480      	push	{r7}
 800556c:	b085      	sub	sp, #20
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
 8005572:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	689a      	ldr	r2, [r3, #8]
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	683a      	ldr	r2, [r7, #0]
 800558e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	683a      	ldr	r2, [r7, #0]
 8005594:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	1c5a      	adds	r2, r3, #1
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	601a      	str	r2, [r3, #0]
}
 80055a6:	bf00      	nop
 80055a8:	3714      	adds	r7, #20
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bc80      	pop	{r7}
 80055ae:	4770      	bx	lr

080055b0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055b0:	b480      	push	{r7}
 80055b2:	b085      	sub	sp, #20
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c6:	d103      	bne.n	80055d0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	60fb      	str	r3, [r7, #12]
 80055ce:	e00c      	b.n	80055ea <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	3308      	adds	r3, #8
 80055d4:	60fb      	str	r3, [r7, #12]
 80055d6:	e002      	b.n	80055de <vListInsert+0x2e>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	60fb      	str	r3, [r7, #12]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68ba      	ldr	r2, [r7, #8]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d2f6      	bcs.n	80055d8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	685a      	ldr	r2, [r3, #4]
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	683a      	ldr	r2, [r7, #0]
 80055f8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	683a      	ldr	r2, [r7, #0]
 8005604:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	1c5a      	adds	r2, r3, #1
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	601a      	str	r2, [r3, #0]
}
 8005616:	bf00      	nop
 8005618:	3714      	adds	r7, #20
 800561a:	46bd      	mov	sp, r7
 800561c:	bc80      	pop	{r7}
 800561e:	4770      	bx	lr

08005620 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	6892      	ldr	r2, [r2, #8]
 8005636:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	6852      	ldr	r2, [r2, #4]
 8005640:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	429a      	cmp	r2, r3
 800564a:	d103      	bne.n	8005654 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	689a      	ldr	r2, [r3, #8]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	1e5a      	subs	r2, r3, #1
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
}
 8005668:	4618      	mov	r0, r3
 800566a:	3714      	adds	r7, #20
 800566c:	46bd      	mov	sp, r7
 800566e:	bc80      	pop	{r7}
 8005670:	4770      	bx	lr
	...

08005674 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d109      	bne.n	800569c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568c:	f383 8811 	msr	BASEPRI, r3
 8005690:	f3bf 8f6f 	isb	sy
 8005694:	f3bf 8f4f 	dsb	sy
 8005698:	60bb      	str	r3, [r7, #8]
 800569a:	e7fe      	b.n	800569a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800569c:	f001 ff94 	bl	80075c8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056a8:	68f9      	ldr	r1, [r7, #12]
 80056aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80056ac:	fb01 f303 	mul.w	r3, r1, r3
 80056b0:	441a      	add	r2, r3
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056cc:	3b01      	subs	r3, #1
 80056ce:	68f9      	ldr	r1, [r7, #12]
 80056d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80056d2:	fb01 f303 	mul.w	r3, r1, r3
 80056d6:	441a      	add	r2, r3
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	22ff      	movs	r2, #255	; 0xff
 80056e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	22ff      	movs	r2, #255	; 0xff
 80056e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d114      	bne.n	800571c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d01a      	beq.n	8005730 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	3310      	adds	r3, #16
 80056fe:	4618      	mov	r0, r3
 8005700:	f001 f8d8 	bl	80068b4 <xTaskRemoveFromEventList>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d012      	beq.n	8005730 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800570a:	4b0d      	ldr	r3, [pc, #52]	; (8005740 <xQueueGenericReset+0xcc>)
 800570c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005710:	601a      	str	r2, [r3, #0]
 8005712:	f3bf 8f4f 	dsb	sy
 8005716:	f3bf 8f6f 	isb	sy
 800571a:	e009      	b.n	8005730 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	3310      	adds	r3, #16
 8005720:	4618      	mov	r0, r3
 8005722:	f7ff fef7 	bl	8005514 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	3324      	adds	r3, #36	; 0x24
 800572a:	4618      	mov	r0, r3
 800572c:	f7ff fef2 	bl	8005514 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005730:	f001 ff78 	bl	8007624 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005734:	2301      	movs	r3, #1
}
 8005736:	4618      	mov	r0, r3
 8005738:	3710      	adds	r7, #16
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	e000ed04 	.word	0xe000ed04

08005744 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005744:	b580      	push	{r7, lr}
 8005746:	b08e      	sub	sp, #56	; 0x38
 8005748:	af02      	add	r7, sp, #8
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	607a      	str	r2, [r7, #4]
 8005750:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d109      	bne.n	800576c <xQueueGenericCreateStatic+0x28>
 8005758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575c:	f383 8811 	msr	BASEPRI, r3
 8005760:	f3bf 8f6f 	isb	sy
 8005764:	f3bf 8f4f 	dsb	sy
 8005768:	62bb      	str	r3, [r7, #40]	; 0x28
 800576a:	e7fe      	b.n	800576a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d109      	bne.n	8005786 <xQueueGenericCreateStatic+0x42>
 8005772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005776:	f383 8811 	msr	BASEPRI, r3
 800577a:	f3bf 8f6f 	isb	sy
 800577e:	f3bf 8f4f 	dsb	sy
 8005782:	627b      	str	r3, [r7, #36]	; 0x24
 8005784:	e7fe      	b.n	8005784 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d002      	beq.n	8005792 <xQueueGenericCreateStatic+0x4e>
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d001      	beq.n	8005796 <xQueueGenericCreateStatic+0x52>
 8005792:	2301      	movs	r3, #1
 8005794:	e000      	b.n	8005798 <xQueueGenericCreateStatic+0x54>
 8005796:	2300      	movs	r3, #0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d109      	bne.n	80057b0 <xQueueGenericCreateStatic+0x6c>
 800579c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a0:	f383 8811 	msr	BASEPRI, r3
 80057a4:	f3bf 8f6f 	isb	sy
 80057a8:	f3bf 8f4f 	dsb	sy
 80057ac:	623b      	str	r3, [r7, #32]
 80057ae:	e7fe      	b.n	80057ae <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d102      	bne.n	80057bc <xQueueGenericCreateStatic+0x78>
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d101      	bne.n	80057c0 <xQueueGenericCreateStatic+0x7c>
 80057bc:	2301      	movs	r3, #1
 80057be:	e000      	b.n	80057c2 <xQueueGenericCreateStatic+0x7e>
 80057c0:	2300      	movs	r3, #0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d109      	bne.n	80057da <xQueueGenericCreateStatic+0x96>
 80057c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ca:	f383 8811 	msr	BASEPRI, r3
 80057ce:	f3bf 8f6f 	isb	sy
 80057d2:	f3bf 8f4f 	dsb	sy
 80057d6:	61fb      	str	r3, [r7, #28]
 80057d8:	e7fe      	b.n	80057d8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80057da:	2350      	movs	r3, #80	; 0x50
 80057dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	2b50      	cmp	r3, #80	; 0x50
 80057e2:	d009      	beq.n	80057f8 <xQueueGenericCreateStatic+0xb4>
 80057e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e8:	f383 8811 	msr	BASEPRI, r3
 80057ec:	f3bf 8f6f 	isb	sy
 80057f0:	f3bf 8f4f 	dsb	sy
 80057f4:	61bb      	str	r3, [r7, #24]
 80057f6:	e7fe      	b.n	80057f6 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80057fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00d      	beq.n	800581e <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005804:	2201      	movs	r2, #1
 8005806:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800580a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800580e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005810:	9300      	str	r3, [sp, #0]
 8005812:	4613      	mov	r3, r2
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	68b9      	ldr	r1, [r7, #8]
 8005818:	68f8      	ldr	r0, [r7, #12]
 800581a:	f000 f805 	bl	8005828 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800581e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005820:	4618      	mov	r0, r3
 8005822:	3730      	adds	r7, #48	; 0x30
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	607a      	str	r2, [r7, #4]
 8005834:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d103      	bne.n	8005844 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	69ba      	ldr	r2, [r7, #24]
 8005840:	601a      	str	r2, [r3, #0]
 8005842:	e002      	b.n	800584a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	68ba      	ldr	r2, [r7, #8]
 8005854:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005856:	2101      	movs	r1, #1
 8005858:	69b8      	ldr	r0, [r7, #24]
 800585a:	f7ff ff0b 	bl	8005674 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	78fa      	ldrb	r2, [r7, #3]
 8005862:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005866:	bf00      	nop
 8005868:	3710      	adds	r7, #16
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
	...

08005870 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b08e      	sub	sp, #56	; 0x38
 8005874:	af00      	add	r7, sp, #0
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	60b9      	str	r1, [r7, #8]
 800587a:	607a      	str	r2, [r7, #4]
 800587c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800587e:	2300      	movs	r3, #0
 8005880:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005888:	2b00      	cmp	r3, #0
 800588a:	d109      	bne.n	80058a0 <xQueueGenericSend+0x30>
 800588c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005890:	f383 8811 	msr	BASEPRI, r3
 8005894:	f3bf 8f6f 	isb	sy
 8005898:	f3bf 8f4f 	dsb	sy
 800589c:	62bb      	str	r3, [r7, #40]	; 0x28
 800589e:	e7fe      	b.n	800589e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d103      	bne.n	80058ae <xQueueGenericSend+0x3e>
 80058a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d101      	bne.n	80058b2 <xQueueGenericSend+0x42>
 80058ae:	2301      	movs	r3, #1
 80058b0:	e000      	b.n	80058b4 <xQueueGenericSend+0x44>
 80058b2:	2300      	movs	r3, #0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d109      	bne.n	80058cc <xQueueGenericSend+0x5c>
 80058b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058bc:	f383 8811 	msr	BASEPRI, r3
 80058c0:	f3bf 8f6f 	isb	sy
 80058c4:	f3bf 8f4f 	dsb	sy
 80058c8:	627b      	str	r3, [r7, #36]	; 0x24
 80058ca:	e7fe      	b.n	80058ca <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d103      	bne.n	80058da <xQueueGenericSend+0x6a>
 80058d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d101      	bne.n	80058de <xQueueGenericSend+0x6e>
 80058da:	2301      	movs	r3, #1
 80058dc:	e000      	b.n	80058e0 <xQueueGenericSend+0x70>
 80058de:	2300      	movs	r3, #0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d109      	bne.n	80058f8 <xQueueGenericSend+0x88>
 80058e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e8:	f383 8811 	msr	BASEPRI, r3
 80058ec:	f3bf 8f6f 	isb	sy
 80058f0:	f3bf 8f4f 	dsb	sy
 80058f4:	623b      	str	r3, [r7, #32]
 80058f6:	e7fe      	b.n	80058f6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80058f8:	f001 f996 	bl	8006c28 <xTaskGetSchedulerState>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d102      	bne.n	8005908 <xQueueGenericSend+0x98>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d101      	bne.n	800590c <xQueueGenericSend+0x9c>
 8005908:	2301      	movs	r3, #1
 800590a:	e000      	b.n	800590e <xQueueGenericSend+0x9e>
 800590c:	2300      	movs	r3, #0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d109      	bne.n	8005926 <xQueueGenericSend+0xb6>
 8005912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005916:	f383 8811 	msr	BASEPRI, r3
 800591a:	f3bf 8f6f 	isb	sy
 800591e:	f3bf 8f4f 	dsb	sy
 8005922:	61fb      	str	r3, [r7, #28]
 8005924:	e7fe      	b.n	8005924 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005926:	f001 fe4f 	bl	80075c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800592a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800592e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005932:	429a      	cmp	r2, r3
 8005934:	d302      	bcc.n	800593c <xQueueGenericSend+0xcc>
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	2b02      	cmp	r3, #2
 800593a:	d129      	bne.n	8005990 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800593c:	683a      	ldr	r2, [r7, #0]
 800593e:	68b9      	ldr	r1, [r7, #8]
 8005940:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005942:	f000 f9ff 	bl	8005d44 <prvCopyDataToQueue>
 8005946:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594c:	2b00      	cmp	r3, #0
 800594e:	d010      	beq.n	8005972 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005952:	3324      	adds	r3, #36	; 0x24
 8005954:	4618      	mov	r0, r3
 8005956:	f000 ffad 	bl	80068b4 <xTaskRemoveFromEventList>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d013      	beq.n	8005988 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005960:	4b3f      	ldr	r3, [pc, #252]	; (8005a60 <xQueueGenericSend+0x1f0>)
 8005962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005966:	601a      	str	r2, [r3, #0]
 8005968:	f3bf 8f4f 	dsb	sy
 800596c:	f3bf 8f6f 	isb	sy
 8005970:	e00a      	b.n	8005988 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005974:	2b00      	cmp	r3, #0
 8005976:	d007      	beq.n	8005988 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005978:	4b39      	ldr	r3, [pc, #228]	; (8005a60 <xQueueGenericSend+0x1f0>)
 800597a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800597e:	601a      	str	r2, [r3, #0]
 8005980:	f3bf 8f4f 	dsb	sy
 8005984:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005988:	f001 fe4c 	bl	8007624 <vPortExitCritical>
				return pdPASS;
 800598c:	2301      	movs	r3, #1
 800598e:	e063      	b.n	8005a58 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d103      	bne.n	800599e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005996:	f001 fe45 	bl	8007624 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800599a:	2300      	movs	r3, #0
 800599c:	e05c      	b.n	8005a58 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800599e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d106      	bne.n	80059b2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80059a4:	f107 0314 	add.w	r3, r7, #20
 80059a8:	4618      	mov	r0, r3
 80059aa:	f000 ffe5 	bl	8006978 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80059ae:	2301      	movs	r3, #1
 80059b0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80059b2:	f001 fe37 	bl	8007624 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80059b6:	f000 fd5d 	bl	8006474 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80059ba:	f001 fe05 	bl	80075c8 <vPortEnterCritical>
 80059be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059c4:	b25b      	sxtb	r3, r3
 80059c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ca:	d103      	bne.n	80059d4 <xQueueGenericSend+0x164>
 80059cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059da:	b25b      	sxtb	r3, r3
 80059dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e0:	d103      	bne.n	80059ea <xQueueGenericSend+0x17a>
 80059e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059ea:	f001 fe1b 	bl	8007624 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80059ee:	1d3a      	adds	r2, r7, #4
 80059f0:	f107 0314 	add.w	r3, r7, #20
 80059f4:	4611      	mov	r1, r2
 80059f6:	4618      	mov	r0, r3
 80059f8:	f000 ffd4 	bl	80069a4 <xTaskCheckForTimeOut>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d124      	bne.n	8005a4c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005a02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a04:	f000 fa96 	bl	8005f34 <prvIsQueueFull>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d018      	beq.n	8005a40 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a10:	3310      	adds	r3, #16
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	4611      	mov	r1, r2
 8005a16:	4618      	mov	r0, r3
 8005a18:	f000 fefe 	bl	8006818 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005a1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a1e:	f000 fa21 	bl	8005e64 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005a22:	f000 fd35 	bl	8006490 <xTaskResumeAll>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f47f af7c 	bne.w	8005926 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8005a2e:	4b0c      	ldr	r3, [pc, #48]	; (8005a60 <xQueueGenericSend+0x1f0>)
 8005a30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a34:	601a      	str	r2, [r3, #0]
 8005a36:	f3bf 8f4f 	dsb	sy
 8005a3a:	f3bf 8f6f 	isb	sy
 8005a3e:	e772      	b.n	8005926 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005a40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a42:	f000 fa0f 	bl	8005e64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a46:	f000 fd23 	bl	8006490 <xTaskResumeAll>
 8005a4a:	e76c      	b.n	8005926 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005a4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a4e:	f000 fa09 	bl	8005e64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a52:	f000 fd1d 	bl	8006490 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005a56:	2300      	movs	r3, #0
		}
	}
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3738      	adds	r7, #56	; 0x38
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	e000ed04 	.word	0xe000ed04

08005a64 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b08e      	sub	sp, #56	; 0x38
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	607a      	str	r2, [r7, #4]
 8005a70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d109      	bne.n	8005a90 <xQueueGenericSendFromISR+0x2c>
 8005a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a80:	f383 8811 	msr	BASEPRI, r3
 8005a84:	f3bf 8f6f 	isb	sy
 8005a88:	f3bf 8f4f 	dsb	sy
 8005a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a8e:	e7fe      	b.n	8005a8e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d103      	bne.n	8005a9e <xQueueGenericSendFromISR+0x3a>
 8005a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d101      	bne.n	8005aa2 <xQueueGenericSendFromISR+0x3e>
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e000      	b.n	8005aa4 <xQueueGenericSendFromISR+0x40>
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d109      	bne.n	8005abc <xQueueGenericSendFromISR+0x58>
 8005aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aac:	f383 8811 	msr	BASEPRI, r3
 8005ab0:	f3bf 8f6f 	isb	sy
 8005ab4:	f3bf 8f4f 	dsb	sy
 8005ab8:	623b      	str	r3, [r7, #32]
 8005aba:	e7fe      	b.n	8005aba <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	2b02      	cmp	r3, #2
 8005ac0:	d103      	bne.n	8005aca <xQueueGenericSendFromISR+0x66>
 8005ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d101      	bne.n	8005ace <xQueueGenericSendFromISR+0x6a>
 8005aca:	2301      	movs	r3, #1
 8005acc:	e000      	b.n	8005ad0 <xQueueGenericSendFromISR+0x6c>
 8005ace:	2300      	movs	r3, #0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d109      	bne.n	8005ae8 <xQueueGenericSendFromISR+0x84>
 8005ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad8:	f383 8811 	msr	BASEPRI, r3
 8005adc:	f3bf 8f6f 	isb	sy
 8005ae0:	f3bf 8f4f 	dsb	sy
 8005ae4:	61fb      	str	r3, [r7, #28]
 8005ae6:	e7fe      	b.n	8005ae6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ae8:	f001 fe28 	bl	800773c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005aec:	f3ef 8211 	mrs	r2, BASEPRI
 8005af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af4:	f383 8811 	msr	BASEPRI, r3
 8005af8:	f3bf 8f6f 	isb	sy
 8005afc:	f3bf 8f4f 	dsb	sy
 8005b00:	61ba      	str	r2, [r7, #24]
 8005b02:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005b04:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b06:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d302      	bcc.n	8005b1a <xQueueGenericSendFromISR+0xb6>
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	d12c      	bne.n	8005b74 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b24:	683a      	ldr	r2, [r7, #0]
 8005b26:	68b9      	ldr	r1, [r7, #8]
 8005b28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b2a:	f000 f90b 	bl	8005d44 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005b2e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b36:	d112      	bne.n	8005b5e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d016      	beq.n	8005b6e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b42:	3324      	adds	r3, #36	; 0x24
 8005b44:	4618      	mov	r0, r3
 8005b46:	f000 feb5 	bl	80068b4 <xTaskRemoveFromEventList>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d00e      	beq.n	8005b6e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00b      	beq.n	8005b6e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	601a      	str	r2, [r3, #0]
 8005b5c:	e007      	b.n	8005b6e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005b5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b62:	3301      	adds	r3, #1
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	b25a      	sxtb	r2, r3
 8005b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005b72:	e001      	b.n	8005b78 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005b74:	2300      	movs	r3, #0
 8005b76:	637b      	str	r3, [r7, #52]	; 0x34
 8005b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b7a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3738      	adds	r7, #56	; 0x38
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b08c      	sub	sp, #48	; 0x30
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d109      	bne.n	8005bba <xQueueReceive+0x2e>
	__asm volatile
 8005ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005baa:	f383 8811 	msr	BASEPRI, r3
 8005bae:	f3bf 8f6f 	isb	sy
 8005bb2:	f3bf 8f4f 	dsb	sy
 8005bb6:	623b      	str	r3, [r7, #32]
 8005bb8:	e7fe      	b.n	8005bb8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d103      	bne.n	8005bc8 <xQueueReceive+0x3c>
 8005bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d101      	bne.n	8005bcc <xQueueReceive+0x40>
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e000      	b.n	8005bce <xQueueReceive+0x42>
 8005bcc:	2300      	movs	r3, #0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d109      	bne.n	8005be6 <xQueueReceive+0x5a>
 8005bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd6:	f383 8811 	msr	BASEPRI, r3
 8005bda:	f3bf 8f6f 	isb	sy
 8005bde:	f3bf 8f4f 	dsb	sy
 8005be2:	61fb      	str	r3, [r7, #28]
 8005be4:	e7fe      	b.n	8005be4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005be6:	f001 f81f 	bl	8006c28 <xTaskGetSchedulerState>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d102      	bne.n	8005bf6 <xQueueReceive+0x6a>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d101      	bne.n	8005bfa <xQueueReceive+0x6e>
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e000      	b.n	8005bfc <xQueueReceive+0x70>
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d109      	bne.n	8005c14 <xQueueReceive+0x88>
 8005c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c04:	f383 8811 	msr	BASEPRI, r3
 8005c08:	f3bf 8f6f 	isb	sy
 8005c0c:	f3bf 8f4f 	dsb	sy
 8005c10:	61bb      	str	r3, [r7, #24]
 8005c12:	e7fe      	b.n	8005c12 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c14:	f001 fcd8 	bl	80075c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c1c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d01f      	beq.n	8005c64 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005c24:	68b9      	ldr	r1, [r7, #8]
 8005c26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c28:	f000 f8f6 	bl	8005e18 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2e:	1e5a      	subs	r2, r3, #1
 8005c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c32:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d00f      	beq.n	8005c5c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3e:	3310      	adds	r3, #16
 8005c40:	4618      	mov	r0, r3
 8005c42:	f000 fe37 	bl	80068b4 <xTaskRemoveFromEventList>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d007      	beq.n	8005c5c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005c4c:	4b3c      	ldr	r3, [pc, #240]	; (8005d40 <xQueueReceive+0x1b4>)
 8005c4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c52:	601a      	str	r2, [r3, #0]
 8005c54:	f3bf 8f4f 	dsb	sy
 8005c58:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005c5c:	f001 fce2 	bl	8007624 <vPortExitCritical>
				return pdPASS;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e069      	b.n	8005d38 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d103      	bne.n	8005c72 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005c6a:	f001 fcdb 	bl	8007624 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	e062      	b.n	8005d38 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d106      	bne.n	8005c86 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c78:	f107 0310 	add.w	r3, r7, #16
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f000 fe7b 	bl	8006978 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c82:	2301      	movs	r3, #1
 8005c84:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c86:	f001 fccd 	bl	8007624 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c8a:	f000 fbf3 	bl	8006474 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c8e:	f001 fc9b 	bl	80075c8 <vPortEnterCritical>
 8005c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c98:	b25b      	sxtb	r3, r3
 8005c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c9e:	d103      	bne.n	8005ca8 <xQueueReceive+0x11c>
 8005ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005caa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cae:	b25b      	sxtb	r3, r3
 8005cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb4:	d103      	bne.n	8005cbe <xQueueReceive+0x132>
 8005cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005cbe:	f001 fcb1 	bl	8007624 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005cc2:	1d3a      	adds	r2, r7, #4
 8005cc4:	f107 0310 	add.w	r3, r7, #16
 8005cc8:	4611      	mov	r1, r2
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f000 fe6a 	bl	80069a4 <xTaskCheckForTimeOut>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d123      	bne.n	8005d1e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005cd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cd8:	f000 f916 	bl	8005f08 <prvIsQueueEmpty>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d017      	beq.n	8005d12 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce4:	3324      	adds	r3, #36	; 0x24
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	4611      	mov	r1, r2
 8005cea:	4618      	mov	r0, r3
 8005cec:	f000 fd94 	bl	8006818 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005cf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cf2:	f000 f8b7 	bl	8005e64 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005cf6:	f000 fbcb 	bl	8006490 <xTaskResumeAll>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d189      	bne.n	8005c14 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005d00:	4b0f      	ldr	r3, [pc, #60]	; (8005d40 <xQueueReceive+0x1b4>)
 8005d02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d06:	601a      	str	r2, [r3, #0]
 8005d08:	f3bf 8f4f 	dsb	sy
 8005d0c:	f3bf 8f6f 	isb	sy
 8005d10:	e780      	b.n	8005c14 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005d12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d14:	f000 f8a6 	bl	8005e64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d18:	f000 fbba 	bl	8006490 <xTaskResumeAll>
 8005d1c:	e77a      	b.n	8005c14 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005d1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d20:	f000 f8a0 	bl	8005e64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d24:	f000 fbb4 	bl	8006490 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d2a:	f000 f8ed 	bl	8005f08 <prvIsQueueEmpty>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f43f af6f 	beq.w	8005c14 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005d36:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3730      	adds	r7, #48	; 0x30
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	e000ed04 	.word	0xe000ed04

08005d44 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b086      	sub	sp, #24
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005d50:	2300      	movs	r3, #0
 8005d52:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d58:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d10d      	bne.n	8005d7e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d14d      	bne.n	8005e06 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f000 ff78 	bl	8006c64 <xTaskPriorityDisinherit>
 8005d74:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	605a      	str	r2, [r3, #4]
 8005d7c:	e043      	b.n	8005e06 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d119      	bne.n	8005db8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6898      	ldr	r0, [r3, #8]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	68b9      	ldr	r1, [r7, #8]
 8005d90:	f002 fad6 	bl	8008340 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	689a      	ldr	r2, [r3, #8]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9c:	441a      	add	r2, r3
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	689a      	ldr	r2, [r3, #8]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d32b      	bcc.n	8005e06 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	609a      	str	r2, [r3, #8]
 8005db6:	e026      	b.n	8005e06 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	68d8      	ldr	r0, [r3, #12]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	68b9      	ldr	r1, [r7, #8]
 8005dc4:	f002 fabc 	bl	8008340 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	68da      	ldr	r2, [r3, #12]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd0:	425b      	negs	r3, r3
 8005dd2:	441a      	add	r2, r3
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	68da      	ldr	r2, [r3, #12]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d207      	bcs.n	8005df4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	685a      	ldr	r2, [r3, #4]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dec:	425b      	negs	r3, r3
 8005dee:	441a      	add	r2, r3
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	d105      	bne.n	8005e06 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d002      	beq.n	8005e06 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	3b01      	subs	r3, #1
 8005e04:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	1c5a      	adds	r2, r3, #1
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005e0e:	697b      	ldr	r3, [r7, #20]
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3718      	adds	r7, #24
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d018      	beq.n	8005e5c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	68da      	ldr	r2, [r3, #12]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e32:	441a      	add	r2, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	68da      	ldr	r2, [r3, #12]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d303      	bcc.n	8005e4c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	68d9      	ldr	r1, [r3, #12]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e54:	461a      	mov	r2, r3
 8005e56:	6838      	ldr	r0, [r7, #0]
 8005e58:	f002 fa72 	bl	8008340 <memcpy>
	}
}
 8005e5c:	bf00      	nop
 8005e5e:	3708      	adds	r7, #8
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005e6c:	f001 fbac 	bl	80075c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e76:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005e78:	e011      	b.n	8005e9e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d012      	beq.n	8005ea8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	3324      	adds	r3, #36	; 0x24
 8005e86:	4618      	mov	r0, r3
 8005e88:	f000 fd14 	bl	80068b4 <xTaskRemoveFromEventList>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d001      	beq.n	8005e96 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005e92:	f000 fde7 	bl	8006a64 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005e96:	7bfb      	ldrb	r3, [r7, #15]
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	dce9      	bgt.n	8005e7a <prvUnlockQueue+0x16>
 8005ea6:	e000      	b.n	8005eaa <prvUnlockQueue+0x46>
					break;
 8005ea8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	22ff      	movs	r2, #255	; 0xff
 8005eae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005eb2:	f001 fbb7 	bl	8007624 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005eb6:	f001 fb87 	bl	80075c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ec0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ec2:	e011      	b.n	8005ee8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d012      	beq.n	8005ef2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	3310      	adds	r3, #16
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f000 fcef 	bl	80068b4 <xTaskRemoveFromEventList>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d001      	beq.n	8005ee0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005edc:	f000 fdc2 	bl	8006a64 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005ee0:	7bbb      	ldrb	r3, [r7, #14]
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ee8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	dce9      	bgt.n	8005ec4 <prvUnlockQueue+0x60>
 8005ef0:	e000      	b.n	8005ef4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005ef2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	22ff      	movs	r2, #255	; 0xff
 8005ef8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005efc:	f001 fb92 	bl	8007624 <vPortExitCritical>
}
 8005f00:	bf00      	nop
 8005f02:	3710      	adds	r7, #16
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f10:	f001 fb5a 	bl	80075c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d102      	bne.n	8005f22 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	60fb      	str	r3, [r7, #12]
 8005f20:	e001      	b.n	8005f26 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005f22:	2300      	movs	r3, #0
 8005f24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f26:	f001 fb7d 	bl	8007624 <vPortExitCritical>

	return xReturn;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3710      	adds	r7, #16
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f3c:	f001 fb44 	bl	80075c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d102      	bne.n	8005f52 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	60fb      	str	r3, [r7, #12]
 8005f50:	e001      	b.n	8005f56 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005f52:	2300      	movs	r3, #0
 8005f54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f56:	f001 fb65 	bl	8007624 <vPortExitCritical>

	return xReturn;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3710      	adds	r7, #16
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005f64:	b480      	push	{r7}
 8005f66:	b085      	sub	sp, #20
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005f6e:	2300      	movs	r3, #0
 8005f70:	60fb      	str	r3, [r7, #12]
 8005f72:	e014      	b.n	8005f9e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005f74:	4a0e      	ldr	r2, [pc, #56]	; (8005fb0 <vQueueAddToRegistry+0x4c>)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d10b      	bne.n	8005f98 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005f80:	490b      	ldr	r1, [pc, #44]	; (8005fb0 <vQueueAddToRegistry+0x4c>)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	683a      	ldr	r2, [r7, #0]
 8005f86:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005f8a:	4a09      	ldr	r2, [pc, #36]	; (8005fb0 <vQueueAddToRegistry+0x4c>)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	00db      	lsls	r3, r3, #3
 8005f90:	4413      	add	r3, r2
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005f96:	e005      	b.n	8005fa4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	3301      	adds	r3, #1
 8005f9c:	60fb      	str	r3, [r7, #12]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2b07      	cmp	r3, #7
 8005fa2:	d9e7      	bls.n	8005f74 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005fa4:	bf00      	nop
 8005fa6:	3714      	adds	r7, #20
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bc80      	pop	{r7}
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	20001bb0 	.word	0x20001bb0

08005fb4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b086      	sub	sp, #24
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005fc4:	f001 fb00 	bl	80075c8 <vPortEnterCritical>
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fce:	b25b      	sxtb	r3, r3
 8005fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd4:	d103      	bne.n	8005fde <vQueueWaitForMessageRestricted+0x2a>
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fe4:	b25b      	sxtb	r3, r3
 8005fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fea:	d103      	bne.n	8005ff4 <vQueueWaitForMessageRestricted+0x40>
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ff4:	f001 fb16 	bl	8007624 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d106      	bne.n	800600e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	3324      	adds	r3, #36	; 0x24
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	68b9      	ldr	r1, [r7, #8]
 8006008:	4618      	mov	r0, r3
 800600a:	f000 fc29 	bl	8006860 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800600e:	6978      	ldr	r0, [r7, #20]
 8006010:	f7ff ff28 	bl	8005e64 <prvUnlockQueue>
	}
 8006014:	bf00      	nop
 8006016:	3718      	adds	r7, #24
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800601c:	b580      	push	{r7, lr}
 800601e:	b08e      	sub	sp, #56	; 0x38
 8006020:	af04      	add	r7, sp, #16
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	607a      	str	r2, [r7, #4]
 8006028:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800602a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800602c:	2b00      	cmp	r3, #0
 800602e:	d109      	bne.n	8006044 <xTaskCreateStatic+0x28>
 8006030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006034:	f383 8811 	msr	BASEPRI, r3
 8006038:	f3bf 8f6f 	isb	sy
 800603c:	f3bf 8f4f 	dsb	sy
 8006040:	623b      	str	r3, [r7, #32]
 8006042:	e7fe      	b.n	8006042 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8006044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006046:	2b00      	cmp	r3, #0
 8006048:	d109      	bne.n	800605e <xTaskCreateStatic+0x42>
 800604a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800604e:	f383 8811 	msr	BASEPRI, r3
 8006052:	f3bf 8f6f 	isb	sy
 8006056:	f3bf 8f4f 	dsb	sy
 800605a:	61fb      	str	r3, [r7, #28]
 800605c:	e7fe      	b.n	800605c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800605e:	235c      	movs	r3, #92	; 0x5c
 8006060:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	2b5c      	cmp	r3, #92	; 0x5c
 8006066:	d009      	beq.n	800607c <xTaskCreateStatic+0x60>
 8006068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800606c:	f383 8811 	msr	BASEPRI, r3
 8006070:	f3bf 8f6f 	isb	sy
 8006074:	f3bf 8f4f 	dsb	sy
 8006078:	61bb      	str	r3, [r7, #24]
 800607a:	e7fe      	b.n	800607a <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800607c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800607e:	2b00      	cmp	r3, #0
 8006080:	d01e      	beq.n	80060c0 <xTaskCreateStatic+0xa4>
 8006082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006084:	2b00      	cmp	r3, #0
 8006086:	d01b      	beq.n	80060c0 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800608a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800608c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006090:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006094:	2202      	movs	r2, #2
 8006096:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800609a:	2300      	movs	r3, #0
 800609c:	9303      	str	r3, [sp, #12]
 800609e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a0:	9302      	str	r3, [sp, #8]
 80060a2:	f107 0314 	add.w	r3, r7, #20
 80060a6:	9301      	str	r3, [sp, #4]
 80060a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060aa:	9300      	str	r3, [sp, #0]
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	68b9      	ldr	r1, [r7, #8]
 80060b2:	68f8      	ldr	r0, [r7, #12]
 80060b4:	f000 f850 	bl	8006158 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80060b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80060ba:	f000 f8d3 	bl	8006264 <prvAddNewTaskToReadyList>
 80060be:	e001      	b.n	80060c4 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80060c0:	2300      	movs	r3, #0
 80060c2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80060c4:	697b      	ldr	r3, [r7, #20]
	}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3728      	adds	r7, #40	; 0x28
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}

080060ce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b08c      	sub	sp, #48	; 0x30
 80060d2:	af04      	add	r7, sp, #16
 80060d4:	60f8      	str	r0, [r7, #12]
 80060d6:	60b9      	str	r1, [r7, #8]
 80060d8:	603b      	str	r3, [r7, #0]
 80060da:	4613      	mov	r3, r2
 80060dc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060de:	88fb      	ldrh	r3, [r7, #6]
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	4618      	mov	r0, r3
 80060e4:	f001 fb66 	bl	80077b4 <pvPortMalloc>
 80060e8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d00e      	beq.n	800610e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80060f0:	205c      	movs	r0, #92	; 0x5c
 80060f2:	f001 fb5f 	bl	80077b4 <pvPortMalloc>
 80060f6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d003      	beq.n	8006106 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	697a      	ldr	r2, [r7, #20]
 8006102:	631a      	str	r2, [r3, #48]	; 0x30
 8006104:	e005      	b.n	8006112 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006106:	6978      	ldr	r0, [r7, #20]
 8006108:	f001 fc16 	bl	8007938 <vPortFree>
 800610c:	e001      	b.n	8006112 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800610e:	2300      	movs	r3, #0
 8006110:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d017      	beq.n	8006148 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	2200      	movs	r2, #0
 800611c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006120:	88fa      	ldrh	r2, [r7, #6]
 8006122:	2300      	movs	r3, #0
 8006124:	9303      	str	r3, [sp, #12]
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	9302      	str	r3, [sp, #8]
 800612a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800612c:	9301      	str	r3, [sp, #4]
 800612e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006130:	9300      	str	r3, [sp, #0]
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	68b9      	ldr	r1, [r7, #8]
 8006136:	68f8      	ldr	r0, [r7, #12]
 8006138:	f000 f80e 	bl	8006158 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800613c:	69f8      	ldr	r0, [r7, #28]
 800613e:	f000 f891 	bl	8006264 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006142:	2301      	movs	r3, #1
 8006144:	61bb      	str	r3, [r7, #24]
 8006146:	e002      	b.n	800614e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006148:	f04f 33ff 	mov.w	r3, #4294967295
 800614c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800614e:	69bb      	ldr	r3, [r7, #24]
	}
 8006150:	4618      	mov	r0, r3
 8006152:	3720      	adds	r7, #32
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b088      	sub	sp, #32
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]
 8006164:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006168:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	461a      	mov	r2, r3
 8006170:	21a5      	movs	r1, #165	; 0xa5
 8006172:	f002 f8f0 	bl	8008356 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006178:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006180:	3b01      	subs	r3, #1
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	4413      	add	r3, r2
 8006186:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006188:	69bb      	ldr	r3, [r7, #24]
 800618a:	f023 0307 	bic.w	r3, r3, #7
 800618e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	f003 0307 	and.w	r3, r3, #7
 8006196:	2b00      	cmp	r3, #0
 8006198:	d009      	beq.n	80061ae <prvInitialiseNewTask+0x56>
 800619a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619e:	f383 8811 	msr	BASEPRI, r3
 80061a2:	f3bf 8f6f 	isb	sy
 80061a6:	f3bf 8f4f 	dsb	sy
 80061aa:	617b      	str	r3, [r7, #20]
 80061ac:	e7fe      	b.n	80061ac <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80061ae:	2300      	movs	r3, #0
 80061b0:	61fb      	str	r3, [r7, #28]
 80061b2:	e012      	b.n	80061da <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80061b4:	68ba      	ldr	r2, [r7, #8]
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	4413      	add	r3, r2
 80061ba:	7819      	ldrb	r1, [r3, #0]
 80061bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	4413      	add	r3, r2
 80061c2:	3334      	adds	r3, #52	; 0x34
 80061c4:	460a      	mov	r2, r1
 80061c6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80061c8:	68ba      	ldr	r2, [r7, #8]
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	4413      	add	r3, r2
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d006      	beq.n	80061e2 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	3301      	adds	r3, #1
 80061d8:	61fb      	str	r3, [r7, #28]
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	2b0f      	cmp	r3, #15
 80061de:	d9e9      	bls.n	80061b4 <prvInitialiseNewTask+0x5c>
 80061e0:	e000      	b.n	80061e4 <prvInitialiseNewTask+0x8c>
		{
			break;
 80061e2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80061e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80061ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ee:	2b37      	cmp	r3, #55	; 0x37
 80061f0:	d901      	bls.n	80061f6 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80061f2:	2337      	movs	r3, #55	; 0x37
 80061f4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80061f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061fa:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80061fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006200:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006204:	2200      	movs	r2, #0
 8006206:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620a:	3304      	adds	r3, #4
 800620c:	4618      	mov	r0, r3
 800620e:	f7ff f9a0 	bl	8005552 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006214:	3318      	adds	r3, #24
 8006216:	4618      	mov	r0, r3
 8006218:	f7ff f99b 	bl	8005552 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800621c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006220:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006224:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800622a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800622c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800622e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006230:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006234:	2200      	movs	r2, #0
 8006236:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623a:	2200      	movs	r2, #0
 800623c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006240:	683a      	ldr	r2, [r7, #0]
 8006242:	68f9      	ldr	r1, [r7, #12]
 8006244:	69b8      	ldr	r0, [r7, #24]
 8006246:	f001 f8d7 	bl	80073f8 <pxPortInitialiseStack>
 800624a:	4602      	mov	r2, r0
 800624c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006252:	2b00      	cmp	r3, #0
 8006254:	d002      	beq.n	800625c <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006258:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800625a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800625c:	bf00      	nop
 800625e:	3720      	adds	r7, #32
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800626c:	f001 f9ac 	bl	80075c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006270:	4b2d      	ldr	r3, [pc, #180]	; (8006328 <prvAddNewTaskToReadyList+0xc4>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	3301      	adds	r3, #1
 8006276:	4a2c      	ldr	r2, [pc, #176]	; (8006328 <prvAddNewTaskToReadyList+0xc4>)
 8006278:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800627a:	4b2c      	ldr	r3, [pc, #176]	; (800632c <prvAddNewTaskToReadyList+0xc8>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d109      	bne.n	8006296 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006282:	4a2a      	ldr	r2, [pc, #168]	; (800632c <prvAddNewTaskToReadyList+0xc8>)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006288:	4b27      	ldr	r3, [pc, #156]	; (8006328 <prvAddNewTaskToReadyList+0xc4>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2b01      	cmp	r3, #1
 800628e:	d110      	bne.n	80062b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006290:	f000 fc0c 	bl	8006aac <prvInitialiseTaskLists>
 8006294:	e00d      	b.n	80062b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006296:	4b26      	ldr	r3, [pc, #152]	; (8006330 <prvAddNewTaskToReadyList+0xcc>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d109      	bne.n	80062b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800629e:	4b23      	ldr	r3, [pc, #140]	; (800632c <prvAddNewTaskToReadyList+0xc8>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d802      	bhi.n	80062b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80062ac:	4a1f      	ldr	r2, [pc, #124]	; (800632c <prvAddNewTaskToReadyList+0xc8>)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80062b2:	4b20      	ldr	r3, [pc, #128]	; (8006334 <prvAddNewTaskToReadyList+0xd0>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	3301      	adds	r3, #1
 80062b8:	4a1e      	ldr	r2, [pc, #120]	; (8006334 <prvAddNewTaskToReadyList+0xd0>)
 80062ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80062bc:	4b1d      	ldr	r3, [pc, #116]	; (8006334 <prvAddNewTaskToReadyList+0xd0>)
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062c8:	4b1b      	ldr	r3, [pc, #108]	; (8006338 <prvAddNewTaskToReadyList+0xd4>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d903      	bls.n	80062d8 <prvAddNewTaskToReadyList+0x74>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d4:	4a18      	ldr	r2, [pc, #96]	; (8006338 <prvAddNewTaskToReadyList+0xd4>)
 80062d6:	6013      	str	r3, [r2, #0]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062dc:	4613      	mov	r3, r2
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	4413      	add	r3, r2
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	4a15      	ldr	r2, [pc, #84]	; (800633c <prvAddNewTaskToReadyList+0xd8>)
 80062e6:	441a      	add	r2, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	3304      	adds	r3, #4
 80062ec:	4619      	mov	r1, r3
 80062ee:	4610      	mov	r0, r2
 80062f0:	f7ff f93b 	bl	800556a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80062f4:	f001 f996 	bl	8007624 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80062f8:	4b0d      	ldr	r3, [pc, #52]	; (8006330 <prvAddNewTaskToReadyList+0xcc>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d00e      	beq.n	800631e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006300:	4b0a      	ldr	r3, [pc, #40]	; (800632c <prvAddNewTaskToReadyList+0xc8>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800630a:	429a      	cmp	r2, r3
 800630c:	d207      	bcs.n	800631e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800630e:	4b0c      	ldr	r3, [pc, #48]	; (8006340 <prvAddNewTaskToReadyList+0xdc>)
 8006310:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006314:	601a      	str	r2, [r3, #0]
 8006316:	f3bf 8f4f 	dsb	sy
 800631a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800631e:	bf00      	nop
 8006320:	3708      	adds	r7, #8
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	20000dc8 	.word	0x20000dc8
 800632c:	200008f4 	.word	0x200008f4
 8006330:	20000dd4 	.word	0x20000dd4
 8006334:	20000de4 	.word	0x20000de4
 8006338:	20000dd0 	.word	0x20000dd0
 800633c:	200008f8 	.word	0x200008f8
 8006340:	e000ed04 	.word	0xe000ed04

08006344 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800634c:	2300      	movs	r3, #0
 800634e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d016      	beq.n	8006384 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006356:	4b13      	ldr	r3, [pc, #76]	; (80063a4 <vTaskDelay+0x60>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d009      	beq.n	8006372 <vTaskDelay+0x2e>
 800635e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006362:	f383 8811 	msr	BASEPRI, r3
 8006366:	f3bf 8f6f 	isb	sy
 800636a:	f3bf 8f4f 	dsb	sy
 800636e:	60bb      	str	r3, [r7, #8]
 8006370:	e7fe      	b.n	8006370 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006372:	f000 f87f 	bl	8006474 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006376:	2100      	movs	r1, #0
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f000 fcdf 	bl	8006d3c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800637e:	f000 f887 	bl	8006490 <xTaskResumeAll>
 8006382:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d107      	bne.n	800639a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800638a:	4b07      	ldr	r3, [pc, #28]	; (80063a8 <vTaskDelay+0x64>)
 800638c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006390:	601a      	str	r2, [r3, #0]
 8006392:	f3bf 8f4f 	dsb	sy
 8006396:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800639a:	bf00      	nop
 800639c:	3710      	adds	r7, #16
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	20000df0 	.word	0x20000df0
 80063a8:	e000ed04 	.word	0xe000ed04

080063ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b08a      	sub	sp, #40	; 0x28
 80063b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80063b2:	2300      	movs	r3, #0
 80063b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80063b6:	2300      	movs	r3, #0
 80063b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80063ba:	463a      	mov	r2, r7
 80063bc:	1d39      	adds	r1, r7, #4
 80063be:	f107 0308 	add.w	r3, r7, #8
 80063c2:	4618      	mov	r0, r3
 80063c4:	f7ff f874 	bl	80054b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80063c8:	6839      	ldr	r1, [r7, #0]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	68ba      	ldr	r2, [r7, #8]
 80063ce:	9202      	str	r2, [sp, #8]
 80063d0:	9301      	str	r3, [sp, #4]
 80063d2:	2300      	movs	r3, #0
 80063d4:	9300      	str	r3, [sp, #0]
 80063d6:	2300      	movs	r3, #0
 80063d8:	460a      	mov	r2, r1
 80063da:	4920      	ldr	r1, [pc, #128]	; (800645c <vTaskStartScheduler+0xb0>)
 80063dc:	4820      	ldr	r0, [pc, #128]	; (8006460 <vTaskStartScheduler+0xb4>)
 80063de:	f7ff fe1d 	bl	800601c <xTaskCreateStatic>
 80063e2:	4602      	mov	r2, r0
 80063e4:	4b1f      	ldr	r3, [pc, #124]	; (8006464 <vTaskStartScheduler+0xb8>)
 80063e6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80063e8:	4b1e      	ldr	r3, [pc, #120]	; (8006464 <vTaskStartScheduler+0xb8>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d002      	beq.n	80063f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80063f0:	2301      	movs	r3, #1
 80063f2:	617b      	str	r3, [r7, #20]
 80063f4:	e001      	b.n	80063fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80063f6:	2300      	movs	r3, #0
 80063f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d102      	bne.n	8006406 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006400:	f000 fcf0 	bl	8006de4 <xTimerCreateTimerTask>
 8006404:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	2b01      	cmp	r3, #1
 800640a:	d115      	bne.n	8006438 <vTaskStartScheduler+0x8c>
 800640c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006410:	f383 8811 	msr	BASEPRI, r3
 8006414:	f3bf 8f6f 	isb	sy
 8006418:	f3bf 8f4f 	dsb	sy
 800641c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800641e:	4b12      	ldr	r3, [pc, #72]	; (8006468 <vTaskStartScheduler+0xbc>)
 8006420:	f04f 32ff 	mov.w	r2, #4294967295
 8006424:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006426:	4b11      	ldr	r3, [pc, #68]	; (800646c <vTaskStartScheduler+0xc0>)
 8006428:	2201      	movs	r2, #1
 800642a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800642c:	4b10      	ldr	r3, [pc, #64]	; (8006470 <vTaskStartScheduler+0xc4>)
 800642e:	2200      	movs	r2, #0
 8006430:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006432:	f001 f859 	bl	80074e8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006436:	e00d      	b.n	8006454 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800643e:	d109      	bne.n	8006454 <vTaskStartScheduler+0xa8>
 8006440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006444:	f383 8811 	msr	BASEPRI, r3
 8006448:	f3bf 8f6f 	isb	sy
 800644c:	f3bf 8f4f 	dsb	sy
 8006450:	60fb      	str	r3, [r7, #12]
 8006452:	e7fe      	b.n	8006452 <vTaskStartScheduler+0xa6>
}
 8006454:	bf00      	nop
 8006456:	3718      	adds	r7, #24
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	080083a0 	.word	0x080083a0
 8006460:	08006a7d 	.word	0x08006a7d
 8006464:	20000dec 	.word	0x20000dec
 8006468:	20000de8 	.word	0x20000de8
 800646c:	20000dd4 	.word	0x20000dd4
 8006470:	20000dcc 	.word	0x20000dcc

08006474 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006474:	b480      	push	{r7}
 8006476:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006478:	4b04      	ldr	r3, [pc, #16]	; (800648c <vTaskSuspendAll+0x18>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	3301      	adds	r3, #1
 800647e:	4a03      	ldr	r2, [pc, #12]	; (800648c <vTaskSuspendAll+0x18>)
 8006480:	6013      	str	r3, [r2, #0]
}
 8006482:	bf00      	nop
 8006484:	46bd      	mov	sp, r7
 8006486:	bc80      	pop	{r7}
 8006488:	4770      	bx	lr
 800648a:	bf00      	nop
 800648c:	20000df0 	.word	0x20000df0

08006490 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006496:	2300      	movs	r3, #0
 8006498:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800649a:	2300      	movs	r3, #0
 800649c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800649e:	4b41      	ldr	r3, [pc, #260]	; (80065a4 <xTaskResumeAll+0x114>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d109      	bne.n	80064ba <xTaskResumeAll+0x2a>
 80064a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064aa:	f383 8811 	msr	BASEPRI, r3
 80064ae:	f3bf 8f6f 	isb	sy
 80064b2:	f3bf 8f4f 	dsb	sy
 80064b6:	603b      	str	r3, [r7, #0]
 80064b8:	e7fe      	b.n	80064b8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80064ba:	f001 f885 	bl	80075c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80064be:	4b39      	ldr	r3, [pc, #228]	; (80065a4 <xTaskResumeAll+0x114>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	3b01      	subs	r3, #1
 80064c4:	4a37      	ldr	r2, [pc, #220]	; (80065a4 <xTaskResumeAll+0x114>)
 80064c6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064c8:	4b36      	ldr	r3, [pc, #216]	; (80065a4 <xTaskResumeAll+0x114>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d162      	bne.n	8006596 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80064d0:	4b35      	ldr	r3, [pc, #212]	; (80065a8 <xTaskResumeAll+0x118>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d05e      	beq.n	8006596 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80064d8:	e02f      	b.n	800653a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80064da:	4b34      	ldr	r3, [pc, #208]	; (80065ac <xTaskResumeAll+0x11c>)
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	3318      	adds	r3, #24
 80064e6:	4618      	mov	r0, r3
 80064e8:	f7ff f89a 	bl	8005620 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	3304      	adds	r3, #4
 80064f0:	4618      	mov	r0, r3
 80064f2:	f7ff f895 	bl	8005620 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064fa:	4b2d      	ldr	r3, [pc, #180]	; (80065b0 <xTaskResumeAll+0x120>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d903      	bls.n	800650a <xTaskResumeAll+0x7a>
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006506:	4a2a      	ldr	r2, [pc, #168]	; (80065b0 <xTaskResumeAll+0x120>)
 8006508:	6013      	str	r3, [r2, #0]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800650e:	4613      	mov	r3, r2
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	4413      	add	r3, r2
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	4a27      	ldr	r2, [pc, #156]	; (80065b4 <xTaskResumeAll+0x124>)
 8006518:	441a      	add	r2, r3
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	3304      	adds	r3, #4
 800651e:	4619      	mov	r1, r3
 8006520:	4610      	mov	r0, r2
 8006522:	f7ff f822 	bl	800556a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800652a:	4b23      	ldr	r3, [pc, #140]	; (80065b8 <xTaskResumeAll+0x128>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006530:	429a      	cmp	r2, r3
 8006532:	d302      	bcc.n	800653a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006534:	4b21      	ldr	r3, [pc, #132]	; (80065bc <xTaskResumeAll+0x12c>)
 8006536:	2201      	movs	r2, #1
 8006538:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800653a:	4b1c      	ldr	r3, [pc, #112]	; (80065ac <xTaskResumeAll+0x11c>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d1cb      	bne.n	80064da <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d001      	beq.n	800654c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006548:	f000 fb4a 	bl	8006be0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800654c:	4b1c      	ldr	r3, [pc, #112]	; (80065c0 <xTaskResumeAll+0x130>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d010      	beq.n	800657a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006558:	f000 f844 	bl	80065e4 <xTaskIncrementTick>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d002      	beq.n	8006568 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006562:	4b16      	ldr	r3, [pc, #88]	; (80065bc <xTaskResumeAll+0x12c>)
 8006564:	2201      	movs	r2, #1
 8006566:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	3b01      	subs	r3, #1
 800656c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d1f1      	bne.n	8006558 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006574:	4b12      	ldr	r3, [pc, #72]	; (80065c0 <xTaskResumeAll+0x130>)
 8006576:	2200      	movs	r2, #0
 8006578:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800657a:	4b10      	ldr	r3, [pc, #64]	; (80065bc <xTaskResumeAll+0x12c>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d009      	beq.n	8006596 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006582:	2301      	movs	r3, #1
 8006584:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006586:	4b0f      	ldr	r3, [pc, #60]	; (80065c4 <xTaskResumeAll+0x134>)
 8006588:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800658c:	601a      	str	r2, [r3, #0]
 800658e:	f3bf 8f4f 	dsb	sy
 8006592:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006596:	f001 f845 	bl	8007624 <vPortExitCritical>

	return xAlreadyYielded;
 800659a:	68bb      	ldr	r3, [r7, #8]
}
 800659c:	4618      	mov	r0, r3
 800659e:	3710      	adds	r7, #16
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	20000df0 	.word	0x20000df0
 80065a8:	20000dc8 	.word	0x20000dc8
 80065ac:	20000d88 	.word	0x20000d88
 80065b0:	20000dd0 	.word	0x20000dd0
 80065b4:	200008f8 	.word	0x200008f8
 80065b8:	200008f4 	.word	0x200008f4
 80065bc:	20000ddc 	.word	0x20000ddc
 80065c0:	20000dd8 	.word	0x20000dd8
 80065c4:	e000ed04 	.word	0xe000ed04

080065c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80065ce:	4b04      	ldr	r3, [pc, #16]	; (80065e0 <xTaskGetTickCount+0x18>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80065d4:	687b      	ldr	r3, [r7, #4]
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	370c      	adds	r7, #12
 80065da:	46bd      	mov	sp, r7
 80065dc:	bc80      	pop	{r7}
 80065de:	4770      	bx	lr
 80065e0:	20000dcc 	.word	0x20000dcc

080065e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b086      	sub	sp, #24
 80065e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80065ea:	2300      	movs	r3, #0
 80065ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065ee:	4b51      	ldr	r3, [pc, #324]	; (8006734 <xTaskIncrementTick+0x150>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	f040 808d 	bne.w	8006712 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80065f8:	4b4f      	ldr	r3, [pc, #316]	; (8006738 <xTaskIncrementTick+0x154>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	3301      	adds	r3, #1
 80065fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006600:	4a4d      	ldr	r2, [pc, #308]	; (8006738 <xTaskIncrementTick+0x154>)
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d11f      	bne.n	800664c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800660c:	4b4b      	ldr	r3, [pc, #300]	; (800673c <xTaskIncrementTick+0x158>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d009      	beq.n	800662a <xTaskIncrementTick+0x46>
 8006616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800661a:	f383 8811 	msr	BASEPRI, r3
 800661e:	f3bf 8f6f 	isb	sy
 8006622:	f3bf 8f4f 	dsb	sy
 8006626:	603b      	str	r3, [r7, #0]
 8006628:	e7fe      	b.n	8006628 <xTaskIncrementTick+0x44>
 800662a:	4b44      	ldr	r3, [pc, #272]	; (800673c <xTaskIncrementTick+0x158>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	60fb      	str	r3, [r7, #12]
 8006630:	4b43      	ldr	r3, [pc, #268]	; (8006740 <xTaskIncrementTick+0x15c>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a41      	ldr	r2, [pc, #260]	; (800673c <xTaskIncrementTick+0x158>)
 8006636:	6013      	str	r3, [r2, #0]
 8006638:	4a41      	ldr	r2, [pc, #260]	; (8006740 <xTaskIncrementTick+0x15c>)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	6013      	str	r3, [r2, #0]
 800663e:	4b41      	ldr	r3, [pc, #260]	; (8006744 <xTaskIncrementTick+0x160>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	3301      	adds	r3, #1
 8006644:	4a3f      	ldr	r2, [pc, #252]	; (8006744 <xTaskIncrementTick+0x160>)
 8006646:	6013      	str	r3, [r2, #0]
 8006648:	f000 faca 	bl	8006be0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800664c:	4b3e      	ldr	r3, [pc, #248]	; (8006748 <xTaskIncrementTick+0x164>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	693a      	ldr	r2, [r7, #16]
 8006652:	429a      	cmp	r2, r3
 8006654:	d34e      	bcc.n	80066f4 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006656:	4b39      	ldr	r3, [pc, #228]	; (800673c <xTaskIncrementTick+0x158>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d101      	bne.n	8006664 <xTaskIncrementTick+0x80>
 8006660:	2301      	movs	r3, #1
 8006662:	e000      	b.n	8006666 <xTaskIncrementTick+0x82>
 8006664:	2300      	movs	r3, #0
 8006666:	2b00      	cmp	r3, #0
 8006668:	d004      	beq.n	8006674 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800666a:	4b37      	ldr	r3, [pc, #220]	; (8006748 <xTaskIncrementTick+0x164>)
 800666c:	f04f 32ff 	mov.w	r2, #4294967295
 8006670:	601a      	str	r2, [r3, #0]
					break;
 8006672:	e03f      	b.n	80066f4 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006674:	4b31      	ldr	r3, [pc, #196]	; (800673c <xTaskIncrementTick+0x158>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006684:	693a      	ldr	r2, [r7, #16]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	429a      	cmp	r2, r3
 800668a:	d203      	bcs.n	8006694 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800668c:	4a2e      	ldr	r2, [pc, #184]	; (8006748 <xTaskIncrementTick+0x164>)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6013      	str	r3, [r2, #0]
						break;
 8006692:	e02f      	b.n	80066f4 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	3304      	adds	r3, #4
 8006698:	4618      	mov	r0, r3
 800669a:	f7fe ffc1 	bl	8005620 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d004      	beq.n	80066b0 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	3318      	adds	r3, #24
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7fe ffb8 	bl	8005620 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066b4:	4b25      	ldr	r3, [pc, #148]	; (800674c <xTaskIncrementTick+0x168>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d903      	bls.n	80066c4 <xTaskIncrementTick+0xe0>
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c0:	4a22      	ldr	r2, [pc, #136]	; (800674c <xTaskIncrementTick+0x168>)
 80066c2:	6013      	str	r3, [r2, #0]
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066c8:	4613      	mov	r3, r2
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	4413      	add	r3, r2
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	4a1f      	ldr	r2, [pc, #124]	; (8006750 <xTaskIncrementTick+0x16c>)
 80066d2:	441a      	add	r2, r3
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	3304      	adds	r3, #4
 80066d8:	4619      	mov	r1, r3
 80066da:	4610      	mov	r0, r2
 80066dc:	f7fe ff45 	bl	800556a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066e4:	4b1b      	ldr	r3, [pc, #108]	; (8006754 <xTaskIncrementTick+0x170>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d3b3      	bcc.n	8006656 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80066ee:	2301      	movs	r3, #1
 80066f0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066f2:	e7b0      	b.n	8006656 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80066f4:	4b17      	ldr	r3, [pc, #92]	; (8006754 <xTaskIncrementTick+0x170>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066fa:	4915      	ldr	r1, [pc, #84]	; (8006750 <xTaskIncrementTick+0x16c>)
 80066fc:	4613      	mov	r3, r2
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	4413      	add	r3, r2
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	440b      	add	r3, r1
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2b01      	cmp	r3, #1
 800670a:	d907      	bls.n	800671c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800670c:	2301      	movs	r3, #1
 800670e:	617b      	str	r3, [r7, #20]
 8006710:	e004      	b.n	800671c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006712:	4b11      	ldr	r3, [pc, #68]	; (8006758 <xTaskIncrementTick+0x174>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	3301      	adds	r3, #1
 8006718:	4a0f      	ldr	r2, [pc, #60]	; (8006758 <xTaskIncrementTick+0x174>)
 800671a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800671c:	4b0f      	ldr	r3, [pc, #60]	; (800675c <xTaskIncrementTick+0x178>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d001      	beq.n	8006728 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8006724:	2301      	movs	r3, #1
 8006726:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006728:	697b      	ldr	r3, [r7, #20]
}
 800672a:	4618      	mov	r0, r3
 800672c:	3718      	adds	r7, #24
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
 8006732:	bf00      	nop
 8006734:	20000df0 	.word	0x20000df0
 8006738:	20000dcc 	.word	0x20000dcc
 800673c:	20000d80 	.word	0x20000d80
 8006740:	20000d84 	.word	0x20000d84
 8006744:	20000de0 	.word	0x20000de0
 8006748:	20000de8 	.word	0x20000de8
 800674c:	20000dd0 	.word	0x20000dd0
 8006750:	200008f8 	.word	0x200008f8
 8006754:	200008f4 	.word	0x200008f4
 8006758:	20000dd8 	.word	0x20000dd8
 800675c:	20000ddc 	.word	0x20000ddc

08006760 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006766:	4b27      	ldr	r3, [pc, #156]	; (8006804 <vTaskSwitchContext+0xa4>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d003      	beq.n	8006776 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800676e:	4b26      	ldr	r3, [pc, #152]	; (8006808 <vTaskSwitchContext+0xa8>)
 8006770:	2201      	movs	r2, #1
 8006772:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006774:	e040      	b.n	80067f8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8006776:	4b24      	ldr	r3, [pc, #144]	; (8006808 <vTaskSwitchContext+0xa8>)
 8006778:	2200      	movs	r2, #0
 800677a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800677c:	4b23      	ldr	r3, [pc, #140]	; (800680c <vTaskSwitchContext+0xac>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	60fb      	str	r3, [r7, #12]
 8006782:	e00f      	b.n	80067a4 <vTaskSwitchContext+0x44>
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d109      	bne.n	800679e <vTaskSwitchContext+0x3e>
 800678a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678e:	f383 8811 	msr	BASEPRI, r3
 8006792:	f3bf 8f6f 	isb	sy
 8006796:	f3bf 8f4f 	dsb	sy
 800679a:	607b      	str	r3, [r7, #4]
 800679c:	e7fe      	b.n	800679c <vTaskSwitchContext+0x3c>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	3b01      	subs	r3, #1
 80067a2:	60fb      	str	r3, [r7, #12]
 80067a4:	491a      	ldr	r1, [pc, #104]	; (8006810 <vTaskSwitchContext+0xb0>)
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	4613      	mov	r3, r2
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	4413      	add	r3, r2
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	440b      	add	r3, r1
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d0e5      	beq.n	8006784 <vTaskSwitchContext+0x24>
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	4613      	mov	r3, r2
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	4413      	add	r3, r2
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	4a13      	ldr	r2, [pc, #76]	; (8006810 <vTaskSwitchContext+0xb0>)
 80067c4:	4413      	add	r3, r2
 80067c6:	60bb      	str	r3, [r7, #8]
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	685a      	ldr	r2, [r3, #4]
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	605a      	str	r2, [r3, #4]
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	685a      	ldr	r2, [r3, #4]
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	3308      	adds	r3, #8
 80067da:	429a      	cmp	r2, r3
 80067dc:	d104      	bne.n	80067e8 <vTaskSwitchContext+0x88>
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	685a      	ldr	r2, [r3, #4]
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	605a      	str	r2, [r3, #4]
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	4a09      	ldr	r2, [pc, #36]	; (8006814 <vTaskSwitchContext+0xb4>)
 80067f0:	6013      	str	r3, [r2, #0]
 80067f2:	4a06      	ldr	r2, [pc, #24]	; (800680c <vTaskSwitchContext+0xac>)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6013      	str	r3, [r2, #0]
}
 80067f8:	bf00      	nop
 80067fa:	3714      	adds	r7, #20
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bc80      	pop	{r7}
 8006800:	4770      	bx	lr
 8006802:	bf00      	nop
 8006804:	20000df0 	.word	0x20000df0
 8006808:	20000ddc 	.word	0x20000ddc
 800680c:	20000dd0 	.word	0x20000dd0
 8006810:	200008f8 	.word	0x200008f8
 8006814:	200008f4 	.word	0x200008f4

08006818 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d109      	bne.n	800683c <vTaskPlaceOnEventList+0x24>
 8006828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800682c:	f383 8811 	msr	BASEPRI, r3
 8006830:	f3bf 8f6f 	isb	sy
 8006834:	f3bf 8f4f 	dsb	sy
 8006838:	60fb      	str	r3, [r7, #12]
 800683a:	e7fe      	b.n	800683a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800683c:	4b07      	ldr	r3, [pc, #28]	; (800685c <vTaskPlaceOnEventList+0x44>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	3318      	adds	r3, #24
 8006842:	4619      	mov	r1, r3
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f7fe feb3 	bl	80055b0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800684a:	2101      	movs	r1, #1
 800684c:	6838      	ldr	r0, [r7, #0]
 800684e:	f000 fa75 	bl	8006d3c <prvAddCurrentTaskToDelayedList>
}
 8006852:	bf00      	nop
 8006854:	3710      	adds	r7, #16
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	200008f4 	.word	0x200008f4

08006860 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006860:	b580      	push	{r7, lr}
 8006862:	b086      	sub	sp, #24
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d109      	bne.n	8006886 <vTaskPlaceOnEventListRestricted+0x26>
 8006872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006876:	f383 8811 	msr	BASEPRI, r3
 800687a:	f3bf 8f6f 	isb	sy
 800687e:	f3bf 8f4f 	dsb	sy
 8006882:	617b      	str	r3, [r7, #20]
 8006884:	e7fe      	b.n	8006884 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006886:	4b0a      	ldr	r3, [pc, #40]	; (80068b0 <vTaskPlaceOnEventListRestricted+0x50>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	3318      	adds	r3, #24
 800688c:	4619      	mov	r1, r3
 800688e:	68f8      	ldr	r0, [r7, #12]
 8006890:	f7fe fe6b 	bl	800556a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d002      	beq.n	80068a0 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800689a:	f04f 33ff 	mov.w	r3, #4294967295
 800689e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80068a0:	6879      	ldr	r1, [r7, #4]
 80068a2:	68b8      	ldr	r0, [r7, #8]
 80068a4:	f000 fa4a 	bl	8006d3c <prvAddCurrentTaskToDelayedList>
	}
 80068a8:	bf00      	nop
 80068aa:	3718      	adds	r7, #24
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	200008f4 	.word	0x200008f4

080068b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b086      	sub	sp, #24
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d109      	bne.n	80068de <xTaskRemoveFromEventList+0x2a>
 80068ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ce:	f383 8811 	msr	BASEPRI, r3
 80068d2:	f3bf 8f6f 	isb	sy
 80068d6:	f3bf 8f4f 	dsb	sy
 80068da:	60fb      	str	r3, [r7, #12]
 80068dc:	e7fe      	b.n	80068dc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	3318      	adds	r3, #24
 80068e2:	4618      	mov	r0, r3
 80068e4:	f7fe fe9c 	bl	8005620 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068e8:	4b1d      	ldr	r3, [pc, #116]	; (8006960 <xTaskRemoveFromEventList+0xac>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d11d      	bne.n	800692c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	3304      	adds	r3, #4
 80068f4:	4618      	mov	r0, r3
 80068f6:	f7fe fe93 	bl	8005620 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068fe:	4b19      	ldr	r3, [pc, #100]	; (8006964 <xTaskRemoveFromEventList+0xb0>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	429a      	cmp	r2, r3
 8006904:	d903      	bls.n	800690e <xTaskRemoveFromEventList+0x5a>
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800690a:	4a16      	ldr	r2, [pc, #88]	; (8006964 <xTaskRemoveFromEventList+0xb0>)
 800690c:	6013      	str	r3, [r2, #0]
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006912:	4613      	mov	r3, r2
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	4413      	add	r3, r2
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	4a13      	ldr	r2, [pc, #76]	; (8006968 <xTaskRemoveFromEventList+0xb4>)
 800691c:	441a      	add	r2, r3
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	3304      	adds	r3, #4
 8006922:	4619      	mov	r1, r3
 8006924:	4610      	mov	r0, r2
 8006926:	f7fe fe20 	bl	800556a <vListInsertEnd>
 800692a:	e005      	b.n	8006938 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	3318      	adds	r3, #24
 8006930:	4619      	mov	r1, r3
 8006932:	480e      	ldr	r0, [pc, #56]	; (800696c <xTaskRemoveFromEventList+0xb8>)
 8006934:	f7fe fe19 	bl	800556a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800693c:	4b0c      	ldr	r3, [pc, #48]	; (8006970 <xTaskRemoveFromEventList+0xbc>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006942:	429a      	cmp	r2, r3
 8006944:	d905      	bls.n	8006952 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006946:	2301      	movs	r3, #1
 8006948:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800694a:	4b0a      	ldr	r3, [pc, #40]	; (8006974 <xTaskRemoveFromEventList+0xc0>)
 800694c:	2201      	movs	r2, #1
 800694e:	601a      	str	r2, [r3, #0]
 8006950:	e001      	b.n	8006956 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006952:	2300      	movs	r3, #0
 8006954:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006956:	697b      	ldr	r3, [r7, #20]
}
 8006958:	4618      	mov	r0, r3
 800695a:	3718      	adds	r7, #24
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	20000df0 	.word	0x20000df0
 8006964:	20000dd0 	.word	0x20000dd0
 8006968:	200008f8 	.word	0x200008f8
 800696c:	20000d88 	.word	0x20000d88
 8006970:	200008f4 	.word	0x200008f4
 8006974:	20000ddc 	.word	0x20000ddc

08006978 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006980:	4b06      	ldr	r3, [pc, #24]	; (800699c <vTaskInternalSetTimeOutState+0x24>)
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006988:	4b05      	ldr	r3, [pc, #20]	; (80069a0 <vTaskInternalSetTimeOutState+0x28>)
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	605a      	str	r2, [r3, #4]
}
 8006990:	bf00      	nop
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	bc80      	pop	{r7}
 8006998:	4770      	bx	lr
 800699a:	bf00      	nop
 800699c:	20000de0 	.word	0x20000de0
 80069a0:	20000dcc 	.word	0x20000dcc

080069a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b088      	sub	sp, #32
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d109      	bne.n	80069c8 <xTaskCheckForTimeOut+0x24>
 80069b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b8:	f383 8811 	msr	BASEPRI, r3
 80069bc:	f3bf 8f6f 	isb	sy
 80069c0:	f3bf 8f4f 	dsb	sy
 80069c4:	613b      	str	r3, [r7, #16]
 80069c6:	e7fe      	b.n	80069c6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d109      	bne.n	80069e2 <xTaskCheckForTimeOut+0x3e>
 80069ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d2:	f383 8811 	msr	BASEPRI, r3
 80069d6:	f3bf 8f6f 	isb	sy
 80069da:	f3bf 8f4f 	dsb	sy
 80069de:	60fb      	str	r3, [r7, #12]
 80069e0:	e7fe      	b.n	80069e0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80069e2:	f000 fdf1 	bl	80075c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80069e6:	4b1d      	ldr	r3, [pc, #116]	; (8006a5c <xTaskCheckForTimeOut+0xb8>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	69ba      	ldr	r2, [r7, #24]
 80069f2:	1ad3      	subs	r3, r2, r3
 80069f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069fe:	d102      	bne.n	8006a06 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006a00:	2300      	movs	r3, #0
 8006a02:	61fb      	str	r3, [r7, #28]
 8006a04:	e023      	b.n	8006a4e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	4b15      	ldr	r3, [pc, #84]	; (8006a60 <xTaskCheckForTimeOut+0xbc>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d007      	beq.n	8006a22 <xTaskCheckForTimeOut+0x7e>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	69ba      	ldr	r2, [r7, #24]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d302      	bcc.n	8006a22 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	61fb      	str	r3, [r7, #28]
 8006a20:	e015      	b.n	8006a4e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	697a      	ldr	r2, [r7, #20]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d20b      	bcs.n	8006a44 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	1ad2      	subs	r2, r2, r3
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f7ff ff9d 	bl	8006978 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	61fb      	str	r3, [r7, #28]
 8006a42:	e004      	b.n	8006a4e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	2200      	movs	r2, #0
 8006a48:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006a4e:	f000 fde9 	bl	8007624 <vPortExitCritical>

	return xReturn;
 8006a52:	69fb      	ldr	r3, [r7, #28]
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3720      	adds	r7, #32
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}
 8006a5c:	20000dcc 	.word	0x20000dcc
 8006a60:	20000de0 	.word	0x20000de0

08006a64 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006a64:	b480      	push	{r7}
 8006a66:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006a68:	4b03      	ldr	r3, [pc, #12]	; (8006a78 <vTaskMissedYield+0x14>)
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	601a      	str	r2, [r3, #0]
}
 8006a6e:	bf00      	nop
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bc80      	pop	{r7}
 8006a74:	4770      	bx	lr
 8006a76:	bf00      	nop
 8006a78:	20000ddc 	.word	0x20000ddc

08006a7c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006a84:	f000 f852 	bl	8006b2c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006a88:	4b06      	ldr	r3, [pc, #24]	; (8006aa4 <prvIdleTask+0x28>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d9f9      	bls.n	8006a84 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006a90:	4b05      	ldr	r3, [pc, #20]	; (8006aa8 <prvIdleTask+0x2c>)
 8006a92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a96:	601a      	str	r2, [r3, #0]
 8006a98:	f3bf 8f4f 	dsb	sy
 8006a9c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006aa0:	e7f0      	b.n	8006a84 <prvIdleTask+0x8>
 8006aa2:	bf00      	nop
 8006aa4:	200008f8 	.word	0x200008f8
 8006aa8:	e000ed04 	.word	0xe000ed04

08006aac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b082      	sub	sp, #8
 8006ab0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	607b      	str	r3, [r7, #4]
 8006ab6:	e00c      	b.n	8006ad2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	4613      	mov	r3, r2
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	4413      	add	r3, r2
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	4a12      	ldr	r2, [pc, #72]	; (8006b0c <prvInitialiseTaskLists+0x60>)
 8006ac4:	4413      	add	r3, r2
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f7fe fd24 	bl	8005514 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	3301      	adds	r3, #1
 8006ad0:	607b      	str	r3, [r7, #4]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2b37      	cmp	r3, #55	; 0x37
 8006ad6:	d9ef      	bls.n	8006ab8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006ad8:	480d      	ldr	r0, [pc, #52]	; (8006b10 <prvInitialiseTaskLists+0x64>)
 8006ada:	f7fe fd1b 	bl	8005514 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006ade:	480d      	ldr	r0, [pc, #52]	; (8006b14 <prvInitialiseTaskLists+0x68>)
 8006ae0:	f7fe fd18 	bl	8005514 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006ae4:	480c      	ldr	r0, [pc, #48]	; (8006b18 <prvInitialiseTaskLists+0x6c>)
 8006ae6:	f7fe fd15 	bl	8005514 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006aea:	480c      	ldr	r0, [pc, #48]	; (8006b1c <prvInitialiseTaskLists+0x70>)
 8006aec:	f7fe fd12 	bl	8005514 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006af0:	480b      	ldr	r0, [pc, #44]	; (8006b20 <prvInitialiseTaskLists+0x74>)
 8006af2:	f7fe fd0f 	bl	8005514 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006af6:	4b0b      	ldr	r3, [pc, #44]	; (8006b24 <prvInitialiseTaskLists+0x78>)
 8006af8:	4a05      	ldr	r2, [pc, #20]	; (8006b10 <prvInitialiseTaskLists+0x64>)
 8006afa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006afc:	4b0a      	ldr	r3, [pc, #40]	; (8006b28 <prvInitialiseTaskLists+0x7c>)
 8006afe:	4a05      	ldr	r2, [pc, #20]	; (8006b14 <prvInitialiseTaskLists+0x68>)
 8006b00:	601a      	str	r2, [r3, #0]
}
 8006b02:	bf00      	nop
 8006b04:	3708      	adds	r7, #8
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
 8006b0a:	bf00      	nop
 8006b0c:	200008f8 	.word	0x200008f8
 8006b10:	20000d58 	.word	0x20000d58
 8006b14:	20000d6c 	.word	0x20000d6c
 8006b18:	20000d88 	.word	0x20000d88
 8006b1c:	20000d9c 	.word	0x20000d9c
 8006b20:	20000db4 	.word	0x20000db4
 8006b24:	20000d80 	.word	0x20000d80
 8006b28:	20000d84 	.word	0x20000d84

08006b2c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b32:	e019      	b.n	8006b68 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006b34:	f000 fd48 	bl	80075c8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006b38:	4b0f      	ldr	r3, [pc, #60]	; (8006b78 <prvCheckTasksWaitingTermination+0x4c>)
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	3304      	adds	r3, #4
 8006b44:	4618      	mov	r0, r3
 8006b46:	f7fe fd6b 	bl	8005620 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006b4a:	4b0c      	ldr	r3, [pc, #48]	; (8006b7c <prvCheckTasksWaitingTermination+0x50>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	3b01      	subs	r3, #1
 8006b50:	4a0a      	ldr	r2, [pc, #40]	; (8006b7c <prvCheckTasksWaitingTermination+0x50>)
 8006b52:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006b54:	4b0a      	ldr	r3, [pc, #40]	; (8006b80 <prvCheckTasksWaitingTermination+0x54>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	4a09      	ldr	r2, [pc, #36]	; (8006b80 <prvCheckTasksWaitingTermination+0x54>)
 8006b5c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006b5e:	f000 fd61 	bl	8007624 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 f80e 	bl	8006b84 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b68:	4b05      	ldr	r3, [pc, #20]	; (8006b80 <prvCheckTasksWaitingTermination+0x54>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d1e1      	bne.n	8006b34 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006b70:	bf00      	nop
 8006b72:	3708      	adds	r7, #8
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	20000d9c 	.word	0x20000d9c
 8006b7c:	20000dc8 	.word	0x20000dc8
 8006b80:	20000db0 	.word	0x20000db0

08006b84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d108      	bne.n	8006ba8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f000 fecc 	bl	8007938 <vPortFree>
				vPortFree( pxTCB );
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 fec9 	bl	8007938 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006ba6:	e017      	b.n	8006bd8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d103      	bne.n	8006bba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 fec0 	bl	8007938 <vPortFree>
	}
 8006bb8:	e00e      	b.n	8006bd8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006bc0:	2b02      	cmp	r3, #2
 8006bc2:	d009      	beq.n	8006bd8 <prvDeleteTCB+0x54>
 8006bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc8:	f383 8811 	msr	BASEPRI, r3
 8006bcc:	f3bf 8f6f 	isb	sy
 8006bd0:	f3bf 8f4f 	dsb	sy
 8006bd4:	60fb      	str	r3, [r7, #12]
 8006bd6:	e7fe      	b.n	8006bd6 <prvDeleteTCB+0x52>
	}
 8006bd8:	bf00      	nop
 8006bda:	3710      	adds	r7, #16
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006be6:	4b0e      	ldr	r3, [pc, #56]	; (8006c20 <prvResetNextTaskUnblockTime+0x40>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d101      	bne.n	8006bf4 <prvResetNextTaskUnblockTime+0x14>
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e000      	b.n	8006bf6 <prvResetNextTaskUnblockTime+0x16>
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d004      	beq.n	8006c04 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006bfa:	4b0a      	ldr	r3, [pc, #40]	; (8006c24 <prvResetNextTaskUnblockTime+0x44>)
 8006bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8006c00:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006c02:	e008      	b.n	8006c16 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006c04:	4b06      	ldr	r3, [pc, #24]	; (8006c20 <prvResetNextTaskUnblockTime+0x40>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	4a04      	ldr	r2, [pc, #16]	; (8006c24 <prvResetNextTaskUnblockTime+0x44>)
 8006c14:	6013      	str	r3, [r2, #0]
}
 8006c16:	bf00      	nop
 8006c18:	370c      	adds	r7, #12
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bc80      	pop	{r7}
 8006c1e:	4770      	bx	lr
 8006c20:	20000d80 	.word	0x20000d80
 8006c24:	20000de8 	.word	0x20000de8

08006c28 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006c2e:	4b0b      	ldr	r3, [pc, #44]	; (8006c5c <xTaskGetSchedulerState+0x34>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d102      	bne.n	8006c3c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006c36:	2301      	movs	r3, #1
 8006c38:	607b      	str	r3, [r7, #4]
 8006c3a:	e008      	b.n	8006c4e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c3c:	4b08      	ldr	r3, [pc, #32]	; (8006c60 <xTaskGetSchedulerState+0x38>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d102      	bne.n	8006c4a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006c44:	2302      	movs	r3, #2
 8006c46:	607b      	str	r3, [r7, #4]
 8006c48:	e001      	b.n	8006c4e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006c4e:	687b      	ldr	r3, [r7, #4]
	}
 8006c50:	4618      	mov	r0, r3
 8006c52:	370c      	adds	r7, #12
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bc80      	pop	{r7}
 8006c58:	4770      	bx	lr
 8006c5a:	bf00      	nop
 8006c5c:	20000dd4 	.word	0x20000dd4
 8006c60:	20000df0 	.word	0x20000df0

08006c64 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b086      	sub	sp, #24
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006c70:	2300      	movs	r3, #0
 8006c72:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d054      	beq.n	8006d24 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006c7a:	4b2d      	ldr	r3, [pc, #180]	; (8006d30 <xTaskPriorityDisinherit+0xcc>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	693a      	ldr	r2, [r7, #16]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d009      	beq.n	8006c98 <xTaskPriorityDisinherit+0x34>
 8006c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c88:	f383 8811 	msr	BASEPRI, r3
 8006c8c:	f3bf 8f6f 	isb	sy
 8006c90:	f3bf 8f4f 	dsb	sy
 8006c94:	60fb      	str	r3, [r7, #12]
 8006c96:	e7fe      	b.n	8006c96 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d109      	bne.n	8006cb4 <xTaskPriorityDisinherit+0x50>
 8006ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca4:	f383 8811 	msr	BASEPRI, r3
 8006ca8:	f3bf 8f6f 	isb	sy
 8006cac:	f3bf 8f4f 	dsb	sy
 8006cb0:	60bb      	str	r3, [r7, #8]
 8006cb2:	e7fe      	b.n	8006cb2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cb8:	1e5a      	subs	r2, r3, #1
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d02c      	beq.n	8006d24 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d128      	bne.n	8006d24 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	3304      	adds	r3, #4
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f7fe fca2 	bl	8005620 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cf4:	4b0f      	ldr	r3, [pc, #60]	; (8006d34 <xTaskPriorityDisinherit+0xd0>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d903      	bls.n	8006d04 <xTaskPriorityDisinherit+0xa0>
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d00:	4a0c      	ldr	r2, [pc, #48]	; (8006d34 <xTaskPriorityDisinherit+0xd0>)
 8006d02:	6013      	str	r3, [r2, #0]
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d08:	4613      	mov	r3, r2
 8006d0a:	009b      	lsls	r3, r3, #2
 8006d0c:	4413      	add	r3, r2
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	4a09      	ldr	r2, [pc, #36]	; (8006d38 <xTaskPriorityDisinherit+0xd4>)
 8006d12:	441a      	add	r2, r3
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	3304      	adds	r3, #4
 8006d18:	4619      	mov	r1, r3
 8006d1a:	4610      	mov	r0, r2
 8006d1c:	f7fe fc25 	bl	800556a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006d20:	2301      	movs	r3, #1
 8006d22:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006d24:	697b      	ldr	r3, [r7, #20]
	}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3718      	adds	r7, #24
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	200008f4 	.word	0x200008f4
 8006d34:	20000dd0 	.word	0x20000dd0
 8006d38:	200008f8 	.word	0x200008f8

08006d3c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006d46:	4b21      	ldr	r3, [pc, #132]	; (8006dcc <prvAddCurrentTaskToDelayedList+0x90>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d4c:	4b20      	ldr	r3, [pc, #128]	; (8006dd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	3304      	adds	r3, #4
 8006d52:	4618      	mov	r0, r3
 8006d54:	f7fe fc64 	bl	8005620 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d5e:	d10a      	bne.n	8006d76 <prvAddCurrentTaskToDelayedList+0x3a>
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d007      	beq.n	8006d76 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d66:	4b1a      	ldr	r3, [pc, #104]	; (8006dd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	3304      	adds	r3, #4
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	4819      	ldr	r0, [pc, #100]	; (8006dd4 <prvAddCurrentTaskToDelayedList+0x98>)
 8006d70:	f7fe fbfb 	bl	800556a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006d74:	e026      	b.n	8006dc4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006d7e:	4b14      	ldr	r3, [pc, #80]	; (8006dd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	68ba      	ldr	r2, [r7, #8]
 8006d84:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006d86:	68ba      	ldr	r2, [r7, #8]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d209      	bcs.n	8006da2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d8e:	4b12      	ldr	r3, [pc, #72]	; (8006dd8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	4b0f      	ldr	r3, [pc, #60]	; (8006dd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	3304      	adds	r3, #4
 8006d98:	4619      	mov	r1, r3
 8006d9a:	4610      	mov	r0, r2
 8006d9c:	f7fe fc08 	bl	80055b0 <vListInsert>
}
 8006da0:	e010      	b.n	8006dc4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006da2:	4b0e      	ldr	r3, [pc, #56]	; (8006ddc <prvAddCurrentTaskToDelayedList+0xa0>)
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	4b0a      	ldr	r3, [pc, #40]	; (8006dd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	3304      	adds	r3, #4
 8006dac:	4619      	mov	r1, r3
 8006dae:	4610      	mov	r0, r2
 8006db0:	f7fe fbfe 	bl	80055b0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006db4:	4b0a      	ldr	r3, [pc, #40]	; (8006de0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	68ba      	ldr	r2, [r7, #8]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d202      	bcs.n	8006dc4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006dbe:	4a08      	ldr	r2, [pc, #32]	; (8006de0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	6013      	str	r3, [r2, #0]
}
 8006dc4:	bf00      	nop
 8006dc6:	3710      	adds	r7, #16
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	20000dcc 	.word	0x20000dcc
 8006dd0:	200008f4 	.word	0x200008f4
 8006dd4:	20000db4 	.word	0x20000db4
 8006dd8:	20000d84 	.word	0x20000d84
 8006ddc:	20000d80 	.word	0x20000d80
 8006de0:	20000de8 	.word	0x20000de8

08006de4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b08a      	sub	sp, #40	; 0x28
 8006de8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006dea:	2300      	movs	r3, #0
 8006dec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006dee:	f000 fac3 	bl	8007378 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006df2:	4b1c      	ldr	r3, [pc, #112]	; (8006e64 <xTimerCreateTimerTask+0x80>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d021      	beq.n	8006e3e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006e02:	1d3a      	adds	r2, r7, #4
 8006e04:	f107 0108 	add.w	r1, r7, #8
 8006e08:	f107 030c 	add.w	r3, r7, #12
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f7fe fb67 	bl	80054e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006e12:	6879      	ldr	r1, [r7, #4]
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	68fa      	ldr	r2, [r7, #12]
 8006e18:	9202      	str	r2, [sp, #8]
 8006e1a:	9301      	str	r3, [sp, #4]
 8006e1c:	2302      	movs	r3, #2
 8006e1e:	9300      	str	r3, [sp, #0]
 8006e20:	2300      	movs	r3, #0
 8006e22:	460a      	mov	r2, r1
 8006e24:	4910      	ldr	r1, [pc, #64]	; (8006e68 <xTimerCreateTimerTask+0x84>)
 8006e26:	4811      	ldr	r0, [pc, #68]	; (8006e6c <xTimerCreateTimerTask+0x88>)
 8006e28:	f7ff f8f8 	bl	800601c <xTaskCreateStatic>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	4b10      	ldr	r3, [pc, #64]	; (8006e70 <xTimerCreateTimerTask+0x8c>)
 8006e30:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006e32:	4b0f      	ldr	r3, [pc, #60]	; (8006e70 <xTimerCreateTimerTask+0x8c>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d001      	beq.n	8006e3e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d109      	bne.n	8006e58 <xTimerCreateTimerTask+0x74>
 8006e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e48:	f383 8811 	msr	BASEPRI, r3
 8006e4c:	f3bf 8f6f 	isb	sy
 8006e50:	f3bf 8f4f 	dsb	sy
 8006e54:	613b      	str	r3, [r7, #16]
 8006e56:	e7fe      	b.n	8006e56 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8006e58:	697b      	ldr	r3, [r7, #20]
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3718      	adds	r7, #24
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	20000e24 	.word	0x20000e24
 8006e68:	080083a8 	.word	0x080083a8
 8006e6c:	08006f8d 	.word	0x08006f8d
 8006e70:	20000e28 	.word	0x20000e28

08006e74 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b08a      	sub	sp, #40	; 0x28
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	607a      	str	r2, [r7, #4]
 8006e80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006e82:	2300      	movs	r3, #0
 8006e84:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d109      	bne.n	8006ea0 <xTimerGenericCommand+0x2c>
 8006e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e90:	f383 8811 	msr	BASEPRI, r3
 8006e94:	f3bf 8f6f 	isb	sy
 8006e98:	f3bf 8f4f 	dsb	sy
 8006e9c:	623b      	str	r3, [r7, #32]
 8006e9e:	e7fe      	b.n	8006e9e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006ea0:	4b19      	ldr	r3, [pc, #100]	; (8006f08 <xTimerGenericCommand+0x94>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d02a      	beq.n	8006efe <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	2b05      	cmp	r3, #5
 8006eb8:	dc18      	bgt.n	8006eec <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006eba:	f7ff feb5 	bl	8006c28 <xTaskGetSchedulerState>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b02      	cmp	r3, #2
 8006ec2:	d109      	bne.n	8006ed8 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006ec4:	4b10      	ldr	r3, [pc, #64]	; (8006f08 <xTimerGenericCommand+0x94>)
 8006ec6:	6818      	ldr	r0, [r3, #0]
 8006ec8:	f107 0110 	add.w	r1, r7, #16
 8006ecc:	2300      	movs	r3, #0
 8006ece:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ed0:	f7fe fcce 	bl	8005870 <xQueueGenericSend>
 8006ed4:	6278      	str	r0, [r7, #36]	; 0x24
 8006ed6:	e012      	b.n	8006efe <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006ed8:	4b0b      	ldr	r3, [pc, #44]	; (8006f08 <xTimerGenericCommand+0x94>)
 8006eda:	6818      	ldr	r0, [r3, #0]
 8006edc:	f107 0110 	add.w	r1, r7, #16
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f7fe fcc4 	bl	8005870 <xQueueGenericSend>
 8006ee8:	6278      	str	r0, [r7, #36]	; 0x24
 8006eea:	e008      	b.n	8006efe <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006eec:	4b06      	ldr	r3, [pc, #24]	; (8006f08 <xTimerGenericCommand+0x94>)
 8006eee:	6818      	ldr	r0, [r3, #0]
 8006ef0:	f107 0110 	add.w	r1, r7, #16
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	683a      	ldr	r2, [r7, #0]
 8006ef8:	f7fe fdb4 	bl	8005a64 <xQueueGenericSendFromISR>
 8006efc:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3728      	adds	r7, #40	; 0x28
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	20000e24 	.word	0x20000e24

08006f0c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b088      	sub	sp, #32
 8006f10:	af02      	add	r7, sp, #8
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f16:	4b1c      	ldr	r3, [pc, #112]	; (8006f88 <prvProcessExpiredTimer+0x7c>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	3304      	adds	r3, #4
 8006f24:	4618      	mov	r0, r3
 8006f26:	f7fe fb7b 	bl	8005620 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	69db      	ldr	r3, [r3, #28]
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d121      	bne.n	8006f76 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	699a      	ldr	r2, [r3, #24]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	18d1      	adds	r1, r2, r3
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	683a      	ldr	r2, [r7, #0]
 8006f3e:	6978      	ldr	r0, [r7, #20]
 8006f40:	f000 f8c8 	bl	80070d4 <prvInsertTimerInActiveList>
 8006f44:	4603      	mov	r3, r0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d015      	beq.n	8006f76 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	9300      	str	r3, [sp, #0]
 8006f4e:	2300      	movs	r3, #0
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	2100      	movs	r1, #0
 8006f54:	6978      	ldr	r0, [r7, #20]
 8006f56:	f7ff ff8d 	bl	8006e74 <xTimerGenericCommand>
 8006f5a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d109      	bne.n	8006f76 <prvProcessExpiredTimer+0x6a>
 8006f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f66:	f383 8811 	msr	BASEPRI, r3
 8006f6a:	f3bf 8f6f 	isb	sy
 8006f6e:	f3bf 8f4f 	dsb	sy
 8006f72:	60fb      	str	r3, [r7, #12]
 8006f74:	e7fe      	b.n	8006f74 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7a:	6978      	ldr	r0, [r7, #20]
 8006f7c:	4798      	blx	r3
}
 8006f7e:	bf00      	nop
 8006f80:	3718      	adds	r7, #24
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	20000e1c 	.word	0x20000e1c

08006f8c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f94:	f107 0308 	add.w	r3, r7, #8
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f000 f857 	bl	800704c <prvGetNextExpireTime>
 8006f9e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	68f8      	ldr	r0, [r7, #12]
 8006fa6:	f000 f803 	bl	8006fb0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006faa:	f000 f8d5 	bl	8007158 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006fae:	e7f1      	b.n	8006f94 <prvTimerTask+0x8>

08006fb0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006fba:	f7ff fa5b 	bl	8006474 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006fbe:	f107 0308 	add.w	r3, r7, #8
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f000 f866 	bl	8007094 <prvSampleTimeNow>
 8006fc8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d130      	bne.n	8007032 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d10a      	bne.n	8006fec <prvProcessTimerOrBlockTask+0x3c>
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d806      	bhi.n	8006fec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006fde:	f7ff fa57 	bl	8006490 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006fe2:	68f9      	ldr	r1, [r7, #12]
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f7ff ff91 	bl	8006f0c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006fea:	e024      	b.n	8007036 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d008      	beq.n	8007004 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006ff2:	4b13      	ldr	r3, [pc, #76]	; (8007040 <prvProcessTimerOrBlockTask+0x90>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	bf0c      	ite	eq
 8006ffc:	2301      	moveq	r3, #1
 8006ffe:	2300      	movne	r3, #0
 8007000:	b2db      	uxtb	r3, r3
 8007002:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007004:	4b0f      	ldr	r3, [pc, #60]	; (8007044 <prvProcessTimerOrBlockTask+0x94>)
 8007006:	6818      	ldr	r0, [r3, #0]
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	1ad3      	subs	r3, r2, r3
 800700e:	683a      	ldr	r2, [r7, #0]
 8007010:	4619      	mov	r1, r3
 8007012:	f7fe ffcf 	bl	8005fb4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007016:	f7ff fa3b 	bl	8006490 <xTaskResumeAll>
 800701a:	4603      	mov	r3, r0
 800701c:	2b00      	cmp	r3, #0
 800701e:	d10a      	bne.n	8007036 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007020:	4b09      	ldr	r3, [pc, #36]	; (8007048 <prvProcessTimerOrBlockTask+0x98>)
 8007022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007026:	601a      	str	r2, [r3, #0]
 8007028:	f3bf 8f4f 	dsb	sy
 800702c:	f3bf 8f6f 	isb	sy
}
 8007030:	e001      	b.n	8007036 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007032:	f7ff fa2d 	bl	8006490 <xTaskResumeAll>
}
 8007036:	bf00      	nop
 8007038:	3710      	adds	r7, #16
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	20000e20 	.word	0x20000e20
 8007044:	20000e24 	.word	0x20000e24
 8007048:	e000ed04 	.word	0xe000ed04

0800704c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800704c:	b480      	push	{r7}
 800704e:	b085      	sub	sp, #20
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007054:	4b0e      	ldr	r3, [pc, #56]	; (8007090 <prvGetNextExpireTime+0x44>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	2b00      	cmp	r3, #0
 800705c:	bf0c      	ite	eq
 800705e:	2301      	moveq	r3, #1
 8007060:	2300      	movne	r3, #0
 8007062:	b2db      	uxtb	r3, r3
 8007064:	461a      	mov	r2, r3
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d105      	bne.n	800707e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007072:	4b07      	ldr	r3, [pc, #28]	; (8007090 <prvGetNextExpireTime+0x44>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	68db      	ldr	r3, [r3, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	60fb      	str	r3, [r7, #12]
 800707c:	e001      	b.n	8007082 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800707e:	2300      	movs	r3, #0
 8007080:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007082:	68fb      	ldr	r3, [r7, #12]
}
 8007084:	4618      	mov	r0, r3
 8007086:	3714      	adds	r7, #20
 8007088:	46bd      	mov	sp, r7
 800708a:	bc80      	pop	{r7}
 800708c:	4770      	bx	lr
 800708e:	bf00      	nop
 8007090:	20000e1c 	.word	0x20000e1c

08007094 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800709c:	f7ff fa94 	bl	80065c8 <xTaskGetTickCount>
 80070a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80070a2:	4b0b      	ldr	r3, [pc, #44]	; (80070d0 <prvSampleTimeNow+0x3c>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	68fa      	ldr	r2, [r7, #12]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d205      	bcs.n	80070b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80070ac:	f000 f904 	bl	80072b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	601a      	str	r2, [r3, #0]
 80070b6:	e002      	b.n	80070be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80070be:	4a04      	ldr	r2, [pc, #16]	; (80070d0 <prvSampleTimeNow+0x3c>)
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80070c4:	68fb      	ldr	r3, [r7, #12]
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3710      	adds	r7, #16
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	bf00      	nop
 80070d0:	20000e2c 	.word	0x20000e2c

080070d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b086      	sub	sp, #24
 80070d8:	af00      	add	r7, sp, #0
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	60b9      	str	r1, [r7, #8]
 80070de:	607a      	str	r2, [r7, #4]
 80070e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80070e2:	2300      	movs	r3, #0
 80070e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	68ba      	ldr	r2, [r7, #8]
 80070ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	68fa      	ldr	r2, [r7, #12]
 80070f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80070f2:	68ba      	ldr	r2, [r7, #8]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d812      	bhi.n	8007120 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	1ad2      	subs	r2, r2, r3
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	699b      	ldr	r3, [r3, #24]
 8007104:	429a      	cmp	r2, r3
 8007106:	d302      	bcc.n	800710e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007108:	2301      	movs	r3, #1
 800710a:	617b      	str	r3, [r7, #20]
 800710c:	e01b      	b.n	8007146 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800710e:	4b10      	ldr	r3, [pc, #64]	; (8007150 <prvInsertTimerInActiveList+0x7c>)
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	3304      	adds	r3, #4
 8007116:	4619      	mov	r1, r3
 8007118:	4610      	mov	r0, r2
 800711a:	f7fe fa49 	bl	80055b0 <vListInsert>
 800711e:	e012      	b.n	8007146 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	429a      	cmp	r2, r3
 8007126:	d206      	bcs.n	8007136 <prvInsertTimerInActiveList+0x62>
 8007128:	68ba      	ldr	r2, [r7, #8]
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	429a      	cmp	r2, r3
 800712e:	d302      	bcc.n	8007136 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007130:	2301      	movs	r3, #1
 8007132:	617b      	str	r3, [r7, #20]
 8007134:	e007      	b.n	8007146 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007136:	4b07      	ldr	r3, [pc, #28]	; (8007154 <prvInsertTimerInActiveList+0x80>)
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	3304      	adds	r3, #4
 800713e:	4619      	mov	r1, r3
 8007140:	4610      	mov	r0, r2
 8007142:	f7fe fa35 	bl	80055b0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007146:	697b      	ldr	r3, [r7, #20]
}
 8007148:	4618      	mov	r0, r3
 800714a:	3718      	adds	r7, #24
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}
 8007150:	20000e20 	.word	0x20000e20
 8007154:	20000e1c 	.word	0x20000e1c

08007158 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b08e      	sub	sp, #56	; 0x38
 800715c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800715e:	e099      	b.n	8007294 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2b00      	cmp	r3, #0
 8007164:	da17      	bge.n	8007196 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007166:	1d3b      	adds	r3, r7, #4
 8007168:	3304      	adds	r3, #4
 800716a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800716c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800716e:	2b00      	cmp	r3, #0
 8007170:	d109      	bne.n	8007186 <prvProcessReceivedCommands+0x2e>
 8007172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007176:	f383 8811 	msr	BASEPRI, r3
 800717a:	f3bf 8f6f 	isb	sy
 800717e:	f3bf 8f4f 	dsb	sy
 8007182:	61fb      	str	r3, [r7, #28]
 8007184:	e7fe      	b.n	8007184 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800718c:	6850      	ldr	r0, [r2, #4]
 800718e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007190:	6892      	ldr	r2, [r2, #8]
 8007192:	4611      	mov	r1, r2
 8007194:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2b00      	cmp	r3, #0
 800719a:	db7a      	blt.n	8007292 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80071a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a2:	695b      	ldr	r3, [r3, #20]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d004      	beq.n	80071b2 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80071a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071aa:	3304      	adds	r3, #4
 80071ac:	4618      	mov	r0, r3
 80071ae:	f7fe fa37 	bl	8005620 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80071b2:	463b      	mov	r3, r7
 80071b4:	4618      	mov	r0, r3
 80071b6:	f7ff ff6d 	bl	8007094 <prvSampleTimeNow>
 80071ba:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2b09      	cmp	r3, #9
 80071c0:	d868      	bhi.n	8007294 <prvProcessReceivedCommands+0x13c>
 80071c2:	a201      	add	r2, pc, #4	; (adr r2, 80071c8 <prvProcessReceivedCommands+0x70>)
 80071c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c8:	080071f1 	.word	0x080071f1
 80071cc:	080071f1 	.word	0x080071f1
 80071d0:	080071f1 	.word	0x080071f1
 80071d4:	08007295 	.word	0x08007295
 80071d8:	0800724b 	.word	0x0800724b
 80071dc:	08007281 	.word	0x08007281
 80071e0:	080071f1 	.word	0x080071f1
 80071e4:	080071f1 	.word	0x080071f1
 80071e8:	08007295 	.word	0x08007295
 80071ec:	0800724b 	.word	0x0800724b
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80071f0:	68ba      	ldr	r2, [r7, #8]
 80071f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f4:	699b      	ldr	r3, [r3, #24]
 80071f6:	18d1      	adds	r1, r2, r3
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071fe:	f7ff ff69 	bl	80070d4 <prvInsertTimerInActiveList>
 8007202:	4603      	mov	r3, r0
 8007204:	2b00      	cmp	r3, #0
 8007206:	d045      	beq.n	8007294 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800720a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800720c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800720e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007212:	69db      	ldr	r3, [r3, #28]
 8007214:	2b01      	cmp	r3, #1
 8007216:	d13d      	bne.n	8007294 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007218:	68ba      	ldr	r2, [r7, #8]
 800721a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800721c:	699b      	ldr	r3, [r3, #24]
 800721e:	441a      	add	r2, r3
 8007220:	2300      	movs	r3, #0
 8007222:	9300      	str	r3, [sp, #0]
 8007224:	2300      	movs	r3, #0
 8007226:	2100      	movs	r1, #0
 8007228:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800722a:	f7ff fe23 	bl	8006e74 <xTimerGenericCommand>
 800722e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007230:	6a3b      	ldr	r3, [r7, #32]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d12e      	bne.n	8007294 <prvProcessReceivedCommands+0x13c>
 8007236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800723a:	f383 8811 	msr	BASEPRI, r3
 800723e:	f3bf 8f6f 	isb	sy
 8007242:	f3bf 8f4f 	dsb	sy
 8007246:	61bb      	str	r3, [r7, #24]
 8007248:	e7fe      	b.n	8007248 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800724a:	68ba      	ldr	r2, [r7, #8]
 800724c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800724e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007252:	699b      	ldr	r3, [r3, #24]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d109      	bne.n	800726c <prvProcessReceivedCommands+0x114>
 8007258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800725c:	f383 8811 	msr	BASEPRI, r3
 8007260:	f3bf 8f6f 	isb	sy
 8007264:	f3bf 8f4f 	dsb	sy
 8007268:	617b      	str	r3, [r7, #20]
 800726a:	e7fe      	b.n	800726a <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800726c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800726e:	699a      	ldr	r2, [r3, #24]
 8007270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007272:	18d1      	adds	r1, r2, r3
 8007274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007278:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800727a:	f7ff ff2b 	bl	80070d4 <prvInsertTimerInActiveList>
					break;
 800727e:	e009      	b.n	8007294 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007282:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007286:	2b00      	cmp	r3, #0
 8007288:	d104      	bne.n	8007294 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 800728a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800728c:	f000 fb54 	bl	8007938 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007290:	e000      	b.n	8007294 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007292:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007294:	4b07      	ldr	r3, [pc, #28]	; (80072b4 <prvProcessReceivedCommands+0x15c>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	1d39      	adds	r1, r7, #4
 800729a:	2200      	movs	r2, #0
 800729c:	4618      	mov	r0, r3
 800729e:	f7fe fc75 	bl	8005b8c <xQueueReceive>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	f47f af5b 	bne.w	8007160 <prvProcessReceivedCommands+0x8>
	}
}
 80072aa:	bf00      	nop
 80072ac:	3730      	adds	r7, #48	; 0x30
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	bf00      	nop
 80072b4:	20000e24 	.word	0x20000e24

080072b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b088      	sub	sp, #32
 80072bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80072be:	e044      	b.n	800734a <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80072c0:	4b2b      	ldr	r3, [pc, #172]	; (8007370 <prvSwitchTimerLists+0xb8>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	68db      	ldr	r3, [r3, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80072ca:	4b29      	ldr	r3, [pc, #164]	; (8007370 <prvSwitchTimerLists+0xb8>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	68db      	ldr	r3, [r3, #12]
 80072d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	3304      	adds	r3, #4
 80072d8:	4618      	mov	r0, r3
 80072da:	f7fe f9a1 	bl	8005620 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e2:	68f8      	ldr	r0, [r7, #12]
 80072e4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	69db      	ldr	r3, [r3, #28]
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d12d      	bne.n	800734a <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	699b      	ldr	r3, [r3, #24]
 80072f2:	693a      	ldr	r2, [r7, #16]
 80072f4:	4413      	add	r3, r2
 80072f6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80072f8:	68ba      	ldr	r2, [r7, #8]
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d90e      	bls.n	800731e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	68ba      	ldr	r2, [r7, #8]
 8007304:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	68fa      	ldr	r2, [r7, #12]
 800730a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800730c:	4b18      	ldr	r3, [pc, #96]	; (8007370 <prvSwitchTimerLists+0xb8>)
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	3304      	adds	r3, #4
 8007314:	4619      	mov	r1, r3
 8007316:	4610      	mov	r0, r2
 8007318:	f7fe f94a 	bl	80055b0 <vListInsert>
 800731c:	e015      	b.n	800734a <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800731e:	2300      	movs	r3, #0
 8007320:	9300      	str	r3, [sp, #0]
 8007322:	2300      	movs	r3, #0
 8007324:	693a      	ldr	r2, [r7, #16]
 8007326:	2100      	movs	r1, #0
 8007328:	68f8      	ldr	r0, [r7, #12]
 800732a:	f7ff fda3 	bl	8006e74 <xTimerGenericCommand>
 800732e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d109      	bne.n	800734a <prvSwitchTimerLists+0x92>
 8007336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800733a:	f383 8811 	msr	BASEPRI, r3
 800733e:	f3bf 8f6f 	isb	sy
 8007342:	f3bf 8f4f 	dsb	sy
 8007346:	603b      	str	r3, [r7, #0]
 8007348:	e7fe      	b.n	8007348 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800734a:	4b09      	ldr	r3, [pc, #36]	; (8007370 <prvSwitchTimerLists+0xb8>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d1b5      	bne.n	80072c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007354:	4b06      	ldr	r3, [pc, #24]	; (8007370 <prvSwitchTimerLists+0xb8>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800735a:	4b06      	ldr	r3, [pc, #24]	; (8007374 <prvSwitchTimerLists+0xbc>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a04      	ldr	r2, [pc, #16]	; (8007370 <prvSwitchTimerLists+0xb8>)
 8007360:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007362:	4a04      	ldr	r2, [pc, #16]	; (8007374 <prvSwitchTimerLists+0xbc>)
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	6013      	str	r3, [r2, #0]
}
 8007368:	bf00      	nop
 800736a:	3718      	adds	r7, #24
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	20000e1c 	.word	0x20000e1c
 8007374:	20000e20 	.word	0x20000e20

08007378 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800737e:	f000 f923 	bl	80075c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007382:	4b15      	ldr	r3, [pc, #84]	; (80073d8 <prvCheckForValidListAndQueue+0x60>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d120      	bne.n	80073cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800738a:	4814      	ldr	r0, [pc, #80]	; (80073dc <prvCheckForValidListAndQueue+0x64>)
 800738c:	f7fe f8c2 	bl	8005514 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007390:	4813      	ldr	r0, [pc, #76]	; (80073e0 <prvCheckForValidListAndQueue+0x68>)
 8007392:	f7fe f8bf 	bl	8005514 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007396:	4b13      	ldr	r3, [pc, #76]	; (80073e4 <prvCheckForValidListAndQueue+0x6c>)
 8007398:	4a10      	ldr	r2, [pc, #64]	; (80073dc <prvCheckForValidListAndQueue+0x64>)
 800739a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800739c:	4b12      	ldr	r3, [pc, #72]	; (80073e8 <prvCheckForValidListAndQueue+0x70>)
 800739e:	4a10      	ldr	r2, [pc, #64]	; (80073e0 <prvCheckForValidListAndQueue+0x68>)
 80073a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80073a2:	2300      	movs	r3, #0
 80073a4:	9300      	str	r3, [sp, #0]
 80073a6:	4b11      	ldr	r3, [pc, #68]	; (80073ec <prvCheckForValidListAndQueue+0x74>)
 80073a8:	4a11      	ldr	r2, [pc, #68]	; (80073f0 <prvCheckForValidListAndQueue+0x78>)
 80073aa:	2110      	movs	r1, #16
 80073ac:	200a      	movs	r0, #10
 80073ae:	f7fe f9c9 	bl	8005744 <xQueueGenericCreateStatic>
 80073b2:	4602      	mov	r2, r0
 80073b4:	4b08      	ldr	r3, [pc, #32]	; (80073d8 <prvCheckForValidListAndQueue+0x60>)
 80073b6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80073b8:	4b07      	ldr	r3, [pc, #28]	; (80073d8 <prvCheckForValidListAndQueue+0x60>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d005      	beq.n	80073cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80073c0:	4b05      	ldr	r3, [pc, #20]	; (80073d8 <prvCheckForValidListAndQueue+0x60>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	490b      	ldr	r1, [pc, #44]	; (80073f4 <prvCheckForValidListAndQueue+0x7c>)
 80073c6:	4618      	mov	r0, r3
 80073c8:	f7fe fdcc 	bl	8005f64 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80073cc:	f000 f92a 	bl	8007624 <vPortExitCritical>
}
 80073d0:	bf00      	nop
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	20000e24 	.word	0x20000e24
 80073dc:	20000df4 	.word	0x20000df4
 80073e0:	20000e08 	.word	0x20000e08
 80073e4:	20000e1c 	.word	0x20000e1c
 80073e8:	20000e20 	.word	0x20000e20
 80073ec:	20000ed0 	.word	0x20000ed0
 80073f0:	20000e30 	.word	0x20000e30
 80073f4:	080083b0 	.word	0x080083b0

080073f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80073f8:	b480      	push	{r7}
 80073fa:	b085      	sub	sp, #20
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	60b9      	str	r1, [r7, #8]
 8007402:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	3b04      	subs	r3, #4
 8007408:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007410:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	3b04      	subs	r3, #4
 8007416:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	f023 0201 	bic.w	r2, r3, #1
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	3b04      	subs	r3, #4
 8007426:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007428:	4a08      	ldr	r2, [pc, #32]	; (800744c <pxPortInitialiseStack+0x54>)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	3b14      	subs	r3, #20
 8007432:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	3b20      	subs	r3, #32
 800743e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007440:	68fb      	ldr	r3, [r7, #12]
}
 8007442:	4618      	mov	r0, r3
 8007444:	3714      	adds	r7, #20
 8007446:	46bd      	mov	sp, r7
 8007448:	bc80      	pop	{r7}
 800744a:	4770      	bx	lr
 800744c:	08007451 	.word	0x08007451

08007450 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007450:	b480      	push	{r7}
 8007452:	b085      	sub	sp, #20
 8007454:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007456:	2300      	movs	r3, #0
 8007458:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800745a:	4b10      	ldr	r3, [pc, #64]	; (800749c <prvTaskExitError+0x4c>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007462:	d009      	beq.n	8007478 <prvTaskExitError+0x28>
 8007464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007468:	f383 8811 	msr	BASEPRI, r3
 800746c:	f3bf 8f6f 	isb	sy
 8007470:	f3bf 8f4f 	dsb	sy
 8007474:	60fb      	str	r3, [r7, #12]
 8007476:	e7fe      	b.n	8007476 <prvTaskExitError+0x26>
 8007478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800747c:	f383 8811 	msr	BASEPRI, r3
 8007480:	f3bf 8f6f 	isb	sy
 8007484:	f3bf 8f4f 	dsb	sy
 8007488:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800748a:	bf00      	nop
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d0fc      	beq.n	800748c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007492:	bf00      	nop
 8007494:	3714      	adds	r7, #20
 8007496:	46bd      	mov	sp, r7
 8007498:	bc80      	pop	{r7}
 800749a:	4770      	bx	lr
 800749c:	20000180 	.word	0x20000180

080074a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80074a0:	4b07      	ldr	r3, [pc, #28]	; (80074c0 <pxCurrentTCBConst2>)
 80074a2:	6819      	ldr	r1, [r3, #0]
 80074a4:	6808      	ldr	r0, [r1, #0]
 80074a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80074aa:	f380 8809 	msr	PSP, r0
 80074ae:	f3bf 8f6f 	isb	sy
 80074b2:	f04f 0000 	mov.w	r0, #0
 80074b6:	f380 8811 	msr	BASEPRI, r0
 80074ba:	f04e 0e0d 	orr.w	lr, lr, #13
 80074be:	4770      	bx	lr

080074c0 <pxCurrentTCBConst2>:
 80074c0:	200008f4 	.word	0x200008f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80074c4:	bf00      	nop
 80074c6:	bf00      	nop

080074c8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80074c8:	4806      	ldr	r0, [pc, #24]	; (80074e4 <prvPortStartFirstTask+0x1c>)
 80074ca:	6800      	ldr	r0, [r0, #0]
 80074cc:	6800      	ldr	r0, [r0, #0]
 80074ce:	f380 8808 	msr	MSP, r0
 80074d2:	b662      	cpsie	i
 80074d4:	b661      	cpsie	f
 80074d6:	f3bf 8f4f 	dsb	sy
 80074da:	f3bf 8f6f 	isb	sy
 80074de:	df00      	svc	0
 80074e0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80074e2:	bf00      	nop
 80074e4:	e000ed08 	.word	0xe000ed08

080074e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80074ee:	4b31      	ldr	r3, [pc, #196]	; (80075b4 <xPortStartScheduler+0xcc>)
 80074f0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	22ff      	movs	r2, #255	; 0xff
 80074fe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	b2db      	uxtb	r3, r3
 8007506:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007508:	78fb      	ldrb	r3, [r7, #3]
 800750a:	b2db      	uxtb	r3, r3
 800750c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007510:	b2da      	uxtb	r2, r3
 8007512:	4b29      	ldr	r3, [pc, #164]	; (80075b8 <xPortStartScheduler+0xd0>)
 8007514:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007516:	4b29      	ldr	r3, [pc, #164]	; (80075bc <xPortStartScheduler+0xd4>)
 8007518:	2207      	movs	r2, #7
 800751a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800751c:	e009      	b.n	8007532 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800751e:	4b27      	ldr	r3, [pc, #156]	; (80075bc <xPortStartScheduler+0xd4>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	3b01      	subs	r3, #1
 8007524:	4a25      	ldr	r2, [pc, #148]	; (80075bc <xPortStartScheduler+0xd4>)
 8007526:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007528:	78fb      	ldrb	r3, [r7, #3]
 800752a:	b2db      	uxtb	r3, r3
 800752c:	005b      	lsls	r3, r3, #1
 800752e:	b2db      	uxtb	r3, r3
 8007530:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007532:	78fb      	ldrb	r3, [r7, #3]
 8007534:	b2db      	uxtb	r3, r3
 8007536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800753a:	2b80      	cmp	r3, #128	; 0x80
 800753c:	d0ef      	beq.n	800751e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800753e:	4b1f      	ldr	r3, [pc, #124]	; (80075bc <xPortStartScheduler+0xd4>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f1c3 0307 	rsb	r3, r3, #7
 8007546:	2b04      	cmp	r3, #4
 8007548:	d009      	beq.n	800755e <xPortStartScheduler+0x76>
 800754a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800754e:	f383 8811 	msr	BASEPRI, r3
 8007552:	f3bf 8f6f 	isb	sy
 8007556:	f3bf 8f4f 	dsb	sy
 800755a:	60bb      	str	r3, [r7, #8]
 800755c:	e7fe      	b.n	800755c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800755e:	4b17      	ldr	r3, [pc, #92]	; (80075bc <xPortStartScheduler+0xd4>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	021b      	lsls	r3, r3, #8
 8007564:	4a15      	ldr	r2, [pc, #84]	; (80075bc <xPortStartScheduler+0xd4>)
 8007566:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007568:	4b14      	ldr	r3, [pc, #80]	; (80075bc <xPortStartScheduler+0xd4>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007570:	4a12      	ldr	r2, [pc, #72]	; (80075bc <xPortStartScheduler+0xd4>)
 8007572:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	b2da      	uxtb	r2, r3
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800757c:	4b10      	ldr	r3, [pc, #64]	; (80075c0 <xPortStartScheduler+0xd8>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a0f      	ldr	r2, [pc, #60]	; (80075c0 <xPortStartScheduler+0xd8>)
 8007582:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007586:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007588:	4b0d      	ldr	r3, [pc, #52]	; (80075c0 <xPortStartScheduler+0xd8>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a0c      	ldr	r2, [pc, #48]	; (80075c0 <xPortStartScheduler+0xd8>)
 800758e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007592:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007594:	f000 f8b0 	bl	80076f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007598:	4b0a      	ldr	r3, [pc, #40]	; (80075c4 <xPortStartScheduler+0xdc>)
 800759a:	2200      	movs	r2, #0
 800759c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800759e:	f7ff ff93 	bl	80074c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80075a2:	f7ff f8dd 	bl	8006760 <vTaskSwitchContext>
	prvTaskExitError();
 80075a6:	f7ff ff53 	bl	8007450 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3710      	adds	r7, #16
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}
 80075b4:	e000e400 	.word	0xe000e400
 80075b8:	20000f20 	.word	0x20000f20
 80075bc:	20000f24 	.word	0x20000f24
 80075c0:	e000ed20 	.word	0xe000ed20
 80075c4:	20000180 	.word	0x20000180

080075c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80075c8:	b480      	push	{r7}
 80075ca:	b083      	sub	sp, #12
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d2:	f383 8811 	msr	BASEPRI, r3
 80075d6:	f3bf 8f6f 	isb	sy
 80075da:	f3bf 8f4f 	dsb	sy
 80075de:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80075e0:	4b0e      	ldr	r3, [pc, #56]	; (800761c <vPortEnterCritical+0x54>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	3301      	adds	r3, #1
 80075e6:	4a0d      	ldr	r2, [pc, #52]	; (800761c <vPortEnterCritical+0x54>)
 80075e8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80075ea:	4b0c      	ldr	r3, [pc, #48]	; (800761c <vPortEnterCritical+0x54>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d10e      	bne.n	8007610 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80075f2:	4b0b      	ldr	r3, [pc, #44]	; (8007620 <vPortEnterCritical+0x58>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d009      	beq.n	8007610 <vPortEnterCritical+0x48>
 80075fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007600:	f383 8811 	msr	BASEPRI, r3
 8007604:	f3bf 8f6f 	isb	sy
 8007608:	f3bf 8f4f 	dsb	sy
 800760c:	603b      	str	r3, [r7, #0]
 800760e:	e7fe      	b.n	800760e <vPortEnterCritical+0x46>
	}
}
 8007610:	bf00      	nop
 8007612:	370c      	adds	r7, #12
 8007614:	46bd      	mov	sp, r7
 8007616:	bc80      	pop	{r7}
 8007618:	4770      	bx	lr
 800761a:	bf00      	nop
 800761c:	20000180 	.word	0x20000180
 8007620:	e000ed04 	.word	0xe000ed04

08007624 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800762a:	4b10      	ldr	r3, [pc, #64]	; (800766c <vPortExitCritical+0x48>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d109      	bne.n	8007646 <vPortExitCritical+0x22>
 8007632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007636:	f383 8811 	msr	BASEPRI, r3
 800763a:	f3bf 8f6f 	isb	sy
 800763e:	f3bf 8f4f 	dsb	sy
 8007642:	607b      	str	r3, [r7, #4]
 8007644:	e7fe      	b.n	8007644 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8007646:	4b09      	ldr	r3, [pc, #36]	; (800766c <vPortExitCritical+0x48>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	3b01      	subs	r3, #1
 800764c:	4a07      	ldr	r2, [pc, #28]	; (800766c <vPortExitCritical+0x48>)
 800764e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007650:	4b06      	ldr	r3, [pc, #24]	; (800766c <vPortExitCritical+0x48>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d104      	bne.n	8007662 <vPortExitCritical+0x3e>
 8007658:	2300      	movs	r3, #0
 800765a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007662:	bf00      	nop
 8007664:	370c      	adds	r7, #12
 8007666:	46bd      	mov	sp, r7
 8007668:	bc80      	pop	{r7}
 800766a:	4770      	bx	lr
 800766c:	20000180 	.word	0x20000180

08007670 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007670:	f3ef 8009 	mrs	r0, PSP
 8007674:	f3bf 8f6f 	isb	sy
 8007678:	4b0d      	ldr	r3, [pc, #52]	; (80076b0 <pxCurrentTCBConst>)
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007680:	6010      	str	r0, [r2, #0]
 8007682:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007686:	f04f 0050 	mov.w	r0, #80	; 0x50
 800768a:	f380 8811 	msr	BASEPRI, r0
 800768e:	f7ff f867 	bl	8006760 <vTaskSwitchContext>
 8007692:	f04f 0000 	mov.w	r0, #0
 8007696:	f380 8811 	msr	BASEPRI, r0
 800769a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800769e:	6819      	ldr	r1, [r3, #0]
 80076a0:	6808      	ldr	r0, [r1, #0]
 80076a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80076a6:	f380 8809 	msr	PSP, r0
 80076aa:	f3bf 8f6f 	isb	sy
 80076ae:	4770      	bx	lr

080076b0 <pxCurrentTCBConst>:
 80076b0:	200008f4 	.word	0x200008f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80076b4:	bf00      	nop
 80076b6:	bf00      	nop

080076b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
	__asm volatile
 80076be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c2:	f383 8811 	msr	BASEPRI, r3
 80076c6:	f3bf 8f6f 	isb	sy
 80076ca:	f3bf 8f4f 	dsb	sy
 80076ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80076d0:	f7fe ff88 	bl	80065e4 <xTaskIncrementTick>
 80076d4:	4603      	mov	r3, r0
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d003      	beq.n	80076e2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80076da:	4b06      	ldr	r3, [pc, #24]	; (80076f4 <SysTick_Handler+0x3c>)
 80076dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076e0:	601a      	str	r2, [r3, #0]
 80076e2:	2300      	movs	r3, #0
 80076e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80076ec:	bf00      	nop
 80076ee:	3708      	adds	r7, #8
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}
 80076f4:	e000ed04 	.word	0xe000ed04

080076f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80076f8:	b480      	push	{r7}
 80076fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80076fc:	4b0a      	ldr	r3, [pc, #40]	; (8007728 <vPortSetupTimerInterrupt+0x30>)
 80076fe:	2200      	movs	r2, #0
 8007700:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007702:	4b0a      	ldr	r3, [pc, #40]	; (800772c <vPortSetupTimerInterrupt+0x34>)
 8007704:	2200      	movs	r2, #0
 8007706:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007708:	4b09      	ldr	r3, [pc, #36]	; (8007730 <vPortSetupTimerInterrupt+0x38>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a09      	ldr	r2, [pc, #36]	; (8007734 <vPortSetupTimerInterrupt+0x3c>)
 800770e:	fba2 2303 	umull	r2, r3, r2, r3
 8007712:	099b      	lsrs	r3, r3, #6
 8007714:	4a08      	ldr	r2, [pc, #32]	; (8007738 <vPortSetupTimerInterrupt+0x40>)
 8007716:	3b01      	subs	r3, #1
 8007718:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800771a:	4b03      	ldr	r3, [pc, #12]	; (8007728 <vPortSetupTimerInterrupt+0x30>)
 800771c:	2207      	movs	r2, #7
 800771e:	601a      	str	r2, [r3, #0]
}
 8007720:	bf00      	nop
 8007722:	46bd      	mov	sp, r7
 8007724:	bc80      	pop	{r7}
 8007726:	4770      	bx	lr
 8007728:	e000e010 	.word	0xe000e010
 800772c:	e000e018 	.word	0xe000e018
 8007730:	20000000 	.word	0x20000000
 8007734:	10624dd3 	.word	0x10624dd3
 8007738:	e000e014 	.word	0xe000e014

0800773c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800773c:	b480      	push	{r7}
 800773e:	b085      	sub	sp, #20
 8007740:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007742:	f3ef 8305 	mrs	r3, IPSR
 8007746:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2b0f      	cmp	r3, #15
 800774c:	d913      	bls.n	8007776 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800774e:	4a15      	ldr	r2, [pc, #84]	; (80077a4 <vPortValidateInterruptPriority+0x68>)
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	4413      	add	r3, r2
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007758:	4b13      	ldr	r3, [pc, #76]	; (80077a8 <vPortValidateInterruptPriority+0x6c>)
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	7afa      	ldrb	r2, [r7, #11]
 800775e:	429a      	cmp	r2, r3
 8007760:	d209      	bcs.n	8007776 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8007762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007766:	f383 8811 	msr	BASEPRI, r3
 800776a:	f3bf 8f6f 	isb	sy
 800776e:	f3bf 8f4f 	dsb	sy
 8007772:	607b      	str	r3, [r7, #4]
 8007774:	e7fe      	b.n	8007774 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007776:	4b0d      	ldr	r3, [pc, #52]	; (80077ac <vPortValidateInterruptPriority+0x70>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800777e:	4b0c      	ldr	r3, [pc, #48]	; (80077b0 <vPortValidateInterruptPriority+0x74>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	429a      	cmp	r2, r3
 8007784:	d909      	bls.n	800779a <vPortValidateInterruptPriority+0x5e>
 8007786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800778a:	f383 8811 	msr	BASEPRI, r3
 800778e:	f3bf 8f6f 	isb	sy
 8007792:	f3bf 8f4f 	dsb	sy
 8007796:	603b      	str	r3, [r7, #0]
 8007798:	e7fe      	b.n	8007798 <vPortValidateInterruptPriority+0x5c>
	}
 800779a:	bf00      	nop
 800779c:	3714      	adds	r7, #20
 800779e:	46bd      	mov	sp, r7
 80077a0:	bc80      	pop	{r7}
 80077a2:	4770      	bx	lr
 80077a4:	e000e3f0 	.word	0xe000e3f0
 80077a8:	20000f20 	.word	0x20000f20
 80077ac:	e000ed0c 	.word	0xe000ed0c
 80077b0:	20000f24 	.word	0x20000f24

080077b4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b08a      	sub	sp, #40	; 0x28
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80077bc:	2300      	movs	r3, #0
 80077be:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80077c0:	f7fe fe58 	bl	8006474 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80077c4:	4b57      	ldr	r3, [pc, #348]	; (8007924 <pvPortMalloc+0x170>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d101      	bne.n	80077d0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80077cc:	f000 f90c 	bl	80079e8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80077d0:	4b55      	ldr	r3, [pc, #340]	; (8007928 <pvPortMalloc+0x174>)
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	4013      	ands	r3, r2
 80077d8:	2b00      	cmp	r3, #0
 80077da:	f040 808c 	bne.w	80078f6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d01c      	beq.n	800781e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80077e4:	2208      	movs	r2, #8
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	4413      	add	r3, r2
 80077ea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f003 0307 	and.w	r3, r3, #7
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d013      	beq.n	800781e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f023 0307 	bic.w	r3, r3, #7
 80077fc:	3308      	adds	r3, #8
 80077fe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f003 0307 	and.w	r3, r3, #7
 8007806:	2b00      	cmp	r3, #0
 8007808:	d009      	beq.n	800781e <pvPortMalloc+0x6a>
 800780a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800780e:	f383 8811 	msr	BASEPRI, r3
 8007812:	f3bf 8f6f 	isb	sy
 8007816:	f3bf 8f4f 	dsb	sy
 800781a:	617b      	str	r3, [r7, #20]
 800781c:	e7fe      	b.n	800781c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d068      	beq.n	80078f6 <pvPortMalloc+0x142>
 8007824:	4b41      	ldr	r3, [pc, #260]	; (800792c <pvPortMalloc+0x178>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	429a      	cmp	r2, r3
 800782c:	d863      	bhi.n	80078f6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800782e:	4b40      	ldr	r3, [pc, #256]	; (8007930 <pvPortMalloc+0x17c>)
 8007830:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007832:	4b3f      	ldr	r3, [pc, #252]	; (8007930 <pvPortMalloc+0x17c>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007838:	e004      	b.n	8007844 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800783a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800783e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	429a      	cmp	r2, r3
 800784c:	d903      	bls.n	8007856 <pvPortMalloc+0xa2>
 800784e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d1f1      	bne.n	800783a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007856:	4b33      	ldr	r3, [pc, #204]	; (8007924 <pvPortMalloc+0x170>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800785c:	429a      	cmp	r2, r3
 800785e:	d04a      	beq.n	80078f6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007860:	6a3b      	ldr	r3, [r7, #32]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2208      	movs	r2, #8
 8007866:	4413      	add	r3, r2
 8007868:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800786a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	6a3b      	ldr	r3, [r7, #32]
 8007870:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007874:	685a      	ldr	r2, [r3, #4]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	1ad2      	subs	r2, r2, r3
 800787a:	2308      	movs	r3, #8
 800787c:	005b      	lsls	r3, r3, #1
 800787e:	429a      	cmp	r2, r3
 8007880:	d91e      	bls.n	80078c0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	4413      	add	r3, r2
 8007888:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800788a:	69bb      	ldr	r3, [r7, #24]
 800788c:	f003 0307 	and.w	r3, r3, #7
 8007890:	2b00      	cmp	r3, #0
 8007892:	d009      	beq.n	80078a8 <pvPortMalloc+0xf4>
 8007894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007898:	f383 8811 	msr	BASEPRI, r3
 800789c:	f3bf 8f6f 	isb	sy
 80078a0:	f3bf 8f4f 	dsb	sy
 80078a4:	613b      	str	r3, [r7, #16]
 80078a6:	e7fe      	b.n	80078a6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80078a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078aa:	685a      	ldr	r2, [r3, #4]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	1ad2      	subs	r2, r2, r3
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80078b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80078ba:	69b8      	ldr	r0, [r7, #24]
 80078bc:	f000 f8f6 	bl	8007aac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80078c0:	4b1a      	ldr	r3, [pc, #104]	; (800792c <pvPortMalloc+0x178>)
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	1ad3      	subs	r3, r2, r3
 80078ca:	4a18      	ldr	r2, [pc, #96]	; (800792c <pvPortMalloc+0x178>)
 80078cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80078ce:	4b17      	ldr	r3, [pc, #92]	; (800792c <pvPortMalloc+0x178>)
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	4b18      	ldr	r3, [pc, #96]	; (8007934 <pvPortMalloc+0x180>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d203      	bcs.n	80078e2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80078da:	4b14      	ldr	r3, [pc, #80]	; (800792c <pvPortMalloc+0x178>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a15      	ldr	r2, [pc, #84]	; (8007934 <pvPortMalloc+0x180>)
 80078e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80078e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e4:	685a      	ldr	r2, [r3, #4]
 80078e6:	4b10      	ldr	r3, [pc, #64]	; (8007928 <pvPortMalloc+0x174>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	431a      	orrs	r2, r3
 80078ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80078f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f2:	2200      	movs	r2, #0
 80078f4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80078f6:	f7fe fdcb 	bl	8006490 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80078fa:	69fb      	ldr	r3, [r7, #28]
 80078fc:	f003 0307 	and.w	r3, r3, #7
 8007900:	2b00      	cmp	r3, #0
 8007902:	d009      	beq.n	8007918 <pvPortMalloc+0x164>
 8007904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007908:	f383 8811 	msr	BASEPRI, r3
 800790c:	f3bf 8f6f 	isb	sy
 8007910:	f3bf 8f4f 	dsb	sy
 8007914:	60fb      	str	r3, [r7, #12]
 8007916:	e7fe      	b.n	8007916 <pvPortMalloc+0x162>
	return pvReturn;
 8007918:	69fb      	ldr	r3, [r7, #28]
}
 800791a:	4618      	mov	r0, r3
 800791c:	3728      	adds	r7, #40	; 0x28
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}
 8007922:	bf00      	nop
 8007924:	20001b30 	.word	0x20001b30
 8007928:	20001b3c 	.word	0x20001b3c
 800792c:	20001b34 	.word	0x20001b34
 8007930:	20001b28 	.word	0x20001b28
 8007934:	20001b38 	.word	0x20001b38

08007938 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b086      	sub	sp, #24
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d046      	beq.n	80079d8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800794a:	2308      	movs	r3, #8
 800794c:	425b      	negs	r3, r3
 800794e:	697a      	ldr	r2, [r7, #20]
 8007950:	4413      	add	r3, r2
 8007952:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	685a      	ldr	r2, [r3, #4]
 800795c:	4b20      	ldr	r3, [pc, #128]	; (80079e0 <vPortFree+0xa8>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4013      	ands	r3, r2
 8007962:	2b00      	cmp	r3, #0
 8007964:	d109      	bne.n	800797a <vPortFree+0x42>
 8007966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800796a:	f383 8811 	msr	BASEPRI, r3
 800796e:	f3bf 8f6f 	isb	sy
 8007972:	f3bf 8f4f 	dsb	sy
 8007976:	60fb      	str	r3, [r7, #12]
 8007978:	e7fe      	b.n	8007978 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d009      	beq.n	8007996 <vPortFree+0x5e>
 8007982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007986:	f383 8811 	msr	BASEPRI, r3
 800798a:	f3bf 8f6f 	isb	sy
 800798e:	f3bf 8f4f 	dsb	sy
 8007992:	60bb      	str	r3, [r7, #8]
 8007994:	e7fe      	b.n	8007994 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	685a      	ldr	r2, [r3, #4]
 800799a:	4b11      	ldr	r3, [pc, #68]	; (80079e0 <vPortFree+0xa8>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4013      	ands	r3, r2
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d019      	beq.n	80079d8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d115      	bne.n	80079d8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	685a      	ldr	r2, [r3, #4]
 80079b0:	4b0b      	ldr	r3, [pc, #44]	; (80079e0 <vPortFree+0xa8>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	43db      	mvns	r3, r3
 80079b6:	401a      	ands	r2, r3
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80079bc:	f7fe fd5a 	bl	8006474 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	685a      	ldr	r2, [r3, #4]
 80079c4:	4b07      	ldr	r3, [pc, #28]	; (80079e4 <vPortFree+0xac>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4413      	add	r3, r2
 80079ca:	4a06      	ldr	r2, [pc, #24]	; (80079e4 <vPortFree+0xac>)
 80079cc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80079ce:	6938      	ldr	r0, [r7, #16]
 80079d0:	f000 f86c 	bl	8007aac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80079d4:	f7fe fd5c 	bl	8006490 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80079d8:	bf00      	nop
 80079da:	3718      	adds	r7, #24
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}
 80079e0:	20001b3c 	.word	0x20001b3c
 80079e4:	20001b34 	.word	0x20001b34

080079e8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80079e8:	b480      	push	{r7}
 80079ea:	b085      	sub	sp, #20
 80079ec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80079ee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80079f2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80079f4:	4b27      	ldr	r3, [pc, #156]	; (8007a94 <prvHeapInit+0xac>)
 80079f6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f003 0307 	and.w	r3, r3, #7
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d00c      	beq.n	8007a1c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	3307      	adds	r3, #7
 8007a06:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f023 0307 	bic.w	r3, r3, #7
 8007a0e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007a10:	68ba      	ldr	r2, [r7, #8]
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	1ad3      	subs	r3, r2, r3
 8007a16:	4a1f      	ldr	r2, [pc, #124]	; (8007a94 <prvHeapInit+0xac>)
 8007a18:	4413      	add	r3, r2
 8007a1a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007a20:	4a1d      	ldr	r2, [pc, #116]	; (8007a98 <prvHeapInit+0xb0>)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007a26:	4b1c      	ldr	r3, [pc, #112]	; (8007a98 <prvHeapInit+0xb0>)
 8007a28:	2200      	movs	r2, #0
 8007a2a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	68ba      	ldr	r2, [r7, #8]
 8007a30:	4413      	add	r3, r2
 8007a32:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007a34:	2208      	movs	r2, #8
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	1a9b      	subs	r3, r3, r2
 8007a3a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f023 0307 	bic.w	r3, r3, #7
 8007a42:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	4a15      	ldr	r2, [pc, #84]	; (8007a9c <prvHeapInit+0xb4>)
 8007a48:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007a4a:	4b14      	ldr	r3, [pc, #80]	; (8007a9c <prvHeapInit+0xb4>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007a52:	4b12      	ldr	r3, [pc, #72]	; (8007a9c <prvHeapInit+0xb4>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2200      	movs	r2, #0
 8007a58:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	68fa      	ldr	r2, [r7, #12]
 8007a62:	1ad2      	subs	r2, r2, r3
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007a68:	4b0c      	ldr	r3, [pc, #48]	; (8007a9c <prvHeapInit+0xb4>)
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	4a0a      	ldr	r2, [pc, #40]	; (8007aa0 <prvHeapInit+0xb8>)
 8007a76:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	4a09      	ldr	r2, [pc, #36]	; (8007aa4 <prvHeapInit+0xbc>)
 8007a7e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007a80:	4b09      	ldr	r3, [pc, #36]	; (8007aa8 <prvHeapInit+0xc0>)
 8007a82:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007a86:	601a      	str	r2, [r3, #0]
}
 8007a88:	bf00      	nop
 8007a8a:	3714      	adds	r7, #20
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bc80      	pop	{r7}
 8007a90:	4770      	bx	lr
 8007a92:	bf00      	nop
 8007a94:	20000f28 	.word	0x20000f28
 8007a98:	20001b28 	.word	0x20001b28
 8007a9c:	20001b30 	.word	0x20001b30
 8007aa0:	20001b38 	.word	0x20001b38
 8007aa4:	20001b34 	.word	0x20001b34
 8007aa8:	20001b3c 	.word	0x20001b3c

08007aac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007aac:	b480      	push	{r7}
 8007aae:	b085      	sub	sp, #20
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007ab4:	4b27      	ldr	r3, [pc, #156]	; (8007b54 <prvInsertBlockIntoFreeList+0xa8>)
 8007ab6:	60fb      	str	r3, [r7, #12]
 8007ab8:	e002      	b.n	8007ac0 <prvInsertBlockIntoFreeList+0x14>
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	60fb      	str	r3, [r7, #12]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d8f7      	bhi.n	8007aba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	68ba      	ldr	r2, [r7, #8]
 8007ad4:	4413      	add	r3, r2
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d108      	bne.n	8007aee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	685a      	ldr	r2, [r3, #4]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	441a      	add	r2, r3
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	68ba      	ldr	r2, [r7, #8]
 8007af8:	441a      	add	r2, r3
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d118      	bne.n	8007b34 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681a      	ldr	r2, [r3, #0]
 8007b06:	4b14      	ldr	r3, [pc, #80]	; (8007b58 <prvInsertBlockIntoFreeList+0xac>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d00d      	beq.n	8007b2a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	685a      	ldr	r2, [r3, #4]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	441a      	add	r2, r3
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	601a      	str	r2, [r3, #0]
 8007b28:	e008      	b.n	8007b3c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007b2a:	4b0b      	ldr	r3, [pc, #44]	; (8007b58 <prvInsertBlockIntoFreeList+0xac>)
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	601a      	str	r2, [r3, #0]
 8007b32:	e003      	b.n	8007b3c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007b3c:	68fa      	ldr	r2, [r7, #12]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d002      	beq.n	8007b4a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b4a:	bf00      	nop
 8007b4c:	3714      	adds	r7, #20
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bc80      	pop	{r7}
 8007b52:	4770      	bx	lr
 8007b54:	20001b28 	.word	0x20001b28
 8007b58:	20001b30 	.word	0x20001b30

08007b5c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007b60:	2200      	movs	r2, #0
 8007b62:	4912      	ldr	r1, [pc, #72]	; (8007bac <MX_USB_DEVICE_Init+0x50>)
 8007b64:	4812      	ldr	r0, [pc, #72]	; (8007bb0 <MX_USB_DEVICE_Init+0x54>)
 8007b66:	f7fc fad8 	bl	800411a <USBD_Init>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d001      	beq.n	8007b74 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007b70:	f7f8 fc02 	bl	8000378 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_COMPOSITE) != USBD_OK)
 8007b74:	490f      	ldr	r1, [pc, #60]	; (8007bb4 <MX_USB_DEVICE_Init+0x58>)
 8007b76:	480e      	ldr	r0, [pc, #56]	; (8007bb0 <MX_USB_DEVICE_Init+0x54>)
 8007b78:	f7fc fafa 	bl	8004170 <USBD_RegisterClass>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d001      	beq.n	8007b86 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007b82:	f7f8 fbf9 	bl	8000378 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8007b86:	490c      	ldr	r1, [pc, #48]	; (8007bb8 <MX_USB_DEVICE_Init+0x5c>)
 8007b88:	4809      	ldr	r0, [pc, #36]	; (8007bb0 <MX_USB_DEVICE_Init+0x54>)
 8007b8a:	f7fc f95f 	bl	8003e4c <USBD_CUSTOM_HID_RegisterInterface>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d001      	beq.n	8007b98 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007b94:	f7f8 fbf0 	bl	8000378 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007b98:	4805      	ldr	r0, [pc, #20]	; (8007bb0 <MX_USB_DEVICE_Init+0x54>)
 8007b9a:	f7fc fb02 	bl	80041a2 <USBD_Start>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d001      	beq.n	8007ba8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007ba4:	f7f8 fbe8 	bl	8000378 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007ba8:	bf00      	nop
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	200001c8 	.word	0x200001c8
 8007bb0:	20001bf0 	.word	0x20001bf0
 8007bb4:	2000000c 	.word	0x2000000c
 8007bb8:	200001b8 	.word	0x200001b8

08007bbc <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007bc0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bc80      	pop	{r7}
 8007bc8:	4770      	bx	lr

08007bca <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8007bca:	b480      	push	{r7}
 8007bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8007bce:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bc80      	pop	{r7}
 8007bd6:	4770      	bx	lr

08007bd8 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b083      	sub	sp, #12
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	4603      	mov	r3, r0
 8007be0:	460a      	mov	r2, r1
 8007be2:	71fb      	strb	r3, [r7, #7]
 8007be4:	4613      	mov	r3, r2
 8007be6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8007be8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	370c      	adds	r7, #12
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bc80      	pop	{r7}
 8007bf2:	4770      	bx	lr

08007bf4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b083      	sub	sp, #12
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	6039      	str	r1, [r7, #0]
 8007bfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	2212      	movs	r2, #18
 8007c04:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007c06:	4b03      	ldr	r3, [pc, #12]	; (8007c14 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	370c      	adds	r7, #12
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bc80      	pop	{r7}
 8007c10:	4770      	bx	lr
 8007c12:	bf00      	nop
 8007c14:	200001e4 	.word	0x200001e4

08007c18 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	4603      	mov	r3, r0
 8007c20:	6039      	str	r1, [r7, #0]
 8007c22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	2204      	movs	r2, #4
 8007c28:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007c2a:	4b03      	ldr	r3, [pc, #12]	; (8007c38 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	370c      	adds	r7, #12
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bc80      	pop	{r7}
 8007c34:	4770      	bx	lr
 8007c36:	bf00      	nop
 8007c38:	200001f8 	.word	0x200001f8

08007c3c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b082      	sub	sp, #8
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	4603      	mov	r3, r0
 8007c44:	6039      	str	r1, [r7, #0]
 8007c46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007c48:	79fb      	ldrb	r3, [r7, #7]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d105      	bne.n	8007c5a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007c4e:	683a      	ldr	r2, [r7, #0]
 8007c50:	4907      	ldr	r1, [pc, #28]	; (8007c70 <USBD_FS_ProductStrDescriptor+0x34>)
 8007c52:	4808      	ldr	r0, [pc, #32]	; (8007c74 <USBD_FS_ProductStrDescriptor+0x38>)
 8007c54:	f7fd fa11 	bl	800507a <USBD_GetString>
 8007c58:	e004      	b.n	8007c64 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007c5a:	683a      	ldr	r2, [r7, #0]
 8007c5c:	4904      	ldr	r1, [pc, #16]	; (8007c70 <USBD_FS_ProductStrDescriptor+0x34>)
 8007c5e:	4805      	ldr	r0, [pc, #20]	; (8007c74 <USBD_FS_ProductStrDescriptor+0x38>)
 8007c60:	f7fd fa0b 	bl	800507a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c64:	4b02      	ldr	r3, [pc, #8]	; (8007c70 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3708      	adds	r7, #8
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	bf00      	nop
 8007c70:	20001ebc 	.word	0x20001ebc
 8007c74:	080083b8 	.word	0x080083b8

08007c78 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	4603      	mov	r3, r0
 8007c80:	6039      	str	r1, [r7, #0]
 8007c82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007c84:	683a      	ldr	r2, [r7, #0]
 8007c86:	4904      	ldr	r1, [pc, #16]	; (8007c98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007c88:	4804      	ldr	r0, [pc, #16]	; (8007c9c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007c8a:	f7fd f9f6 	bl	800507a <USBD_GetString>
  return USBD_StrDesc;
 8007c8e:	4b02      	ldr	r3, [pc, #8]	; (8007c98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3708      	adds	r7, #8
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}
 8007c98:	20001ebc 	.word	0x20001ebc
 8007c9c:	080083d8 	.word	0x080083d8

08007ca0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b082      	sub	sp, #8
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	6039      	str	r1, [r7, #0]
 8007caa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	221a      	movs	r2, #26
 8007cb0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007cb2:	f000 f843 	bl	8007d3c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007cb6:	4b02      	ldr	r3, [pc, #8]	; (8007cc0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3708      	adds	r7, #8
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}
 8007cc0:	200001fc 	.word	0x200001fc

08007cc4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	4603      	mov	r3, r0
 8007ccc:	6039      	str	r1, [r7, #0]
 8007cce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007cd0:	79fb      	ldrb	r3, [r7, #7]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d105      	bne.n	8007ce2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007cd6:	683a      	ldr	r2, [r7, #0]
 8007cd8:	4907      	ldr	r1, [pc, #28]	; (8007cf8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007cda:	4808      	ldr	r0, [pc, #32]	; (8007cfc <USBD_FS_ConfigStrDescriptor+0x38>)
 8007cdc:	f7fd f9cd 	bl	800507a <USBD_GetString>
 8007ce0:	e004      	b.n	8007cec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007ce2:	683a      	ldr	r2, [r7, #0]
 8007ce4:	4904      	ldr	r1, [pc, #16]	; (8007cf8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007ce6:	4805      	ldr	r0, [pc, #20]	; (8007cfc <USBD_FS_ConfigStrDescriptor+0x38>)
 8007ce8:	f7fd f9c7 	bl	800507a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007cec:	4b02      	ldr	r3, [pc, #8]	; (8007cf8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3708      	adds	r7, #8
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	bf00      	nop
 8007cf8:	20001ebc 	.word	0x20001ebc
 8007cfc:	080083ec 	.word	0x080083ec

08007d00 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b082      	sub	sp, #8
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	4603      	mov	r3, r0
 8007d08:	6039      	str	r1, [r7, #0]
 8007d0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007d0c:	79fb      	ldrb	r3, [r7, #7]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d105      	bne.n	8007d1e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007d12:	683a      	ldr	r2, [r7, #0]
 8007d14:	4907      	ldr	r1, [pc, #28]	; (8007d34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007d16:	4808      	ldr	r0, [pc, #32]	; (8007d38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007d18:	f7fd f9af 	bl	800507a <USBD_GetString>
 8007d1c:	e004      	b.n	8007d28 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007d1e:	683a      	ldr	r2, [r7, #0]
 8007d20:	4904      	ldr	r1, [pc, #16]	; (8007d34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007d22:	4805      	ldr	r0, [pc, #20]	; (8007d38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007d24:	f7fd f9a9 	bl	800507a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d28:	4b02      	ldr	r3, [pc, #8]	; (8007d34 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3708      	adds	r7, #8
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
 8007d32:	bf00      	nop
 8007d34:	20001ebc 	.word	0x20001ebc
 8007d38:	08008400 	.word	0x08008400

08007d3c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007d42:	4b0f      	ldr	r3, [pc, #60]	; (8007d80 <Get_SerialNum+0x44>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007d48:	4b0e      	ldr	r3, [pc, #56]	; (8007d84 <Get_SerialNum+0x48>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007d4e:	4b0e      	ldr	r3, [pc, #56]	; (8007d88 <Get_SerialNum+0x4c>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007d54:	68fa      	ldr	r2, [r7, #12]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	4413      	add	r3, r2
 8007d5a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d009      	beq.n	8007d76 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007d62:	2208      	movs	r2, #8
 8007d64:	4909      	ldr	r1, [pc, #36]	; (8007d8c <Get_SerialNum+0x50>)
 8007d66:	68f8      	ldr	r0, [r7, #12]
 8007d68:	f000 f814 	bl	8007d94 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007d6c:	2204      	movs	r2, #4
 8007d6e:	4908      	ldr	r1, [pc, #32]	; (8007d90 <Get_SerialNum+0x54>)
 8007d70:	68b8      	ldr	r0, [r7, #8]
 8007d72:	f000 f80f 	bl	8007d94 <IntToUnicode>
  }
}
 8007d76:	bf00      	nop
 8007d78:	3710      	adds	r7, #16
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	1ffff7e8 	.word	0x1ffff7e8
 8007d84:	1ffff7ec 	.word	0x1ffff7ec
 8007d88:	1ffff7f0 	.word	0x1ffff7f0
 8007d8c:	200001fe 	.word	0x200001fe
 8007d90:	2000020e 	.word	0x2000020e

08007d94 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b087      	sub	sp, #28
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	60f8      	str	r0, [r7, #12]
 8007d9c:	60b9      	str	r1, [r7, #8]
 8007d9e:	4613      	mov	r3, r2
 8007da0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007da2:	2300      	movs	r3, #0
 8007da4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007da6:	2300      	movs	r3, #0
 8007da8:	75fb      	strb	r3, [r7, #23]
 8007daa:	e027      	b.n	8007dfc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	0f1b      	lsrs	r3, r3, #28
 8007db0:	2b09      	cmp	r3, #9
 8007db2:	d80b      	bhi.n	8007dcc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	0f1b      	lsrs	r3, r3, #28
 8007db8:	b2da      	uxtb	r2, r3
 8007dba:	7dfb      	ldrb	r3, [r7, #23]
 8007dbc:	005b      	lsls	r3, r3, #1
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	440b      	add	r3, r1
 8007dc4:	3230      	adds	r2, #48	; 0x30
 8007dc6:	b2d2      	uxtb	r2, r2
 8007dc8:	701a      	strb	r2, [r3, #0]
 8007dca:	e00a      	b.n	8007de2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	0f1b      	lsrs	r3, r3, #28
 8007dd0:	b2da      	uxtb	r2, r3
 8007dd2:	7dfb      	ldrb	r3, [r7, #23]
 8007dd4:	005b      	lsls	r3, r3, #1
 8007dd6:	4619      	mov	r1, r3
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	440b      	add	r3, r1
 8007ddc:	3237      	adds	r2, #55	; 0x37
 8007dde:	b2d2      	uxtb	r2, r2
 8007de0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	011b      	lsls	r3, r3, #4
 8007de6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007de8:	7dfb      	ldrb	r3, [r7, #23]
 8007dea:	005b      	lsls	r3, r3, #1
 8007dec:	3301      	adds	r3, #1
 8007dee:	68ba      	ldr	r2, [r7, #8]
 8007df0:	4413      	add	r3, r2
 8007df2:	2200      	movs	r2, #0
 8007df4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007df6:	7dfb      	ldrb	r3, [r7, #23]
 8007df8:	3301      	adds	r3, #1
 8007dfa:	75fb      	strb	r3, [r7, #23]
 8007dfc:	7dfa      	ldrb	r2, [r7, #23]
 8007dfe:	79fb      	ldrb	r3, [r7, #7]
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d3d3      	bcc.n	8007dac <IntToUnicode+0x18>
  }
}
 8007e04:	bf00      	nop
 8007e06:	371c      	adds	r7, #28
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bc80      	pop	{r7}
 8007e0c:	4770      	bx	lr
	...

08007e10 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b084      	sub	sp, #16
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a0d      	ldr	r2, [pc, #52]	; (8007e54 <HAL_PCD_MspInit+0x44>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d113      	bne.n	8007e4a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007e22:	4b0d      	ldr	r3, [pc, #52]	; (8007e58 <HAL_PCD_MspInit+0x48>)
 8007e24:	69db      	ldr	r3, [r3, #28]
 8007e26:	4a0c      	ldr	r2, [pc, #48]	; (8007e58 <HAL_PCD_MspInit+0x48>)
 8007e28:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007e2c:	61d3      	str	r3, [r2, #28]
 8007e2e:	4b0a      	ldr	r3, [pc, #40]	; (8007e58 <HAL_PCD_MspInit+0x48>)
 8007e30:	69db      	ldr	r3, [r3, #28]
 8007e32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e36:	60fb      	str	r3, [r7, #12]
 8007e38:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	2100      	movs	r1, #0
 8007e3e:	2014      	movs	r0, #20
 8007e40:	f7f8 fcb7 	bl	80007b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007e44:	2014      	movs	r0, #20
 8007e46:	f7f8 fcd0 	bl	80007ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007e4a:	bf00      	nop
 8007e4c:	3710      	adds	r7, #16
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	40005c00 	.word	0x40005c00
 8007e58:	40021000 	.word	0x40021000

08007e5c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007e70:	4619      	mov	r1, r3
 8007e72:	4610      	mov	r0, r2
 8007e74:	f7fc f9dd 	bl	8004232 <USBD_LL_SetupStage>
}
 8007e78:	bf00      	nop
 8007e7a:	3708      	adds	r7, #8
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b082      	sub	sp, #8
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	460b      	mov	r3, r1
 8007e8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8007e92:	78fb      	ldrb	r3, [r7, #3]
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	015b      	lsls	r3, r3, #5
 8007e98:	4413      	add	r3, r2
 8007e9a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8007e9e:	681a      	ldr	r2, [r3, #0]
 8007ea0:	78fb      	ldrb	r3, [r7, #3]
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	f7fc fa10 	bl	80042c8 <USBD_LL_DataOutStage>
}
 8007ea8:	bf00      	nop
 8007eaa:	3708      	adds	r7, #8
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	460b      	mov	r3, r1
 8007eba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8007ec2:	78fb      	ldrb	r3, [r7, #3]
 8007ec4:	687a      	ldr	r2, [r7, #4]
 8007ec6:	015b      	lsls	r3, r3, #5
 8007ec8:	4413      	add	r3, r2
 8007eca:	333c      	adds	r3, #60	; 0x3c
 8007ecc:	681a      	ldr	r2, [r3, #0]
 8007ece:	78fb      	ldrb	r3, [r7, #3]
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	f7fc fa6a 	bl	80043aa <USBD_LL_DataInStage>
}
 8007ed6:	bf00      	nop
 8007ed8:	3708      	adds	r7, #8
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}

08007ede <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ede:	b580      	push	{r7, lr}
 8007ee0:	b082      	sub	sp, #8
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007eec:	4618      	mov	r0, r3
 8007eee:	f7fc fb7a 	bl	80045e6 <USBD_LL_SOF>
}
 8007ef2:	bf00      	nop
 8007ef4:	3708      	adds	r7, #8
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}

08007efa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007efa:	b580      	push	{r7, lr}
 8007efc:	b084      	sub	sp, #16
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007f02:	2301      	movs	r3, #1
 8007f04:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	689b      	ldr	r3, [r3, #8]
 8007f0a:	2b02      	cmp	r3, #2
 8007f0c:	d001      	beq.n	8007f12 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007f0e:	f7f8 fa33 	bl	8000378 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007f18:	7bfa      	ldrb	r2, [r7, #15]
 8007f1a:	4611      	mov	r1, r2
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f7fc fb2a 	bl	8004576 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f7fc fae3 	bl	80044f4 <USBD_LL_Reset>
}
 8007f2e:	bf00      	nop
 8007f30:	3710      	adds	r7, #16
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
	...

08007f38 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007f46:	4618      	mov	r0, r3
 8007f48:	f7fc fb24 	bl	8004594 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	699b      	ldr	r3, [r3, #24]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d005      	beq.n	8007f60 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007f54:	4b04      	ldr	r3, [pc, #16]	; (8007f68 <HAL_PCD_SuspendCallback+0x30>)
 8007f56:	691b      	ldr	r3, [r3, #16]
 8007f58:	4a03      	ldr	r2, [pc, #12]	; (8007f68 <HAL_PCD_SuspendCallback+0x30>)
 8007f5a:	f043 0306 	orr.w	r3, r3, #6
 8007f5e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007f60:	bf00      	nop
 8007f62:	3708      	adds	r7, #8
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}
 8007f68:	e000ed00 	.word	0xe000ed00

08007f6c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f7fc fb1e 	bl	80045bc <USBD_LL_Resume>
}
 8007f80:	bf00      	nop
 8007f82:	3708      	adds	r7, #8
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007f90:	4a27      	ldr	r2, [pc, #156]	; (8008030 <USBD_LL_Init+0xa8>)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	4a25      	ldr	r2, [pc, #148]	; (8008030 <USBD_LL_Init+0xa8>)
 8007f9c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_FS.Instance = USB;
 8007fa0:	4b23      	ldr	r3, [pc, #140]	; (8008030 <USBD_LL_Init+0xa8>)
 8007fa2:	4a24      	ldr	r2, [pc, #144]	; (8008034 <USBD_LL_Init+0xac>)
 8007fa4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007fa6:	4b22      	ldr	r3, [pc, #136]	; (8008030 <USBD_LL_Init+0xa8>)
 8007fa8:	2208      	movs	r2, #8
 8007faa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007fac:	4b20      	ldr	r3, [pc, #128]	; (8008030 <USBD_LL_Init+0xa8>)
 8007fae:	2202      	movs	r2, #2
 8007fb0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007fb2:	4b1f      	ldr	r3, [pc, #124]	; (8008030 <USBD_LL_Init+0xa8>)
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007fb8:	4b1d      	ldr	r3, [pc, #116]	; (8008030 <USBD_LL_Init+0xa8>)
 8007fba:	2200      	movs	r2, #0
 8007fbc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007fbe:	4b1c      	ldr	r3, [pc, #112]	; (8008030 <USBD_LL_Init+0xa8>)
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007fc4:	481a      	ldr	r0, [pc, #104]	; (8008030 <USBD_LL_Init+0xa8>)
 8007fc6:	f7f8 fd91 	bl	8000aec <HAL_PCD_Init>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d001      	beq.n	8007fd4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007fd0:	f7f8 f9d2 	bl	8000378 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007fda:	2318      	movs	r3, #24
 8007fdc:	2200      	movs	r2, #0
 8007fde:	2100      	movs	r1, #0
 8007fe0:	f7f9 fc16 	bl	8001810 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007fea:	2358      	movs	r3, #88	; 0x58
 8007fec:	2200      	movs	r2, #0
 8007fee:	2180      	movs	r1, #128	; 0x80
 8007ff0:	f7f9 fc0e 	bl	8001810 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007ffa:	2398      	movs	r3, #152	; 0x98
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	2182      	movs	r1, #130	; 0x82
 8008000:	f7f9 fc06 	bl	8001810 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800800a:	23d8      	movs	r3, #216	; 0xd8
 800800c:	2200      	movs	r2, #0
 800800e:	2103      	movs	r1, #3
 8008010:	f7f9 fbfe 	bl	8001810 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , HID_EPIN_ADDR , PCD_SNG_BUF, 0x128);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800801a:	f44f 7394 	mov.w	r3, #296	; 0x128
 800801e:	2200      	movs	r2, #0
 8008020:	2181      	movs	r1, #129	; 0x81
 8008022:	f7f9 fbf5 	bl	8001810 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 8008026:	2300      	movs	r3, #0
}
 8008028:	4618      	mov	r0, r3
 800802a:	3708      	adds	r7, #8
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}
 8008030:	200020bc 	.word	0x200020bc
 8008034:	40005c00 	.word	0x40005c00

08008038 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008040:	2300      	movs	r3, #0
 8008042:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008044:	2300      	movs	r3, #0
 8008046:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800804e:	4618      	mov	r0, r3
 8008050:	f7f8 fe2d 	bl	8000cae <HAL_PCD_Start>
 8008054:	4603      	mov	r3, r0
 8008056:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008058:	7bfb      	ldrb	r3, [r7, #15]
 800805a:	4618      	mov	r0, r3
 800805c:	f000 f920 	bl	80082a0 <USBD_Get_USB_Status>
 8008060:	4603      	mov	r3, r0
 8008062:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008064:	7bbb      	ldrb	r3, [r7, #14]
}
 8008066:	4618      	mov	r0, r3
 8008068:	3710      	adds	r7, #16
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}

0800806e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800806e:	b580      	push	{r7, lr}
 8008070:	b084      	sub	sp, #16
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
 8008076:	4608      	mov	r0, r1
 8008078:	4611      	mov	r1, r2
 800807a:	461a      	mov	r2, r3
 800807c:	4603      	mov	r3, r0
 800807e:	70fb      	strb	r3, [r7, #3]
 8008080:	460b      	mov	r3, r1
 8008082:	70bb      	strb	r3, [r7, #2]
 8008084:	4613      	mov	r3, r2
 8008086:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008088:	2300      	movs	r3, #0
 800808a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800808c:	2300      	movs	r3, #0
 800808e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008096:	78bb      	ldrb	r3, [r7, #2]
 8008098:	883a      	ldrh	r2, [r7, #0]
 800809a:	78f9      	ldrb	r1, [r7, #3]
 800809c:	f7f8 ff60 	bl	8000f60 <HAL_PCD_EP_Open>
 80080a0:	4603      	mov	r3, r0
 80080a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080a4:	7bfb      	ldrb	r3, [r7, #15]
 80080a6:	4618      	mov	r0, r3
 80080a8:	f000 f8fa 	bl	80082a0 <USBD_Get_USB_Status>
 80080ac:	4603      	mov	r3, r0
 80080ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3710      	adds	r7, #16
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}

080080ba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080ba:	b580      	push	{r7, lr}
 80080bc:	b084      	sub	sp, #16
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
 80080c2:	460b      	mov	r3, r1
 80080c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080c6:	2300      	movs	r3, #0
 80080c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080ca:	2300      	movs	r3, #0
 80080cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80080d4:	78fa      	ldrb	r2, [r7, #3]
 80080d6:	4611      	mov	r1, r2
 80080d8:	4618      	mov	r0, r3
 80080da:	f7f8 ffa1 	bl	8001020 <HAL_PCD_EP_Close>
 80080de:	4603      	mov	r3, r0
 80080e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080e2:	7bfb      	ldrb	r3, [r7, #15]
 80080e4:	4618      	mov	r0, r3
 80080e6:	f000 f8db 	bl	80082a0 <USBD_Get_USB_Status>
 80080ea:	4603      	mov	r3, r0
 80080ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3710      	adds	r7, #16
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}

080080f8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b084      	sub	sp, #16
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	460b      	mov	r3, r1
 8008102:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008104:	2300      	movs	r3, #0
 8008106:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008108:	2300      	movs	r3, #0
 800810a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008112:	78fa      	ldrb	r2, [r7, #3]
 8008114:	4611      	mov	r1, r2
 8008116:	4618      	mov	r0, r3
 8008118:	f7f9 f837 	bl	800118a <HAL_PCD_EP_SetStall>
 800811c:	4603      	mov	r3, r0
 800811e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008120:	7bfb      	ldrb	r3, [r7, #15]
 8008122:	4618      	mov	r0, r3
 8008124:	f000 f8bc 	bl	80082a0 <USBD_Get_USB_Status>
 8008128:	4603      	mov	r3, r0
 800812a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800812c:	7bbb      	ldrb	r3, [r7, #14]
}
 800812e:	4618      	mov	r0, r3
 8008130:	3710      	adds	r7, #16
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}

08008136 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008136:	b580      	push	{r7, lr}
 8008138:	b084      	sub	sp, #16
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
 800813e:	460b      	mov	r3, r1
 8008140:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008142:	2300      	movs	r3, #0
 8008144:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008146:	2300      	movs	r3, #0
 8008148:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008150:	78fa      	ldrb	r2, [r7, #3]
 8008152:	4611      	mov	r1, r2
 8008154:	4618      	mov	r0, r3
 8008156:	f7f9 f872 	bl	800123e <HAL_PCD_EP_ClrStall>
 800815a:	4603      	mov	r3, r0
 800815c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800815e:	7bfb      	ldrb	r3, [r7, #15]
 8008160:	4618      	mov	r0, r3
 8008162:	f000 f89d 	bl	80082a0 <USBD_Get_USB_Status>
 8008166:	4603      	mov	r3, r0
 8008168:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800816a:	7bbb      	ldrb	r3, [r7, #14]
}
 800816c:	4618      	mov	r0, r3
 800816e:	3710      	adds	r7, #16
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008174:	b480      	push	{r7}
 8008176:	b085      	sub	sp, #20
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	460b      	mov	r3, r1
 800817e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008186:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008188:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800818c:	2b00      	cmp	r3, #0
 800818e:	da08      	bge.n	80081a2 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008190:	78fb      	ldrb	r3, [r7, #3]
 8008192:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008196:	68fa      	ldr	r2, [r7, #12]
 8008198:	015b      	lsls	r3, r3, #5
 800819a:	4413      	add	r3, r2
 800819c:	332a      	adds	r3, #42	; 0x2a
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	e008      	b.n	80081b4 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80081a2:	78fb      	ldrb	r3, [r7, #3]
 80081a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081a8:	68fa      	ldr	r2, [r7, #12]
 80081aa:	015b      	lsls	r3, r3, #5
 80081ac:	4413      	add	r3, r2
 80081ae:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 80081b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3714      	adds	r7, #20
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bc80      	pop	{r7}
 80081bc:	4770      	bx	lr

080081be <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80081be:	b580      	push	{r7, lr}
 80081c0:	b084      	sub	sp, #16
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
 80081c6:	460b      	mov	r3, r1
 80081c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081ca:	2300      	movs	r3, #0
 80081cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081ce:	2300      	movs	r3, #0
 80081d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80081d8:	78fa      	ldrb	r2, [r7, #3]
 80081da:	4611      	mov	r1, r2
 80081dc:	4618      	mov	r0, r3
 80081de:	f7f8 fe9a 	bl	8000f16 <HAL_PCD_SetAddress>
 80081e2:	4603      	mov	r3, r0
 80081e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081e6:	7bfb      	ldrb	r3, [r7, #15]
 80081e8:	4618      	mov	r0, r3
 80081ea:	f000 f859 	bl	80082a0 <USBD_Get_USB_Status>
 80081ee:	4603      	mov	r3, r0
 80081f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3710      	adds	r7, #16
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b086      	sub	sp, #24
 8008200:	af00      	add	r7, sp, #0
 8008202:	60f8      	str	r0, [r7, #12]
 8008204:	607a      	str	r2, [r7, #4]
 8008206:	461a      	mov	r2, r3
 8008208:	460b      	mov	r3, r1
 800820a:	72fb      	strb	r3, [r7, #11]
 800820c:	4613      	mov	r3, r2
 800820e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008210:	2300      	movs	r3, #0
 8008212:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008214:	2300      	movs	r3, #0
 8008216:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800821e:	893b      	ldrh	r3, [r7, #8]
 8008220:	7af9      	ldrb	r1, [r7, #11]
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	f7f8 ff78 	bl	8001118 <HAL_PCD_EP_Transmit>
 8008228:	4603      	mov	r3, r0
 800822a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800822c:	7dfb      	ldrb	r3, [r7, #23]
 800822e:	4618      	mov	r0, r3
 8008230:	f000 f836 	bl	80082a0 <USBD_Get_USB_Status>
 8008234:	4603      	mov	r3, r0
 8008236:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008238:	7dbb      	ldrb	r3, [r7, #22]
}
 800823a:	4618      	mov	r0, r3
 800823c:	3718      	adds	r7, #24
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}

08008242 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008242:	b580      	push	{r7, lr}
 8008244:	b086      	sub	sp, #24
 8008246:	af00      	add	r7, sp, #0
 8008248:	60f8      	str	r0, [r7, #12]
 800824a:	607a      	str	r2, [r7, #4]
 800824c:	461a      	mov	r2, r3
 800824e:	460b      	mov	r3, r1
 8008250:	72fb      	strb	r3, [r7, #11]
 8008252:	4613      	mov	r3, r2
 8008254:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008256:	2300      	movs	r3, #0
 8008258:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800825a:	2300      	movs	r3, #0
 800825c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008264:	893b      	ldrh	r3, [r7, #8]
 8008266:	7af9      	ldrb	r1, [r7, #11]
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	f7f8 ff1b 	bl	80010a4 <HAL_PCD_EP_Receive>
 800826e:	4603      	mov	r3, r0
 8008270:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008272:	7dfb      	ldrb	r3, [r7, #23]
 8008274:	4618      	mov	r0, r3
 8008276:	f000 f813 	bl	80082a0 <USBD_Get_USB_Status>
 800827a:	4603      	mov	r3, r0
 800827c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800827e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008280:	4618      	mov	r0, r3
 8008282:	3718      	adds	r7, #24
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}

08008288 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008288:	b480      	push	{r7}
 800828a:	b083      	sub	sp, #12
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	460b      	mov	r3, r1
 8008292:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008294:	bf00      	nop
 8008296:	370c      	adds	r7, #12
 8008298:	46bd      	mov	sp, r7
 800829a:	bc80      	pop	{r7}
 800829c:	4770      	bx	lr
	...

080082a0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b085      	sub	sp, #20
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	4603      	mov	r3, r0
 80082a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082aa:	2300      	movs	r3, #0
 80082ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80082ae:	79fb      	ldrb	r3, [r7, #7]
 80082b0:	2b03      	cmp	r3, #3
 80082b2:	d817      	bhi.n	80082e4 <USBD_Get_USB_Status+0x44>
 80082b4:	a201      	add	r2, pc, #4	; (adr r2, 80082bc <USBD_Get_USB_Status+0x1c>)
 80082b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ba:	bf00      	nop
 80082bc:	080082cd 	.word	0x080082cd
 80082c0:	080082d3 	.word	0x080082d3
 80082c4:	080082d9 	.word	0x080082d9
 80082c8:	080082df 	.word	0x080082df
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80082cc:	2300      	movs	r3, #0
 80082ce:	73fb      	strb	r3, [r7, #15]
    break;
 80082d0:	e00b      	b.n	80082ea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80082d2:	2302      	movs	r3, #2
 80082d4:	73fb      	strb	r3, [r7, #15]
    break;
 80082d6:	e008      	b.n	80082ea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80082d8:	2301      	movs	r3, #1
 80082da:	73fb      	strb	r3, [r7, #15]
    break;
 80082dc:	e005      	b.n	80082ea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80082de:	2302      	movs	r3, #2
 80082e0:	73fb      	strb	r3, [r7, #15]
    break;
 80082e2:	e002      	b.n	80082ea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80082e4:	2302      	movs	r3, #2
 80082e6:	73fb      	strb	r3, [r7, #15]
    break;
 80082e8:	bf00      	nop
  }
  return usb_status;
 80082ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3714      	adds	r7, #20
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bc80      	pop	{r7}
 80082f4:	4770      	bx	lr
 80082f6:	bf00      	nop

080082f8 <__libc_init_array>:
 80082f8:	b570      	push	{r4, r5, r6, lr}
 80082fa:	2500      	movs	r5, #0
 80082fc:	4e0c      	ldr	r6, [pc, #48]	; (8008330 <__libc_init_array+0x38>)
 80082fe:	4c0d      	ldr	r4, [pc, #52]	; (8008334 <__libc_init_array+0x3c>)
 8008300:	1ba4      	subs	r4, r4, r6
 8008302:	10a4      	asrs	r4, r4, #2
 8008304:	42a5      	cmp	r5, r4
 8008306:	d109      	bne.n	800831c <__libc_init_array+0x24>
 8008308:	f000 f82e 	bl	8008368 <_init>
 800830c:	2500      	movs	r5, #0
 800830e:	4e0a      	ldr	r6, [pc, #40]	; (8008338 <__libc_init_array+0x40>)
 8008310:	4c0a      	ldr	r4, [pc, #40]	; (800833c <__libc_init_array+0x44>)
 8008312:	1ba4      	subs	r4, r4, r6
 8008314:	10a4      	asrs	r4, r4, #2
 8008316:	42a5      	cmp	r5, r4
 8008318:	d105      	bne.n	8008326 <__libc_init_array+0x2e>
 800831a:	bd70      	pop	{r4, r5, r6, pc}
 800831c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008320:	4798      	blx	r3
 8008322:	3501      	adds	r5, #1
 8008324:	e7ee      	b.n	8008304 <__libc_init_array+0xc>
 8008326:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800832a:	4798      	blx	r3
 800832c:	3501      	adds	r5, #1
 800832e:	e7f2      	b.n	8008316 <__libc_init_array+0x1e>
 8008330:	08008454 	.word	0x08008454
 8008334:	08008454 	.word	0x08008454
 8008338:	08008454 	.word	0x08008454
 800833c:	08008458 	.word	0x08008458

08008340 <memcpy>:
 8008340:	b510      	push	{r4, lr}
 8008342:	1e43      	subs	r3, r0, #1
 8008344:	440a      	add	r2, r1
 8008346:	4291      	cmp	r1, r2
 8008348:	d100      	bne.n	800834c <memcpy+0xc>
 800834a:	bd10      	pop	{r4, pc}
 800834c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008350:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008354:	e7f7      	b.n	8008346 <memcpy+0x6>

08008356 <memset>:
 8008356:	4603      	mov	r3, r0
 8008358:	4402      	add	r2, r0
 800835a:	4293      	cmp	r3, r2
 800835c:	d100      	bne.n	8008360 <memset+0xa>
 800835e:	4770      	bx	lr
 8008360:	f803 1b01 	strb.w	r1, [r3], #1
 8008364:	e7f9      	b.n	800835a <memset+0x4>
	...

08008368 <_init>:
 8008368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800836a:	bf00      	nop
 800836c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800836e:	bc08      	pop	{r3}
 8008370:	469e      	mov	lr, r3
 8008372:	4770      	bx	lr

08008374 <_fini>:
 8008374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008376:	bf00      	nop
 8008378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800837a:	bc08      	pop	{r3}
 800837c:	469e      	mov	lr, r3
 800837e:	4770      	bx	lr
